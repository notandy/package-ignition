diff --color -Naur patches2/flatcar-ignition-patches patches/flatcar-ignition-patches
--- a/debian/patches/flatcar-ignition-patches	1969-12-31 19:00:00
+++ b/debian/patches/flatcar-ignition-patches	2024-05-22 16:08:13
@@ -0,0 +1,9460 @@
+Description: Flatcar ignition patches
+ These patches bring Flatcar custom features (from a runtime execution point-of-view) to CoreOS's Ignition.
+ .
+ ignition (2.18.0-0gardenlinux~dev) gardenlinux; urgency=medium
+ .
+   * Update to 2.18.0
+Author: Garden Linux Builder <contact@gardenlinux.io>
+
+---
+The information above should follow the Patch Tagging Guidelines, please
+checkout https://dep.debian.net/deps/dep3/ to learn about the format. Here
+are templates for supplementary fields that you might want to add:
+
+Origin: (upstream|backport|vendor|other), (<patch-url>|commit:<commit-id>)
+Bug: <upstream-bugtracker-url>
+Bug-Debian: https://bugs.debian.org/<bugnumber>
+Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
+Forwarded: (no|not-needed|<patch-forwarded-url>)
+Applied-Upstream: <version>, (<commit-url>|commit:<commid-id>)
+Reviewed-By: <name and email of someone who approved/reviewed the patch>
+Last-Update: 2024-05-22
+
+--- ignition-2.18.0.orig/.github/ISSUE_TEMPLATE/release-checklist.md
++++ ignition-2.18.0/.github/ISSUE_TEMPLATE/release-checklist.md
+@@ -6,9 +6,9 @@ Release checklist:
+ 
+ Tagging:
+  - [ ] Write release notes in `docs/release-notes.md`. Get them reviewed and merged
+-   - [ ] If the release signing key has changed because a new Fedora release has gone stable, note the change as done [here](https://github.com/coreos/ignition/releases/tag/v2.10.1).
++   - [ ] If the release signing key has changed because a new Fedora release has gone stable, note the change as done [here](https://github.com/flatcar/ignition/releases/tag/v2.10.1).
+    - [ ] If doing a branched release, also include a PR to merge the `docs/release-notes.md` changes into main
+- - [ ] Ensure your local copy is up to date with the upstream main branch (`git@github.com:coreos/ignition.git`)
++ - [ ] Ensure your local copy is up to date with the upstream main branch (`git@github.com:flatcar/ignition.git`)
+  - [ ] Ensure your working directory is clean (`git clean -fdx`)
+  - [ ] Ensure you can sign commits and any yubikeys/smartcards are plugged in
+  - [ ] Run `./tag_release.sh <vX.Y.z> <git commit hash>`
+@@ -51,13 +51,13 @@ GitHub release:
+  - [ ] Wait for the ticket to be closed
+  - [ ] Download the artifacts and signatures
+  - [ ] Verify the signatures
+- - [ ] Find the new tag in the [GitHub tag list](https://github.com/coreos/ignition/tags) and click the triple dots menu, and create a draft release for it.
++ - [ ] Find the new tag in the [GitHub tag list](https://github.com/flatcar/ignition/tags) and click the triple dots menu, and create a draft release for it.
+  - [ ] Copy and paste the release notes from `docs/release-notes.md`
+  - [ ] Upload all the release artifacts and their signatures
+  - [ ] Publish the release
+ 
+ Quay release:
+- - [ ] Visit the [Quay tags page](https://quay.io/repository/coreos/ignition-validate?tab=tags) and wait for a versioned tag to appear
++ - [ ] Visit the [Quay tags page](https://quay.io/repository/flatcar/ignition-validate?tab=tags) and wait for a versioned tag to appear
+  - [ ] Click the gear next to the tag, select "Add New Tag", enter `release`, and confirm
+ 
+ RHCOS packaging for the current RHCOS development release:
+--- ignition-2.18.0.orig/.github/ISSUE_TEMPLATE/stabilize-checklist.md
++++ ignition-2.18.0/.github/ISSUE_TEMPLATE/stabilize-checklist.md
+@@ -64,7 +64,7 @@ If there are any external kola tests tha
+ 
+ ## Other packages
+ 
+-- [ ] Add a stable spec to [ignition-config-rs](https://github.com/coreos/ignition-config-rs) and [regenerate schema](https://github.com/coreos/ignition-config-rs/blob/main/docs/development.md#regenerating-schemars).
++- [ ] Add a stable spec to [ignition-config-rs](https://github.com/flatcar/ignition-config-rs) and [regenerate schema](https://github.com/coreos/ignition-config-rs/blob/main/docs/development.md#regenerating-schemars).
+   - [ ] Put out a new release.
+ - [ ] Bump ignition-config-rs in coreos-installer to support the new spec in `iso customize` and `pxe customize`. Update release notes.
+   - [ ] Put out a new coreos-installer release.
+--- ignition-2.18.0.orig/.github/workflows/container-rebuild.yml
++++ ignition-2.18.0/.github/workflows/container-rebuild.yml
+@@ -42,6 +42,6 @@ jobs:
+         with:
+           credentials: ${{ secrets.QUAY_AUTH }}
+           file: Dockerfile.validate
+-          push: quay.io/coreos/ignition-validate
++          push: quay.io/flatcar/ignition-validate
+           arches: amd64 arm64
+           tags: ${{ github.event.inputs.docker-tag }} release
+--- ignition-2.18.0.orig/.github/workflows/container.yml
++++ ignition-2.18.0/.github/workflows/container.yml
+@@ -38,7 +38,7 @@ jobs:
+         with:
+           credentials: ${{ secrets.QUAY_AUTH }}
+           file: Dockerfile.validate
+-          push: quay.io/coreos/ignition-validate
++          push: quay.io/flatcar/ignition-validate
+           arches: amd64 arm64
+           # Speed up PR CI by skipping non-amd64
+           pr-arches: amd64
+--- ignition-2.18.0.orig/.github/workflows/ignition-validate.yml
++++ ignition-2.18.0/.github/workflows/ignition-validate.yml
+@@ -32,7 +32,7 @@ jobs:
+       uses: actions/checkout@v3
+     - name: Build ignition-validate
+       shell: bash
+-      run: go build -o ignition-validate github.com/coreos/ignition/v2/validate
++      run: go build -o ignition-validate github.com/flatcar/ignition/v2/validate
+     - name: Test ignition-validate
+       shell: bash
+       run: |
+--- ignition-2.18.0.orig/README.md
++++ ignition-2.18.0/README.md
+@@ -16,18 +16,18 @@ Odds are good that you don't want to inv
+ 
+ See [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches and the contribution workflow.
+ 
+-To help triage or fix bugs, see the current [Ignition issues](https://github.com/coreos/ignition/issues/).
++To help triage or fix bugs, see the current [Ignition issues](https://github.com/flatcar/ignition/issues/).
+ 
+ ## Config Validation
+ 
+-To validate a config for Ignition there are binaries for a cli tool called `ignition-validate` available [on the releases page][releases]. There is also an ignition-validate container: `quay.io/coreos/ignition-validate`.
++To validate a config for Ignition there are binaries for a cli tool called `ignition-validate` available [on the releases page][releases]. There is also an ignition-validate container: `quay.io/flatcar/ignition-validate`.
+ 
+ Example:
+ ```
+ # This example uses podman, but docker can be used too
+-podman run --pull=always --rm -i quay.io/coreos/ignition-validate:release - < myconfig.ign
++podman run --pull=always --rm -i quay.io/flatcar/ignition-validate:release - < myconfig.ign
+ ```
+ 
+ [getting started]: docs/getting-started.md
+-[issues]: https://github.com/coreos/ignition/issues/new/choose
+-[releases]: https://github.com/coreos/ignition/releases
++[issues]: https://github.com/flatcar/ignition/issues/new/choose
++[releases]: https://github.com/flatcar/ignition/releases
+--- ignition-2.18.0.orig/build
++++ ignition-2.18.0/build
+@@ -5,7 +5,7 @@ set -eu
+ export GO111MODULE=on
+ 
+ NAME="ignition"
+-ORG_PATH="github.com/coreos"
++ORG_PATH="github.com/flatcar"
+ REPO_PATH="${ORG_PATH}/${NAME}/v2"
+ GLDFLAGS=${GLDFLAGS:-}
+ export GOFLAGS=-mod=vendor
+@@ -15,7 +15,7 @@ if [ -z ${VERSION+a} ]; then
+ 	echo "Using version from git: $VERSION"
+ fi
+ 
+-GLDFLAGS+="-X github.com/coreos/ignition/v2/internal/version.Raw=${VERSION}"
++GLDFLAGS+="-X github.com/flatcar/ignition/v2/internal/version.Raw=${VERSION}"
+ 
+ eval $(go env)
+ 
+--- ignition-2.18.0.orig/build_blackbox_tests
++++ ignition-2.18.0/build_blackbox_tests
+@@ -6,11 +6,11 @@ set -eu
+ # tests will be run and where the stubs will be located, rely on the bb test caller setting up
+ # their PATH to include them. We don't need to include `id` because it gets copied into the
+ # system
+-GLDFLAGS="-X github.com/coreos/ignition/v2/internal/distro.useraddCmd=useradd-stub "
+-GLDFLAGS+="-X github.com/coreos/ignition/v2/internal/distro.usermodCmd=usermod-stub "
+-GLDFLAGS+="-X github.com/coreos/ignition/v2/internal/distro.userdelCmd=userdel-stub "
+-GLDFLAGS+="-X github.com/coreos/ignition/v2/internal/distro.groupdelCmd=groupdel-stub "
+-GLDFLAGS+="-X github.com/coreos/ignition/v2/internal/distro.blackboxTesting=true "
++GLDFLAGS="-X github.com/flatcar/ignition/v2/internal/distro.useraddCmd=useradd-stub "
++GLDFLAGS+="-X github.com/flatcar/ignition/v2/internal/distro.usermodCmd=usermod-stub "
++GLDFLAGS+="-X github.com/flatcar/ignition/v2/internal/distro.userdelCmd=userdel-stub "
++GLDFLAGS+="-X github.com/flatcar/ignition/v2/internal/distro.groupdelCmd=groupdel-stub "
++GLDFLAGS+="-X github.com/flatcar/ignition/v2/internal/distro.blackboxTesting=true "
+ 
+ . ./build
+ 
+--- ignition-2.18.0.orig/build_for_container
++++ ignition-2.18.0/build_for_container
+@@ -12,7 +12,7 @@ if [ -z ${VERSION+a} ]; then
+ 	VERSION=$(git describe --dirty --always)
+ fi
+ 
+-GLDFLAGS+="-X github.com/coreos/ignition/v2/internal/version.Raw=${VERSION}"
++GLDFLAGS+="-X github.com/flatcar/ignition/v2/internal/version.Raw=${VERSION}"
+ 
+ if [[ -n "$(git status -s)" ]]; then
+     echo "git repo not clean"
+--- ignition-2.18.0.orig/config/config.go
++++ ignition-2.18.0/config/config.go
+@@ -15,8 +15,8 @@
+ package config
+ 
+ import (
+-	exp "github.com/coreos/ignition/v2/config/v3_5_experimental"
+-	types_exp "github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	exp "github.com/flatcar/ignition/v2/config/v3_5_experimental"
++	types_exp "github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/config/config_test.go
++++ ignition-2.18.0/config/config_test.go
+@@ -19,13 +19,13 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	v3_0 "github.com/coreos/ignition/v2/config/v3_0/types"
+-	v3_1 "github.com/coreos/ignition/v2/config/v3_1/types"
+-	v3_2 "github.com/coreos/ignition/v2/config/v3_2/types"
+-	v3_3 "github.com/coreos/ignition/v2/config/v3_3/types"
+-	v3_4 "github.com/coreos/ignition/v2/config/v3_4/types"
+-	v3_5 "github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	v3_0 "github.com/flatcar/ignition/v2/config/v3_0/types"
++	v3_1 "github.com/flatcar/ignition/v2/config/v3_1/types"
++	v3_2 "github.com/flatcar/ignition/v2/config/v3_2/types"
++	v3_3 "github.com/flatcar/ignition/v2/config/v3_3/types"
++	v3_4 "github.com/flatcar/ignition/v2/config/v3_4/types"
++	v3_5 "github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ type typeSet map[reflect.Type]struct{}
+--- ignition-2.18.0.orig/config/doc/generate.go
++++ ignition-2.18.0/config/doc/generate.go
+@@ -20,7 +20,7 @@ import (
+ 	"reflect"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ type generator struct {
+--- ignition-2.18.0.orig/config/doc/schema.go
++++ ignition-2.18.0/config/doc/schema.go
+@@ -23,7 +23,7 @@ import (
+ 	"regexp"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/mitchellh/copystructure"
+--- ignition-2.18.0.orig/config/merge/merge.go
++++ ignition-2.18.0/config/merge/merge.go
+@@ -19,7 +19,7 @@ import (
+ 	"reflect"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ )
+@@ -236,7 +236,7 @@ func mergeStruct(parent reflect.Value, p
+ 		case kind == reflect.Ptr && !parentField.IsNil() && !childField.IsNil() && parentField.Elem().Kind() == reflect.Struct:
+ 			// we're not supposed to have struct pointers, but some
+ 			// ended up in the Clevis and Luks structs in spec 3.2.0
+-			// https://github.com/coreos/ignition/issues/1132
++			// https://github.com/flatcar/ignition/issues/1132
+ 			resultField.Set(mergeStruct(parentField.Elem(), parentFieldPath, childField.Elem(), childFieldPath, resultFieldPath, transcript).Addr())
+ 			transcribeOne(parentFieldPath, resultFieldPath, transcript)
+ 			transcribeOne(childFieldPath, resultFieldPath, transcript)
+@@ -378,7 +378,7 @@ func transcribe(fromPath path.ContextPat
+ 		if value.Elem().Kind() == reflect.Struct {
+ 			// we're not supposed to have struct pointers, but some
+ 			// ended up in the Clevis and Luks structs in spec 3.2.0
+-			// https://github.com/coreos/ignition/issues/1132
++			// https://github.com/flatcar/ignition/issues/1132
+ 			return transcribe(fromPath, toPath, value.Elem(), fieldMeta, transcript)
+ 		}
+ 		transcribeOne(fromPath, toPath, transcript)
+--- ignition-2.18.0.orig/config/merge/merge_test.go
++++ ignition-2.18.0/config/merge/merge_test.go
+@@ -17,9 +17,9 @@ package merge
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	v3_2 "github.com/coreos/ignition/v2/config/v3_2/types"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	v3_2 "github.com/flatcar/ignition/v2/config/v3_2/types"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/stretchr/testify/assert"
+@@ -1352,7 +1352,7 @@ func TestMerge(t *testing.T) {
+ // We are explicitly testing 3.2.0 because it mistakenly has struct
+ // pointers. These should not exist but ended up in the Clevis & Luks
+ // structs in spec 3.2.0.
+-// https://github.com/coreos/ignition/issues/1132
++// https://github.com/flatcar/ignition/issues/1132
+ func TestMergeStructPointers(t *testing.T) {
+ 	type test struct {
+ 		in1        v3_2.Config
+--- ignition-2.18.0.orig/config/shared/validations/unit.go
++++ ignition-2.18.0/config/shared/validations/unit.go
+@@ -17,7 +17,7 @@
+ package validations
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/go-systemd/v22/unit"
+ )
+--- ignition-2.18.0.orig/config/translate/translate.go
++++ ignition-2.18.0/config/translate/translate.go
+@@ -18,7 +18,7 @@ import (
+ 	"fmt"
+ 	"reflect"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ /*
+--- ignition-2.18.0.orig/config/translate/translate_test.go
++++ ignition-2.18.0/config/translate/translate_test.go
+@@ -19,8 +19,8 @@ import (
+ 
+ 	"github.com/stretchr/testify/assert"
+ 
+-	"github.com/coreos/ignition/v2/config/translate/tests/pkga"
+-	"github.com/coreos/ignition/v2/config/translate/tests/pkgb"
++	"github.com/flatcar/ignition/v2/config/translate/tests/pkga"
++	"github.com/flatcar/ignition/v2/config/translate/tests/pkgb"
+ )
+ 
+ // Note: we need different input and output types which unfortunately means a lot of tests
+--- ignition-2.18.0.orig/config/util/config.go
++++ ignition-2.18.0/config/util/config.go
+@@ -15,7 +15,9 @@
+ package util
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"strconv"
++
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/report"
+@@ -25,6 +27,7 @@ type versionStub struct {
+ 	Ignition struct {
+ 		Version string
+ 	}
++	IgnitionVersion int
+ }
+ 
+ // GetConfigVersion parses the version from the given raw config
+@@ -38,7 +41,13 @@ func GetConfigVersion(raw []byte) (semve
+ 		return semver.Version{}, rpt, err
+ 	}
+ 
+-	version, err := semver.NewVersion(stub.Ignition.Version)
++	v := stub.Ignition.Version
++	// if v is empty, it might be a version 1 configuration.
++	if v == "" {
++		v = strconv.Itoa(stub.IgnitionVersion) + ".0.0"
++	}
++
++	version, err := semver.NewVersion(v)
+ 	if err != nil {
+ 		return semver.Version{}, report.Report{}, errors.ErrInvalidVersion
+ 	}
+--- ignition-2.18.0.orig/config/util/parsingErrors.go
++++ ignition-2.18.0/config/util/parsingErrors.go
+@@ -15,19 +15,72 @@
+ package util
+ 
+ import (
++	"bufio"
++	"bytes"
++	"compress/gzip"
+ 	"encoding/json"
++	"io/ioutil"
++	"net/textproto"
++	"strings"
++	"unicode"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/coreos/vcontext/tree"
+ )
+ 
++func isMultipartMime(userdata []byte) bool {
++	userdata = decompressIfGzipped(userdata)
++	mimeReader := textproto.NewReader(bufio.NewReader(bytes.NewReader(userdata)))
++	header, err := mimeReader.ReadMIMEHeader()
++	if err != nil {
++		return false
++	}
++	contentType := header.Get("Content-Type")
++
++	return strings.Contains(contentType, "multipart/mixed")
++}
++
++func isCloudConfig(userdata []byte) bool {
++	header := strings.SplitN(string(decompressIfGzipped(userdata)), "\n", 2)[0]
++
++	// Trim trailing whitespaces
++	header = strings.TrimRightFunc(header, unicode.IsSpace)
++
++	return (header == "#cloud-config")
++}
++
++func isScript(userdata []byte) bool {
++	header := strings.SplitN(string(decompressIfGzipped(userdata)), "\n", 2)[0]
++	return strings.HasPrefix(header, "#!")
++}
++
++func decompressIfGzipped(data []byte) []byte {
++	if reader, err := gzip.NewReader(bytes.NewReader(data)); err == nil {
++		uncompressedData, err := ioutil.ReadAll(reader)
++		reader.Close()
++		if err == nil {
++			return uncompressedData
++		} else {
++			return data
++		}
++	} else {
++		return data
++	}
++}
++
+ // HandleParseErrors will attempt to unmarshal an invalid rawConfig into "to".
+ // If it fails to unmarsh it will generate a report.Report from the errors.
+ func HandleParseErrors(rawConfig []byte, to interface{}) (report.Report, error) {
+ 	r := report.Report{}
++
++	if isCloudConfig(rawConfig) || isScript(rawConfig) || isMultipartMime(rawConfig) {
++		// returning ErrEmpty will make ignition ignoring this user provided config.
++		return report.Report{}, errors.ErrEmpty
++	}
++
+ 	err := json.Unmarshal(rawConfig, to)
+ 	if err == nil {
+ 		return report.Report{}, nil
+--- /dev/null
++++ ignition-2.18.0/config/util/translate.go
+@@ -0,0 +1,166 @@
++// Copyright 2020 Red Hat, Inc.
++//
++// Licensed under the Apache License, Version 2.0 (the "License");
++// you may not use this file except in compliance with the License.
++// You may obtain a copy of the License at
++//
++//     http://www.apache.org/licenses/LICENSE-2.0
++//
++// Unless required by applicable law or agreed to in writing, software
++// distributed under the License is distributed on an "AS IS" BASIS,
++// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++// See the License for the specific language governing permissions and
++// limitations under the License.
++
++package util
++
++import (
++	"fmt"
++	"strconv"
++	"strings"
++	"sync"
++)
++
++// Error definitions
++
++// NoFilesystemError type for when a filesystem is referenced in a config but there's no mapping to where
++// it should be mounted (i.e. `path` in v3+ configs)
++type NoFilesystemError string
++
++func (e NoFilesystemError) Error() string {
++	return fmt.Sprintf("Config defined filesystem %q but no mapping was defined."+
++		"Please specify a path to be used as the filesystem mountpoint.", string(e))
++}
++
++// DuplicateInodeError is for when files, directories, or links both specify the same path
++type DuplicateInodeError struct {
++	Old string // first occurance of the path
++	New string // second occurance of the path
++}
++
++func (e DuplicateInodeError) Error() string {
++	return fmt.Sprintf("Config has conflicting inodes: %q and %q.  All files, directories and links must specify a unique `path`.", e.Old, e.New)
++}
++
++// UsesOwnLinkError is for when files, directories, or links use symlinks defined in the config
++// in their own path. This is disallowed in v3+ configs.
++type UsesOwnLinkError struct {
++	LinkPath string
++	Name     string
++}
++
++func (e UsesOwnLinkError) Error() string {
++	return fmt.Sprintf("%s uses link defined in config %q. Please use a link not defined in Storage:Links", e.Name, e.LinkPath)
++}
++
++// DuplicateUnitError is for when a unit name is used twice
++type DuplicateUnitError struct {
++	Name string
++}
++
++func (e DuplicateUnitError) Error() string {
++	return fmt.Sprintf("Config has duplicate unit name %q.  All units must specify a unique `name`.", e.Name)
++}
++
++// DuplicateDropinError is for when a unit has multiple dropins with the same name
++type DuplicateDropinError struct {
++	Unit string
++	Name string
++}
++
++func (e DuplicateDropinError) Error() string {
++	return fmt.Sprintf("Config has duplicate dropin name %q in unit %q.  All dropins must specify a unique `name`.", e.Name, e.Unit)
++}
++
++func CheckPathUsesLink(links []string, path string) string {
++	for _, l := range links {
++		linkdir := l
++		if !strings.HasSuffix(l, "/") {
++			linkdir += "/"
++		}
++		if strings.HasPrefix(path, linkdir) && path != l {
++			return l
++		}
++	}
++	return ""
++}
++
++func StrP(in string) *string {
++	if in == "" {
++		return nil
++	}
++	return &in
++}
++
++func StrPStrict(in string) *string {
++	return &in
++}
++
++func BoolP(in bool) *bool {
++	if !in {
++		return nil
++	}
++	return &in
++}
++
++func BoolPStrict(in bool) *bool {
++	return &in
++}
++
++func IntP(in int) *int {
++	if in == 0 {
++		return nil
++	}
++	return &in
++}
++
++func StrV(in *string) string {
++	if in == nil {
++		return ""
++	}
++	return *in
++}
++
++func BoolV(in *bool) bool {
++	if in == nil {
++		return false
++	}
++	return *in
++}
++
++func IntV(in *int) int {
++	if in == nil {
++		return 0
++	}
++	return *in
++}
++
++var (
++	generatedNameCounter uint64
++	addedSuffixCounter   uint64
++	counterMutex         sync.Mutex
++)
++
++// FSGeneration generates a name and a path that will be used to feed
++// the `fsMap` in case consumer provided no entry for it in the map.
++// FSMap is required to link the filesystem from v2 to v3 with the rest of the configuration.
++func FSGeneration(name string, fsMap map[string]string) (string, error) {
++	counterMutex.Lock()
++	if len(name) == 0 {
++		generatedNameCounter += 1
++		name = "ignition" + strconv.FormatUint(generatedNameCounter, 10)
++	}
++
++	if _, ok := fsMap[name]; !ok {
++		addedSuffixCounter += 1
++		if name == "oem" {
++			fsMap[name] = "/oem"
++		} else {
++			// generate a new path
++			fsMap[name] = "/tmp/" + name + "-ign" + strconv.FormatUint(addedSuffixCounter, 10)
++		}
++	}
++
++	counterMutex.Unlock()
++	return name, nil
++}
+--- /dev/null
++++ ignition-2.18.0/config/v24tov31/v24tov31.go
+@@ -0,0 +1,729 @@
++// Copyright 2020 Red Hat, Inc.
++//
++// Licensed under the Apache License, Version 2.0 (the "License");
++// you may not use this file except in compliance with the License.
++// You may obtain a copy of the License at
++//
++//     http://www.apache.org/licenses/LICENSE-2.0
++//
++// Unless required by applicable law or agreed to in writing, software
++// distributed under the License is distributed on an "AS IS" BASIS,
++// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++// See the License for the specific language governing permissions and
++// limitations under the License.
++
++package v24tov31
++
++import (
++	"errors"
++	"fmt"
++	"net/url"
++	"path"
++	"path/filepath"
++	"reflect"
++	"strings"
++
++	old "github.com/flatcar/ignition/config/v2_4/types"
++	oldValidate "github.com/flatcar/ignition/config/validate"
++	"github.com/flatcar/ignition/v2/config/merge"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_1/types"
++	"github.com/flatcar/ignition/v2/config/validate"
++)
++
++// Check2_4 returns if the config is translatable but does not do any translation.
++// fsMap is a map from v2 filesystem names to the paths under which they should
++// be mounted in v3.
++func Check2_4(cfg old.Config, fsMap map[string]string) error {
++	rpt := oldValidate.ValidateWithoutSource(reflect.ValueOf(cfg))
++	if rpt.IsFatal() || rpt.IsDeprecated() {
++		// disallow any deprecated fields
++		return fmt.Errorf("Invalid input config:\n%s", rpt.String())
++	}
++
++	// check that all filesystems have a path
++	if fsMap == nil {
++		fsMap = map[string]string{}
++	}
++	fsMap["root"] = "/"
++	for _, fs := range cfg.Storage.Filesystems {
++		name, err := util.FSGeneration(fs.Name, fsMap)
++		if err != nil {
++			return fmt.Errorf("generating filesystem path and name: %w", err)
++		}
++
++		fs.Name = name
++
++		if fs.Mount.Create != nil && !fs.Mount.Create.Force {
++			return fmt.Errorf("Config must force filesystem creation in case `mount.create` object is defined.")
++		}
++	}
++
++	// check that there are no duplicates with files, links, or directories
++	// from path to a pretty-printing description of the entry
++	entryMap := map[string]string{}
++	links := make([]string, 0, len(cfg.Storage.Links))
++	// build up a list of all the links we write. We're not allow to use links
++	// that we write
++	for _, link := range cfg.Storage.Links {
++		pathString := path.Join("/", fsMap[link.Filesystem], link.Path)
++		links = append(links, pathString)
++	}
++
++	for _, file := range cfg.Storage.Files {
++		pathString := path.Join("/", fsMap[file.Filesystem], file.Path)
++		name := fmt.Sprintf("File: %s", pathString)
++		if duplicate, isDup := entryMap[pathString]; isDup {
++			return util.DuplicateInodeError{Old: duplicate, New: name}
++		}
++		if l := util.CheckPathUsesLink(links, pathString); l != "" {
++			return &util.UsesOwnLinkError{
++				LinkPath: l,
++				Name:     name,
++			}
++		}
++		entryMap[pathString] = name
++	}
++	for _, dir := range cfg.Storage.Directories {
++		pathString := path.Join("/", fsMap[dir.Filesystem], dir.Path)
++		name := fmt.Sprintf("Directory: %s", pathString)
++		if duplicate, isDup := entryMap[pathString]; isDup {
++			return util.DuplicateInodeError{Old: duplicate, New: name}
++		}
++		if l := util.CheckPathUsesLink(links, pathString); l != "" {
++			return &util.UsesOwnLinkError{
++				LinkPath: l,
++				Name:     name,
++			}
++		}
++		entryMap[pathString] = name
++	}
++	for _, link := range cfg.Storage.Links {
++		pathString := path.Join("/", fsMap[link.Filesystem], link.Path)
++		name := fmt.Sprintf("Link: %s", pathString)
++		if duplicate, isDup := entryMap[pathString]; isDup {
++			return &util.DuplicateInodeError{Old: duplicate, New: name}
++		}
++		entryMap[pathString] = name
++		if l := util.CheckPathUsesLink(links, pathString); l != "" {
++			return &util.UsesOwnLinkError{
++				LinkPath: l,
++				Name:     name,
++			}
++		}
++	}
++
++	for _, unit := range cfg.Systemd.Units {
++		dropinMap := map[string]struct{}{} // dropin name -> struct{}
++		for _, dropin := range unit.Dropins {
++			if _, isDup := dropinMap[dropin.Name]; isDup {
++				return util.DuplicateDropinError{Unit: unit.Name, Name: dropin.Name}
++			}
++			dropinMap[dropin.Name] = struct{}{}
++		}
++	}
++
++	return nil
++}
++
++// Translate translates an Ignition spec v2.4 config to v3.1
++func Translate(cfg old.Config, fsMap map[string]string) (types.Config, error) {
++	if err := Check2_4(cfg, fsMap); err != nil {
++		return types.Config{}, err
++	}
++
++	files := translateFiles(cfg.Storage.Files, fsMap)
++	files = append(files, translateNetworkd(cfg.Networkd.Units, fsMap)...)
++
++	res := types.Config{
++		// Ignition section
++		Ignition: types.Ignition{
++			Version: "3.1.0",
++			Config: types.IgnitionConfig{
++				Replace: translateCfgRef(cfg.Ignition.Config.Replace),
++				Merge:   translateCfgRefs(cfg.Ignition.Config.Append),
++			},
++			Security: types.Security{
++				TLS: types.TLS{
++					CertificateAuthorities: translateCAs(cfg.Ignition.Security.TLS.CertificateAuthorities),
++				},
++			},
++			Timeouts: types.Timeouts{
++				HTTPResponseHeaders: cfg.Ignition.Timeouts.HTTPResponseHeaders,
++				HTTPTotal:           cfg.Ignition.Timeouts.HTTPTotal,
++			},
++			Proxy: types.Proxy{
++				HTTPProxy:  util.StrP(cfg.Ignition.Proxy.HTTPProxy),
++				HTTPSProxy: util.StrP(cfg.Ignition.Proxy.HTTPSProxy),
++				NoProxy:    translateNoProxy(cfg.Ignition.Proxy.NoProxy),
++			},
++		},
++		// Passwd section
++		Passwd: types.Passwd{
++			Users:  translateUsers(cfg.Passwd.Users),
++			Groups: translateGroups(cfg.Passwd.Groups),
++		},
++		Systemd: types.Systemd{
++			Units: translateUnits(cfg.Systemd.Units),
++		},
++		Storage: types.Storage{
++			Disks:       translateDisks(cfg.Storage.Disks),
++			Raid:        translateRaid(cfg.Storage.Raid),
++			Filesystems: translateFilesystems(cfg.Storage.Filesystems, fsMap),
++			Files:       files,
++			Directories: translateDirectories(cfg.Storage.Directories, fsMap),
++			Links:       translateLinks(cfg.Storage.Links, fsMap),
++		},
++	}
++	r := validate.ValidateWithContext(res, nil)
++	if r.IsFatal() {
++		return types.Config{}, errors.New(r.String())
++	}
++	return res, nil
++}
++
++func translateNoProxy(noproxy []old.NoProxyItem) (ret []types.NoProxyItem) {
++	for _, d := range noproxy {
++		ret = append(ret, types.NoProxyItem(d))
++	}
++	return
++}
++
++func translateCfgRef(ref *old.ConfigReference) (ret types.Resource) {
++	if ref == nil {
++		return
++	}
++	ret.Source = &ref.Source
++	ret.Verification.Hash = ref.Verification.Hash
++	ret.HTTPHeaders = translateHTTPHeaders(ref.HTTPHeaders)
++
++	return
++}
++
++func translateHTTPHeaders(headers []old.HTTPHeader) (ret []types.HTTPHeader) {
++	for _, o := range headers {
++		ret = append(ret, types.HTTPHeader{
++			Name:  o.Name,
++			Value: util.StrP(o.Value),
++		})
++	}
++	return
++}
++
++func translateCfgRefs(refs []old.ConfigReference) (ret []types.Resource) {
++	for _, ref := range refs {
++		ret = append(ret, translateCfgRef(&ref))
++	}
++	return
++}
++
++func translateCAs(refs []old.CaReference) (ret []types.Resource) {
++	for _, ref := range refs {
++		ret = append(ret, types.Resource{
++			Source: &ref.Source,
++			Verification: types.Verification{
++				Hash: ref.Verification.Hash,
++			},
++			HTTPHeaders: translateHTTPHeaders(ref.HTTPHeaders),
++		})
++	}
++	return
++}
++
++func translateUsers(users []old.PasswdUser) (ret []types.PasswdUser) {
++	for _, u := range users {
++		uid := u.UID
++		gecos := u.Gecos
++		homeDir := u.HomeDir
++		noCreateHome := u.NoCreateHome
++		primaryGroup := u.PrimaryGroup
++		groups := translateUserGroups(u.Groups)
++		noUserGroup := u.NoUserGroup
++		noLogInit := u.NoLogInit
++		shell := u.Shell
++		system := u.System
++
++		// support deprecated `create` object
++		if u.Create != nil {
++			create := u.Create
++			uid = create.UID
++			gecos = create.Gecos
++			homeDir = create.HomeDir
++			noCreateHome = create.NoCreateHome
++			primaryGroup = create.PrimaryGroup
++			noUserGroup = create.NoUserGroup
++			noLogInit = create.NoLogInit
++			shell = create.Shell
++			system = create.System
++
++			// convert group type
++			g := make([]types.Group, len(create.Groups))
++			for i, group := range create.Groups {
++				g[i] = types.Group(group)
++			}
++
++			groups = g
++		}
++
++		ret = append(ret, types.PasswdUser{
++			Name:              u.Name,
++			PasswordHash:      u.PasswordHash,
++			SSHAuthorizedKeys: translateUserSSH(u.SSHAuthorizedKeys),
++			UID:               uid,
++			Gecos:             util.StrP(gecos),
++			HomeDir:           util.StrP(homeDir),
++			NoCreateHome:      util.BoolP(noCreateHome),
++			PrimaryGroup:      util.StrP(primaryGroup),
++			Groups:            groups,
++			NoUserGroup:       util.BoolP(noUserGroup),
++			NoLogInit:         util.BoolP(noLogInit),
++			Shell:             util.StrP(shell),
++			System:            util.BoolP(system),
++		})
++	}
++	return
++}
++
++func translateUserSSH(in []old.SSHAuthorizedKey) (ret []types.SSHAuthorizedKey) {
++	for _, k := range in {
++		ret = append(ret, types.SSHAuthorizedKey(k))
++	}
++	return
++}
++
++func translateUserGroups(in []old.Group) (ret []types.Group) {
++	for _, g := range in {
++		ret = append(ret, types.Group(g))
++	}
++	return
++}
++
++func translateGroups(groups []old.PasswdGroup) (ret []types.PasswdGroup) {
++	for _, g := range groups {
++		ret = append(ret, types.PasswdGroup{
++			Name:         g.Name,
++			Gid:          g.Gid,
++			PasswordHash: util.StrP(g.PasswordHash),
++			System:       util.BoolP(g.System),
++		})
++	}
++	return
++}
++
++func translateUnits(units []old.Unit) (ret []types.Unit) {
++	unitsMap := map[string]types.Unit{}
++
++	for _, u := range units {
++		var enabled *bool
++		// The Enabled field wins over Enable, since Enable is deprecated in spec v2 and removed in v3.
++		// It does so following the apparent intent of the upstream code [1]
++		// which actually does the opposite for Enable=true Enabled=false
++		// because the first matching line in a systemd preset wins.
++		// [1] https://github.com/flatcar-linux/ignition/blob/b4d18ad3fcb278a890327f858c1c10256ab6ee9d/internal/exec/stages/files/units.go#L32
++		if (u.Enabled != nil && *u.Enabled) || u.Enable {
++			enabled = util.BoolP(true)
++		}
++		if u.Enabled != nil && !*u.Enabled {
++			enabled = util.BoolPStrict(false)
++		}
++
++		// 'trUnit' is the translated unit, a candidate for insertion.
++		trUnit := types.Unit{
++			Name:     u.Name,
++			Enabled:  enabled,
++			Mask:     util.BoolP(u.Mask),
++			Contents: util.StrP(u.Contents),
++			Dropins:  translateDropins(u.Dropins),
++		}
++
++		// We check for an already added unit with the same name (it should be unique).
++		// 'prUnit' for previous unit.
++		if prUnit, ok := unitsMap[trUnit.Name]; ok {
++			// We prepare the merging of the two units. For this, we need to
++			// wrap them into an actual Ignition Config.
++			parent := types.Config{
++				Systemd: types.Systemd{
++					Units: []types.Unit{
++						prUnit,
++					},
++				},
++			}
++
++			child := types.Config{
++				Systemd: types.Systemd{
++					Units: []types.Unit{
++						trUnit,
++					},
++				},
++			}
++
++			// We actually merge the two configurations, it should not raise any error.
++			res, _ := merge.MergeStructTranscribe(parent, child)
++			mergedConfig := res.(types.Config)
++
++			mergedUnits := mergedConfig.Systemd.Units
++
++			// We should only get one new unit from the merge.
++			if len(mergedUnits) == 1 {
++				// We override the previous unit with the new one for the next round.
++				unitsMap[u.Name] = mergedUnits[0]
++				continue
++			}
++		}
++
++		// We track the unit as added.
++		unitsMap[u.Name] = trUnit
++	}
++
++	for _, value := range unitsMap {
++		ret = append(ret, value)
++	}
++
++	return
++}
++
++func translateDropins(dropins []old.SystemdDropin) (ret []types.Dropin) {
++	for _, d := range dropins {
++		ret = append(ret, types.Dropin{
++			Name:     d.Name,
++			Contents: util.StrP(d.Contents),
++		})
++	}
++	return
++}
++
++func translateDisks(disks []old.Disk) (ret []types.Disk) {
++	for _, d := range disks {
++		ret = append(ret, types.Disk{
++			Device:     d.Device,
++			WipeTable:  util.BoolP(d.WipeTable),
++			Partitions: translatePartitions(d.Partitions),
++		})
++	}
++	return
++}
++
++func translatePartitions(parts []old.Partition) (ret []types.Partition) {
++	for _, p := range parts {
++		ret = append(ret, types.Partition{
++			Label:              p.Label,
++			Number:             p.Number,
++			SizeMiB:            p.SizeMiB,
++			StartMiB:           p.StartMiB,
++			TypeGUID:           util.StrP(p.TypeGUID),
++			GUID:               util.StrP(p.GUID),
++			WipePartitionEntry: util.BoolP(p.WipePartitionEntry),
++			ShouldExist:        p.ShouldExist,
++		})
++	}
++	return
++}
++
++func translateRaid(raids []old.Raid) (ret []types.Raid) {
++	for _, r := range raids {
++		ret = append(ret, types.Raid{
++			Name:    r.Name,
++			Level:   r.Level,
++			Devices: translateDevices(r.Devices),
++			Spares:  util.IntP(r.Spares),
++			Options: translateRaidOptions(r.Options),
++		})
++	}
++	return
++}
++
++func translateDevices(devices []old.Device) (ret []types.Device) {
++	for _, d := range devices {
++		ret = append(ret, types.Device(d))
++	}
++	return
++}
++
++func translateRaidOptions(options []old.RaidOption) (ret []types.RaidOption) {
++	for _, o := range options {
++		ret = append(ret, types.RaidOption(o))
++	}
++	return
++}
++
++func translateFilesystems(fss []old.Filesystem, m map[string]string) (ret []types.Filesystem) {
++	for _, f := range fss {
++		if f.Name == "root" {
++			// root is implied
++			continue
++		}
++		if f.Mount == nil {
++			f.Mount = &old.Mount{}
++		}
++
++		wipe := util.BoolP(f.Mount.WipeFilesystem)
++		options := translateFilesystemOptions(f.Mount.Options)
++
++		// If we have a `"create": {...}` section, we try
++		// to convert it.
++		if f.Mount.Create != nil {
++			// `wipe` should always be set to `true` - there is a config check
++			// in the beginning of the translation to ensure that we don't try to
++			// use this `create` section without forcing the exising filesystem to be
++			// wiped.
++			wipe = util.BoolP(f.Mount.Create.Force)
++
++			for _, opt := range f.Mount.Create.Options {
++				options = append(options, types.FilesystemOption(opt))
++			}
++		}
++
++		format := f.Mount.Format
++		if strings.ToLower(f.Name) == "oem" && (wipe == nil || !*wipe) {
++			format = "btrfs"
++		}
++
++		ret = append(ret, types.Filesystem{
++			Device:         f.Mount.Device,
++			Format:         util.StrP(format),
++			WipeFilesystem: wipe,
++			Label:          f.Mount.Label,
++			UUID:           f.Mount.UUID,
++			Options:        options,
++			Path:           util.StrP(m[f.Name]),
++		})
++	}
++	return
++}
++
++func translateFilesystemOptions(options []old.MountOption) (ret []types.FilesystemOption) {
++	for _, o := range options {
++		ret = append(ret, types.FilesystemOption(o))
++	}
++	return
++}
++
++func translateNode(n old.Node, m map[string]string) types.Node {
++	if n.User == nil {
++		n.User = &old.NodeUser{}
++	}
++	if n.Group == nil {
++		n.Group = &old.NodeGroup{}
++	}
++	return types.Node{
++		Path: path.Join(m[n.Filesystem], n.Path),
++		User: types.NodeUser{
++			ID:   n.User.ID,
++			Name: util.StrP(n.User.Name),
++		},
++		Group: types.NodeGroup{
++			ID:   n.Group.ID,
++			Name: util.StrP(n.Group.Name),
++		},
++		Overwrite: n.Overwrite,
++	}
++}
++
++func translateFiles(files []old.File, m map[string]string) (ret []types.File) {
++	for _, f := range files {
++		// 2.x files are overwrite by default
++		if f.Node.Overwrite == nil {
++			f.Node.Overwrite = util.BoolP(true)
++		}
++
++		// In spec 3, overwrite must be false if append is true
++		// i.e. spec 2 files with append true must be translated to spec 3 files with overwrite false
++		if f.FileEmbedded1.Append {
++			f.Node.Overwrite = util.BoolPStrict(false)
++		}
++
++		file := types.File{
++			Node: translateNode(f.Node, m),
++			FileEmbedded1: types.FileEmbedded1{
++				Mode: f.Mode,
++			},
++		}
++		c := types.Resource{
++			Compression: util.StrP(f.Contents.Compression),
++			Source:      util.StrPStrict(f.Contents.Source),
++			HTTPHeaders: translateHTTPHeaders(f.Contents.HTTPHeaders),
++		}
++		c.Verification.Hash = f.FileEmbedded1.Contents.Verification.Hash
++
++		if f.Append {
++			file.Append = []types.Resource{c}
++		} else {
++			file.Contents = c
++		}
++		ret = append(ret, file)
++	}
++	return
++}
++
++func translateNetworkd(units []old.Networkdunit, m map[string]string) []types.File {
++	var ret []types.File
++
++	for _, u := range units {
++		if u.Contents != "" {
++			file := types.File{
++				Node: types.Node{
++					// 2.x files are overwrite by default
++					Overwrite: util.BoolP(true),
++				},
++				FileEmbedded1: types.FileEmbedded1{
++					// Ignition default file permission
++					Mode: util.IntP(int(0644)),
++				},
++			}
++			// path /etc/systemd/network is hardcoded in Ignition2.x codebase.
++			// TODO: customize this path at compilation time.
++			file.Node.Path = filepath.Join(m["root"], "/etc/systemd/network", u.Name)
++
++			// URL encoding unit content to follow 'data' format - we could use base64 also.
++			file.FileEmbedded1.Contents.Source = util.StrPStrict("data:," + url.PathEscape(u.Contents))
++
++			ret = append(ret, file)
++		}
++
++		for _, d := range u.Dropins {
++			file := types.File{
++				Node: types.Node{
++					// 2.x files are overwrite by default
++					Overwrite: util.BoolP(true),
++				},
++				FileEmbedded1: types.FileEmbedded1{
++					// Ignition default file permission
++					Mode: util.IntP(int(0644)),
++				},
++			}
++
++			file.Node.Path = filepath.Join(m["root"], "/etc/systemd/network", string(u.Name)+".d", d.Name)
++			file.FileEmbedded1.Contents.Source = util.StrPStrict("data:," + url.PathEscape(d.Contents))
++
++			ret = append(ret, file)
++		}
++	}
++
++	return ret
++}
++
++func translateLinks(links []old.Link, m map[string]string) (ret []types.Link) {
++	for _, l := range links {
++		ret = append(ret, types.Link{
++			Node: translateNode(l.Node, m),
++			LinkEmbedded1: types.LinkEmbedded1{
++				Hard:   util.BoolP(l.Hard),
++				Target: l.Target,
++			},
++		})
++	}
++	return
++}
++
++func translateDirectories(dirs []old.Directory, m map[string]string) (ret []types.Directory) {
++	for _, d := range dirs {
++		ret = append(ret, types.Directory{
++			Node: translateNode(d.Node, m),
++			DirectoryEmbedded1: types.DirectoryEmbedded1{
++				Mode: d.Mode,
++			},
++		})
++	}
++	return
++}
++
++// RemoveDuplicateFilesUnitsUsers is a helper function that removes duplicated files/units/users
++// from spec v2 config, since neither spec v3 nor the translator function allow for duplicate
++// file entries in the config.
++// This functionality is not included in the Translate function and has some limitations, but
++// may be useful in cases where configuration has to be sanitized before translation.
++// For duplicates, it takes ordering into consideration by taking the file/unit contents from
++// the slice with the highest index value, which is assumed to be the latest revision.
++// Unit dropins are concat'ed, i.e. if no duplicate dropin of the same name exists it is added
++// to the list of dropins of the deduplicated unit definition.
++// The function will fail if a non-root filesystem is declared on any file.
++// It will also fail if file appendices are encountered.
++func RemoveDuplicateFilesUnitsUsers(cfg old.Config) (old.Config, error) {
++	files := cfg.Storage.Files
++	units := cfg.Systemd.Units
++	users := cfg.Passwd.Users
++
++	filePathMap := map[string]bool{}
++	var outFiles []old.File
++	// range from highest to lowest index
++	for i := len(files) - 1; i >= 0; i-- {
++		if files[i].Filesystem != "root" {
++			return old.Config{}, errors.New("cannot dedupe set of files on non-root filesystem")
++		}
++		if files[i].Append {
++			return old.Config{}, errors.New("cannot dedupe set of files that contains appendices")
++		}
++		path := files[i].Path
++		if _, isDup := filePathMap[path]; isDup {
++			// dupes are ignored
++			continue
++		}
++		// append unique file
++		outFiles = append(outFiles, files[i])
++		filePathMap[path] = true
++	}
++
++	unitNameMap := map[string]bool{}
++	var outUnits []old.Unit
++	// range from highest to lowest index
++	for i := len(units) - 1; i >= 0; i-- {
++		unitName := units[i].Name
++		if _, isDup := unitNameMap[unitName]; isDup {
++			// this is a duplicated unit by name
++			if len(units[i].Dropins) > 0 {
++				for j := range outUnits {
++					if outUnits[j].Name == unitName {
++						// outUnits[j] is the highest priority entry with this unit name
++						// now loop over the new unit's dropins and append it if the name
++						// isn't duplicated in the existing unit's dropins
++						for _, newDropin := range units[i].Dropins {
++							hasExistingDropin := false
++							for _, existingDropin := range outUnits[j].Dropins {
++								if existingDropin.Name == newDropin.Name {
++									hasExistingDropin = true
++									break
++								}
++							}
++							if !hasExistingDropin {
++								outUnits[j].Dropins = append(outUnits[j].Dropins, newDropin)
++							}
++						}
++					}
++				}
++			}
++		} else {
++			// append unique unit
++			outUnits = append(outUnits, units[i])
++			unitNameMap[unitName] = true
++		}
++	}
++
++	// Concat sshkey sections into the newest passwdUser in the list
++	// Only the SSHAuthorizedKeys of a duplicate user are considered,
++	// all other fields are ignored.
++	userNameMap := map[string]bool{}
++	var outUsers []old.PasswdUser
++	// range from highest to lowest index
++	for i := len(users) - 1; i >= 0; i-- {
++		userName := users[i].Name
++		if _, isDup := userNameMap[userName]; isDup {
++			// this is a duplicated user by name, append keys to existing user
++			for j := range outUsers {
++				if outUsers[j].Name == userName {
++					outUsers[j].SSHAuthorizedKeys = append(outUsers[j].SSHAuthorizedKeys, users[i].SSHAuthorizedKeys...)
++				}
++			}
++		} else {
++			// append unique users
++			outUsers = append(outUsers, users[i])
++			userNameMap[userName] = true
++		}
++	}
++
++	// outFiles, outUnits, and outUsers should now have all duplication removed
++	cfg.Storage.Files = outFiles
++	cfg.Systemd.Units = outUnits
++	cfg.Passwd.Users = outUsers
++
++	return cfg, nil
++}
+--- /dev/null
++++ ignition-2.18.0/config/v24tov31/v24tov31_test.go
+@@ -0,0 +1,1801 @@
++// Copyright 2020 Red Hat, Inc.
++//
++// Licensed under the Apache License, Version 2.0 (the "License");
++// you may not use this file except in compliance with the License.
++// You may obtain a copy of the License at
++//
++//     http://www.apache.org/licenses/LICENSE-2.0
++//
++// Unless required by applicable law or agreed to in writing, software
++// distributed under the License is distributed on an "AS IS" BASIS,
++// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
++// See the License for the specific language governing permissions and
++// limitations under the License.
++
++package v24tov31_test
++
++import (
++	"fmt"
++	"testing"
++
++	types2_4 "github.com/flatcar/ignition/config/v2_4/types"
++	types3_1 "github.com/flatcar/ignition/v2/config/v3_1/types"
++
++	"github.com/stretchr/testify/assert"
++
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v24tov31"
++)
++
++// Configs using _all_ the (undeprecated) fields
++var (
++	userID        = 1010
++	aSha512Hash   = "sha512-c6100de5624cfb3c109909948ecb8d703bbddcd3725b8bd43dcf2cee6d2f5dc990a757575e0306a8e8eea354bcd7cfac354da911719766225668fe5430477fa8"
++	aUUID         = "9d6e42cd-dcef-4177-b4c6-2a0c979e3d82"
++	exhaustiveMap = map[string]string{
++		"var":  "/var",
++		"/var": "/var",
++	}
++
++	wrongDeprecatedConfig2_4 = types2_4.Config{
++		Ignition: types2_4.Ignition{
++			Version: "2.4.0",
++			Config: types2_4.IgnitionConfig{
++				Append: []types2_4.ConfigReference{
++					{
++						Source: "https://example.com",
++						Verification: types2_4.Verification{
++							Hash: &aSha512Hash,
++						},
++					},
++				},
++				Replace: &types2_4.ConfigReference{
++					Source: "https://example.com",
++					Verification: types2_4.Verification{
++						Hash: &aSha512Hash,
++					},
++				},
++			},
++			Timeouts: types2_4.Timeouts{
++				HTTPResponseHeaders: util.IntP(5),
++				HTTPTotal:           util.IntP(10),
++			},
++			Security: types2_4.Security{
++				TLS: types2_4.TLS{
++					CertificateAuthorities: []types2_4.CaReference{
++						{
++							Source: "https://example.com",
++							Verification: types2_4.Verification{
++								Hash: &aSha512Hash,
++							},
++						},
++					},
++				},
++			},
++			Proxy: types2_4.Proxy{
++				HTTPProxy:  "https://proxy.example.net/",
++				HTTPSProxy: "https://secure.proxy.example.net/",
++				NoProxy: []types2_4.NoProxyItem{
++					"www.example.net",
++					"www.example2.net",
++				},
++			},
++		},
++		Storage: types2_4.Storage{
++			Disks: []types2_4.Disk{
++				{
++					Device:    "/dev/sda",
++					WipeTable: true,
++					Partitions: []types2_4.Partition{
++						{
++							Label:              util.StrP("var"),
++							Number:             1,
++							SizeMiB:            util.IntP(5000),
++							StartMiB:           util.IntP(2048),
++							TypeGUID:           aUUID,
++							GUID:               aUUID,
++							WipePartitionEntry: true,
++							ShouldExist:        util.BoolP(true),
++						},
++					},
++				},
++			},
++			Raid: []types2_4.Raid{
++				{
++					Name:    "array",
++					Level:   "raid10",
++					Devices: []types2_4.Device{"/dev/sdb", "/dev/sdc"},
++					Spares:  1,
++					Options: []types2_4.RaidOption{"foobar"},
++				},
++			},
++			Filesystems: []types2_4.Filesystem{
++				{
++					Name: "/var",
++					Mount: &types2_4.Mount{
++						Device: "/dev/disk/by-partlabel/var",
++						Format: "xfs",
++						Create: &types2_4.Create{
++							Force: true,
++							Options: []types2_4.CreateOption{
++								"--labl=ROOT",
++								types2_4.CreateOption(fmt.Sprintf("--uuid=%s", aUUID)),
++							},
++						},
++						UUID: &aUUID,
++					},
++				},
++			},
++			Files: []types2_4.File{
++				{
++					Node: types2_4.Node{
++						Filesystem: "/var",
++						Path:       "/varfile",
++						Overwrite:  util.BoolPStrict(false),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					FileEmbedded1: types2_4.FileEmbedded1{
++						Append: true,
++						Mode:   util.IntP(420),
++						Contents: types2_4.FileContents{
++							Compression: "gzip",
++							Source:      "https://example.com",
++							Verification: types2_4.Verification{
++								Hash: &aSha512Hash,
++							},
++							HTTPHeaders: types2_4.HTTPHeaders{
++								types2_4.HTTPHeader{
++									Name:  "Authorization",
++									Value: "Basic YWxhZGRpbjpvcGVuc2VzYW1l",
++								},
++								types2_4.HTTPHeader{
++									Name:  "User-Agent",
++									Value: "Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)",
++								},
++							},
++						},
++					},
++				},
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/empty",
++						Overwrite:  util.BoolPStrict(false),
++					},
++					FileEmbedded1: types2_4.FileEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Directories: []types2_4.Directory{
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/rootdir",
++						Overwrite:  util.BoolP(true),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					DirectoryEmbedded1: types2_4.DirectoryEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Links: []types2_4.Link{
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/rootlink",
++						Overwrite:  util.BoolP(true),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					LinkEmbedded1: types2_4.LinkEmbedded1{
++						Hard:   false,
++						Target: "/foobar",
++					},
++				},
++			},
++		},
++	}
++
++	deprecatedConfig2_4 = types2_4.Config{
++		Ignition: types2_4.Ignition{
++			Version: "2.4.0",
++			Config: types2_4.IgnitionConfig{
++				Append: []types2_4.ConfigReference{
++					{
++						Source: "https://example.com",
++						Verification: types2_4.Verification{
++							Hash: &aSha512Hash,
++						},
++					},
++				},
++				Replace: &types2_4.ConfigReference{
++					Source: "https://example.com",
++					Verification: types2_4.Verification{
++						Hash: &aSha512Hash,
++					},
++				},
++			},
++			Timeouts: types2_4.Timeouts{
++				HTTPResponseHeaders: util.IntP(5),
++				HTTPTotal:           util.IntP(10),
++			},
++			Security: types2_4.Security{
++				TLS: types2_4.TLS{
++					CertificateAuthorities: []types2_4.CaReference{
++						{
++							Source: "https://example.com",
++							Verification: types2_4.Verification{
++								Hash: &aSha512Hash,
++							},
++						},
++					},
++				},
++			},
++			Proxy: types2_4.Proxy{
++				HTTPProxy:  "https://proxy.example.net/",
++				HTTPSProxy: "https://secure.proxy.example.net/",
++				NoProxy: []types2_4.NoProxyItem{
++					"www.example.net",
++					"www.example2.net",
++				},
++			},
++		},
++		Passwd: types2_4.Passwd{
++			Users: []types2_4.PasswdUser{
++				{
++					Name: "user",
++					Create: &types2_4.Usercreate{
++						UID: &userID,
++						Groups: []types2_4.UsercreateGroup{
++							types2_4.UsercreateGroup("docker"),
++						},
++					},
++				},
++			},
++		},
++		Networkd: types2_4.Networkd{
++			Units: []types2_4.Networkdunit{
++				{
++					Contents: "[Match]\nType=!vlan bond bridge\nName=eth*\n\n[Network]\nBond=bond0",
++					Dropins: []types2_4.NetworkdDropin{
++						{
++							Contents: "[Match]\nName=bond0\n\n[Network]\nDHCP=true",
++							Name:     "dropin-1.conf",
++						},
++					},
++					Name: "00-eth.network",
++				},
++				{
++					Contents: "[Match]\nName=eth12\n\n[Network]\nBond=bond0",
++					Name:     "99-eth.network",
++				},
++			},
++		},
++		Storage: types2_4.Storage{
++			Disks: []types2_4.Disk{
++				{
++					Device:    "/dev/sda",
++					WipeTable: true,
++					Partitions: []types2_4.Partition{
++						{
++							Label:              util.StrP("var"),
++							Number:             1,
++							SizeMiB:            util.IntP(5000),
++							StartMiB:           util.IntP(2048),
++							TypeGUID:           aUUID,
++							GUID:               aUUID,
++							WipePartitionEntry: true,
++							ShouldExist:        util.BoolP(true),
++						},
++					},
++				},
++			},
++			Raid: []types2_4.Raid{
++				{
++					Name:    "array",
++					Level:   "raid10",
++					Devices: []types2_4.Device{"/dev/sdb", "/dev/sdc"},
++					Spares:  1,
++					Options: []types2_4.RaidOption{"foobar"},
++				},
++			},
++			Filesystems: []types2_4.Filesystem{
++				{
++					Name: "/var",
++					Mount: &types2_4.Mount{
++						Device: "/dev/disk/by-partlabel/var",
++						Format: "xfs",
++						Label:  util.StrP("var"),
++						UUID:   &aUUID,
++						Create: &types2_4.Create{
++							Force: true,
++							Options: []types2_4.CreateOption{
++								"--label=var",
++								types2_4.CreateOption(fmt.Sprintf("--uuid=%s", aUUID)),
++							},
++						},
++					},
++				},
++			},
++			Files: []types2_4.File{
++				{
++					Node: types2_4.Node{
++						Filesystem: "/var",
++						Path:       "/varfile",
++						Overwrite:  util.BoolPStrict(false),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					FileEmbedded1: types2_4.FileEmbedded1{
++						Append: true,
++						Mode:   util.IntP(420),
++						Contents: types2_4.FileContents{
++							Compression: "gzip",
++							Source:      "https://example.com",
++							Verification: types2_4.Verification{
++								Hash: &aSha512Hash,
++							},
++							HTTPHeaders: types2_4.HTTPHeaders{
++								types2_4.HTTPHeader{
++									Name:  "Authorization",
++									Value: "Basic YWxhZGRpbjpvcGVuc2VzYW1l",
++								},
++								types2_4.HTTPHeader{
++									Name:  "User-Agent",
++									Value: "Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)",
++								},
++							},
++						},
++					},
++				},
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/empty",
++						Overwrite:  util.BoolPStrict(false),
++					},
++					FileEmbedded1: types2_4.FileEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Directories: []types2_4.Directory{
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/rootdir",
++						Overwrite:  util.BoolP(true),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					DirectoryEmbedded1: types2_4.DirectoryEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Links: []types2_4.Link{
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/rootlink",
++						Overwrite:  util.BoolP(true),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					LinkEmbedded1: types2_4.LinkEmbedded1{
++						Hard:   false,
++						Target: "/foobar",
++					},
++				},
++			},
++		},
++	}
++
++	badDeprecatedConfig2_4 = types2_4.Config{
++		Ignition: types2_4.Ignition{
++			Version: "2.4.0",
++			Config: types2_4.IgnitionConfig{
++				Append: []types2_4.ConfigReference{
++					{
++						Source: "https://example.com",
++						Verification: types2_4.Verification{
++							Hash: &aSha512Hash,
++						},
++					},
++				},
++				Replace: &types2_4.ConfigReference{
++					Source: "https://example.com",
++					Verification: types2_4.Verification{
++						Hash: &aSha512Hash,
++					},
++				},
++			},
++			Timeouts: types2_4.Timeouts{
++				HTTPResponseHeaders: util.IntP(5),
++				HTTPTotal:           util.IntP(10),
++			},
++			Security: types2_4.Security{
++				TLS: types2_4.TLS{
++					CertificateAuthorities: []types2_4.CaReference{
++						{
++							Source: "https://example.com",
++							Verification: types2_4.Verification{
++								Hash: &aSha512Hash,
++							},
++						},
++					},
++				},
++			},
++			Proxy: types2_4.Proxy{
++				HTTPProxy:  "https://proxy.example.net/",
++				HTTPSProxy: "https://secure.proxy.example.net/",
++				NoProxy: []types2_4.NoProxyItem{
++					"www.example.net",
++					"www.example2.net",
++				},
++			},
++		},
++		Storage: types2_4.Storage{
++			Filesystems: []types2_4.Filesystem{
++				{
++					Name: "/var",
++					Mount: &types2_4.Mount{
++						Device: "/dev/disk/by-partlabel/var",
++						Format: "xfs",
++						Label:  util.StrP("var"),
++						UUID:   &aUUID,
++						Create: &types2_4.Create{
++							Force: false,
++							Options: []types2_4.CreateOption{
++								"--label=var",
++								types2_4.CreateOption(fmt.Sprintf("--uuid=%s", aUUID)),
++							},
++						},
++					},
++				},
++			},
++		},
++	}
++
++	exhaustiveConfig2_4 = types2_4.Config{
++		Ignition: types2_4.Ignition{
++			Version: "2.4.0",
++			Config: types2_4.IgnitionConfig{
++				Append: []types2_4.ConfigReference{
++					{
++						Source: "https://example.com",
++						Verification: types2_4.Verification{
++							Hash: &aSha512Hash,
++						},
++					},
++				},
++				Replace: &types2_4.ConfigReference{
++					Source: "https://example.com",
++					Verification: types2_4.Verification{
++						Hash: &aSha512Hash,
++					},
++				},
++			},
++			Timeouts: types2_4.Timeouts{
++				HTTPResponseHeaders: util.IntP(5),
++				HTTPTotal:           util.IntP(10),
++			},
++			Security: types2_4.Security{
++				TLS: types2_4.TLS{
++					CertificateAuthorities: []types2_4.CaReference{
++						{
++							Source: "https://example.com",
++							Verification: types2_4.Verification{
++								Hash: &aSha512Hash,
++							},
++						},
++					},
++				},
++			},
++			Proxy: types2_4.Proxy{
++				HTTPProxy:  "https://proxy.example.net/",
++				HTTPSProxy: "https://secure.proxy.example.net/",
++				NoProxy: []types2_4.NoProxyItem{
++					"www.example.net",
++					"www.example2.net",
++				},
++			},
++		},
++		Storage: types2_4.Storage{
++			Disks: []types2_4.Disk{
++				{
++					Device:    "/dev/sda",
++					WipeTable: true,
++					Partitions: []types2_4.Partition{
++						{
++							Label:              util.StrP("var"),
++							Number:             1,
++							SizeMiB:            util.IntP(5000),
++							StartMiB:           util.IntP(2048),
++							TypeGUID:           aUUID,
++							GUID:               aUUID,
++							WipePartitionEntry: true,
++							ShouldExist:        util.BoolP(true),
++						},
++					},
++				},
++			},
++			Raid: []types2_4.Raid{
++				{
++					Name:    "array",
++					Level:   "raid10",
++					Devices: []types2_4.Device{"/dev/sdb", "/dev/sdc"},
++					Spares:  1,
++					Options: []types2_4.RaidOption{"foobar"},
++				},
++			},
++			Filesystems: []types2_4.Filesystem{
++				{
++					Name: "/var",
++					Mount: &types2_4.Mount{
++						Device:         "/dev/disk/by-partlabel/var",
++						Format:         "xfs",
++						WipeFilesystem: true,
++						Label:          util.StrP("var"),
++						UUID:           &aUUID,
++						Options:        []types2_4.MountOption{"rw"},
++					},
++				},
++			},
++			Files: []types2_4.File{
++				{
++					Node: types2_4.Node{
++						Filesystem: "/var",
++						Path:       "/varfile",
++						Overwrite:  util.BoolPStrict(false),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					FileEmbedded1: types2_4.FileEmbedded1{
++						Append: true,
++						Mode:   util.IntP(420),
++						Contents: types2_4.FileContents{
++							Compression: "gzip",
++							Source:      "https://example.com",
++							Verification: types2_4.Verification{
++								Hash: &aSha512Hash,
++							},
++							HTTPHeaders: types2_4.HTTPHeaders{
++								types2_4.HTTPHeader{
++									Name:  "Authorization",
++									Value: "Basic YWxhZGRpbjpvcGVuc2VzYW1l",
++								},
++								types2_4.HTTPHeader{
++									Name:  "User-Agent",
++									Value: "Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)",
++								},
++							},
++						},
++					},
++				},
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/empty",
++						Overwrite:  util.BoolPStrict(false),
++					},
++					FileEmbedded1: types2_4.FileEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Directories: []types2_4.Directory{
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/rootdir",
++						Overwrite:  util.BoolP(true),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					DirectoryEmbedded1: types2_4.DirectoryEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Links: []types2_4.Link{
++				{
++					Node: types2_4.Node{
++						Filesystem: "root",
++						Path:       "/rootlink",
++						Overwrite:  util.BoolP(true),
++						User: &types2_4.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: &types2_4.NodeGroup{
++							Name: "groupname",
++						},
++					},
++					LinkEmbedded1: types2_4.LinkEmbedded1{
++						Hard:   false,
++						Target: "/foobar",
++					},
++				},
++			},
++		},
++	}
++
++	config3_1WithNoFSOptions = types3_1.Config{
++		Ignition: types3_1.Ignition{
++			Version: "3.1.0",
++			Config: types3_1.IgnitionConfig{
++				Merge: []types3_1.Resource{
++					{
++						Source: util.StrP("https://example.com"),
++						Verification: types3_1.Verification{
++							Hash: &aSha512Hash,
++						},
++					},
++				},
++				Replace: types3_1.Resource{
++					Source: util.StrP("https://example.com"),
++					Verification: types3_1.Verification{
++						Hash: &aSha512Hash,
++					},
++				},
++			},
++			Timeouts: types3_1.Timeouts{
++				HTTPResponseHeaders: util.IntP(5),
++				HTTPTotal:           util.IntP(10),
++			},
++			Security: types3_1.Security{
++				TLS: types3_1.TLS{
++					CertificateAuthorities: []types3_1.Resource{
++						{
++							Source: util.StrP("https://example.com"),
++							Verification: types3_1.Verification{
++								Hash: &aSha512Hash,
++							},
++						},
++					},
++				},
++			},
++			Proxy: types3_1.Proxy{
++				HTTPProxy:  util.StrP("https://proxy.example.net/"),
++				HTTPSProxy: util.StrP("https://secure.proxy.example.net/"),
++				NoProxy: []types3_1.NoProxyItem{
++					"www.example.net",
++					"www.example2.net",
++				},
++			},
++		},
++		Storage: types3_1.Storage{
++			Disks: []types3_1.Disk{
++				{
++					Device:    "/dev/sda",
++					WipeTable: util.BoolP(true),
++					Partitions: []types3_1.Partition{
++						{
++							Label:              util.StrP("var"),
++							Number:             1,
++							SizeMiB:            util.IntP(5000),
++							StartMiB:           util.IntP(2048),
++							TypeGUID:           &aUUID,
++							GUID:               &aUUID,
++							WipePartitionEntry: util.BoolP(true),
++							ShouldExist:        util.BoolP(true),
++						},
++					},
++				},
++			},
++			Raid: []types3_1.Raid{
++				{
++					Name:    "array",
++					Level:   "raid10",
++					Devices: []types3_1.Device{"/dev/sdb", "/dev/sdc"},
++					Spares:  util.IntP(1),
++					Options: []types3_1.RaidOption{"foobar"},
++				},
++			},
++			Filesystems: []types3_1.Filesystem{
++				{
++					Path:           util.StrP("/var"),
++					Device:         "/dev/disk/by-partlabel/var",
++					Format:         util.StrP("xfs"),
++					WipeFilesystem: util.BoolP(true),
++					Label:          util.StrP("var"),
++					UUID:           &aUUID,
++					Options: []types3_1.FilesystemOption{
++						types3_1.FilesystemOption("--label=var"),
++						types3_1.FilesystemOption("--uuid=9d6e42cd-dcef-4177-b4c6-2a0c979e3d82"),
++					},
++				},
++			},
++			Files: []types3_1.File{
++				{
++					Node: types3_1.Node{
++						Path:      "/var/varfile",
++						Overwrite: util.BoolPStrict(false),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Append: []types3_1.Resource{
++							{
++								Compression: util.StrP("gzip"),
++								Source:      util.StrP("https://example.com"),
++								Verification: types3_1.Verification{
++									Hash: &aSha512Hash,
++								},
++								HTTPHeaders: types3_1.HTTPHeaders{
++									types3_1.HTTPHeader{
++										Name:  "Authorization",
++										Value: util.StrP("Basic YWxhZGRpbjpvcGVuc2VzYW1l"),
++									},
++									types3_1.HTTPHeader{
++										Name:  "User-Agent",
++										Value: util.StrP("Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)"),
++									},
++								},
++							},
++						},
++					},
++				},
++				{
++					Node: types3_1.Node{
++						Path:      "/empty",
++						Overwrite: util.BoolPStrict(false),
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Contents: types3_1.Resource{
++							Source: util.StrPStrict(""),
++						},
++					},
++				},
++				{
++					Node: types3_1.Node{
++						Path:      "/etc/systemd/network/00-eth.network",
++						Overwrite: util.BoolPStrict(true),
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Contents: types3_1.Resource{
++							Source: util.StrPStrict("data:,%5BMatch%5D%0AType=%21vlan%20bond%20bridge%0AName=eth%2A%0A%0A%5BNetwork%5D%0ABond=bond0"),
++						},
++					},
++				},
++				{
++					Node: types3_1.Node{
++						Path:      "/etc/systemd/network/00-eth.network.d/dropin-1.conf",
++						Overwrite: util.BoolPStrict(true),
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Contents: types3_1.Resource{
++							Source: util.StrPStrict("data:,%5BMatch%5D%0AName=bond0%0A%0A%5BNetwork%5D%0ADHCP=true"),
++						},
++					},
++				},
++				{
++					Node: types3_1.Node{
++						Path:      "/etc/systemd/network/99-eth.network",
++						Overwrite: util.BoolPStrict(true),
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Contents: types3_1.Resource{
++							Source: util.StrPStrict("data:,%5BMatch%5D%0AName=eth12%0A%0A%5BNetwork%5D%0ABond=bond0"),
++						},
++					},
++				},
++			},
++			Directories: []types3_1.Directory{
++				{
++					Node: types3_1.Node{
++						Path:      "/rootdir",
++						Overwrite: util.BoolP(true),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					DirectoryEmbedded1: types3_1.DirectoryEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Links: []types3_1.Link{
++				{
++					Node: types3_1.Node{
++						Path:      "/rootlink",
++						Overwrite: util.BoolP(true),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					LinkEmbedded1: types3_1.LinkEmbedded1{
++						Hard:   util.BoolP(false),
++						Target: "/foobar",
++					},
++				},
++			},
++		},
++		Passwd: types3_1.Passwd{
++			Users: []types3_1.PasswdUser{
++				{
++					Name: "user",
++					UID:  &userID,
++					Groups: []types3_1.Group{
++						"docker",
++					},
++				},
++			},
++		},
++	}
++
++	config3_1WithNoFSOptionsAndNoLabel = types3_1.Config{
++		Ignition: types3_1.Ignition{
++			Version: "3.1.0",
++			Config: types3_1.IgnitionConfig{
++				Merge: []types3_1.Resource{
++					{
++						Source: util.StrP("https://example.com"),
++						Verification: types3_1.Verification{
++							Hash: &aSha512Hash,
++						},
++					},
++				},
++				Replace: types3_1.Resource{
++					Source: util.StrP("https://example.com"),
++					Verification: types3_1.Verification{
++						Hash: &aSha512Hash,
++					},
++				},
++			},
++			Timeouts: types3_1.Timeouts{
++				HTTPResponseHeaders: util.IntP(5),
++				HTTPTotal:           util.IntP(10),
++			},
++			Security: types3_1.Security{
++				TLS: types3_1.TLS{
++					CertificateAuthorities: []types3_1.Resource{
++						{
++							Source: util.StrP("https://example.com"),
++							Verification: types3_1.Verification{
++								Hash: &aSha512Hash,
++							},
++						},
++					},
++				},
++			},
++			Proxy: types3_1.Proxy{
++				HTTPProxy:  util.StrP("https://proxy.example.net/"),
++				HTTPSProxy: util.StrP("https://secure.proxy.example.net/"),
++				NoProxy: []types3_1.NoProxyItem{
++					"www.example.net",
++					"www.example2.net",
++				},
++			},
++		},
++		Storage: types3_1.Storage{
++			Disks: []types3_1.Disk{
++				{
++					Device:    "/dev/sda",
++					WipeTable: util.BoolP(true),
++					Partitions: []types3_1.Partition{
++						{
++							Label:              util.StrP("var"),
++							Number:             1,
++							SizeMiB:            util.IntP(5000),
++							StartMiB:           util.IntP(2048),
++							TypeGUID:           &aUUID,
++							GUID:               &aUUID,
++							WipePartitionEntry: util.BoolP(true),
++							ShouldExist:        util.BoolP(true),
++						},
++					},
++				},
++			},
++			Raid: []types3_1.Raid{
++				{
++					Name:    "array",
++					Level:   "raid10",
++					Devices: []types3_1.Device{"/dev/sdb", "/dev/sdc"},
++					Spares:  util.IntP(1),
++					Options: []types3_1.RaidOption{"foobar"},
++				},
++			},
++			Filesystems: []types3_1.Filesystem{
++				{
++					Path:           util.StrP("/var"),
++					Device:         "/dev/disk/by-partlabel/var",
++					Format:         util.StrP("xfs"),
++					WipeFilesystem: util.BoolP(true),
++					UUID:           &aUUID,
++					Options: []types3_1.FilesystemOption{
++						types3_1.FilesystemOption("--labl=ROOT"),
++						types3_1.FilesystemOption("--uuid=9d6e42cd-dcef-4177-b4c6-2a0c979e3d82"),
++					},
++				},
++			},
++			Files: []types3_1.File{
++				{
++					Node: types3_1.Node{
++						Path:      "/var/varfile",
++						Overwrite: util.BoolPStrict(false),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Append: []types3_1.Resource{
++							{
++								Compression: util.StrP("gzip"),
++								Source:      util.StrP("https://example.com"),
++								Verification: types3_1.Verification{
++									Hash: &aSha512Hash,
++								},
++								HTTPHeaders: types3_1.HTTPHeaders{
++									types3_1.HTTPHeader{
++										Name:  "Authorization",
++										Value: util.StrP("Basic YWxhZGRpbjpvcGVuc2VzYW1l"),
++									},
++									types3_1.HTTPHeader{
++										Name:  "User-Agent",
++										Value: util.StrP("Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)"),
++									},
++								},
++							},
++						},
++					},
++				},
++				{
++					Node: types3_1.Node{
++						Path:      "/empty",
++						Overwrite: util.BoolPStrict(false),
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Contents: types3_1.Resource{
++							Source: util.StrPStrict(""),
++						},
++					},
++				},
++			},
++			Directories: []types3_1.Directory{
++				{
++					Node: types3_1.Node{
++						Path:      "/rootdir",
++						Overwrite: util.BoolP(true),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					DirectoryEmbedded1: types3_1.DirectoryEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Links: []types3_1.Link{
++				{
++					Node: types3_1.Node{
++						Path:      "/rootlink",
++						Overwrite: util.BoolP(true),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					LinkEmbedded1: types3_1.LinkEmbedded1{
++						Hard:   util.BoolP(false),
++						Target: "/foobar",
++					},
++				},
++			},
++		},
++	}
++
++	nonexhaustiveConfig3_1 = types3_1.Config{
++		Ignition: types3_1.Ignition{
++			Version: "3.1.0",
++			Config: types3_1.IgnitionConfig{
++				Merge: []types3_1.Resource{
++					{
++						Source: util.StrP("https://example.com"),
++						Verification: types3_1.Verification{
++							Hash: &aSha512Hash,
++						},
++					},
++				},
++				Replace: types3_1.Resource{
++					Source: util.StrP("https://example.com"),
++					Verification: types3_1.Verification{
++						Hash: &aSha512Hash,
++					},
++				},
++			},
++			Timeouts: types3_1.Timeouts{
++				HTTPResponseHeaders: util.IntP(5),
++				HTTPTotal:           util.IntP(10),
++			},
++			Security: types3_1.Security{
++				TLS: types3_1.TLS{
++					CertificateAuthorities: []types3_1.Resource{
++						{
++							Source: util.StrP("https://example.com"),
++							Verification: types3_1.Verification{
++								Hash: &aSha512Hash,
++							},
++						},
++					},
++				},
++			},
++			Proxy: types3_1.Proxy{
++				HTTPProxy:  util.StrP("https://proxy.example.net/"),
++				HTTPSProxy: util.StrP("https://secure.proxy.example.net/"),
++				NoProxy: []types3_1.NoProxyItem{
++					"www.example.net",
++					"www.example2.net",
++				},
++			},
++		},
++		Storage: types3_1.Storage{
++			Disks: []types3_1.Disk{
++				{
++					Device:    "/dev/sda",
++					WipeTable: util.BoolP(true),
++					Partitions: []types3_1.Partition{
++						{
++							Label:              util.StrP("var"),
++							Number:             1,
++							SizeMiB:            util.IntP(5000),
++							StartMiB:           util.IntP(2048),
++							TypeGUID:           &aUUID,
++							GUID:               &aUUID,
++							WipePartitionEntry: util.BoolP(true),
++							ShouldExist:        util.BoolP(true),
++						},
++					},
++				},
++			},
++			Raid: []types3_1.Raid{
++				{
++					Name:    "array",
++					Level:   "raid10",
++					Devices: []types3_1.Device{"/dev/sdb", "/dev/sdc"},
++					Spares:  util.IntP(1),
++					Options: []types3_1.RaidOption{"foobar"},
++				},
++			},
++			Filesystems: []types3_1.Filesystem{
++				{
++					Path:           util.StrP("/var"),
++					Device:         "/dev/disk/by-partlabel/var",
++					Format:         util.StrP("xfs"),
++					WipeFilesystem: util.BoolP(true),
++					Label:          util.StrP("var"),
++					UUID:           &aUUID,
++					Options:        []types3_1.FilesystemOption{"rw"},
++				},
++			},
++			Files: []types3_1.File{
++				{
++					Node: types3_1.Node{
++						Path:      "/var/varfile",
++						Overwrite: util.BoolPStrict(false),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Append: []types3_1.Resource{
++							{
++								Compression: util.StrP("gzip"),
++								Source:      util.StrP("https://example.com"),
++								Verification: types3_1.Verification{
++									Hash: &aSha512Hash,
++								},
++								HTTPHeaders: types3_1.HTTPHeaders{
++									types3_1.HTTPHeader{
++										Name:  "Authorization",
++										Value: util.StrP("Basic YWxhZGRpbjpvcGVuc2VzYW1l"),
++									},
++									types3_1.HTTPHeader{
++										Name:  "User-Agent",
++										Value: util.StrP("Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)"),
++									},
++								},
++							},
++						},
++					},
++				},
++				{
++					Node: types3_1.Node{
++						Path:      "/empty",
++						Overwrite: util.BoolPStrict(false),
++					},
++					FileEmbedded1: types3_1.FileEmbedded1{
++						Mode: util.IntP(420),
++						Contents: types3_1.Resource{
++							Source: util.StrPStrict(""),
++						},
++					},
++				},
++			},
++			Directories: []types3_1.Directory{
++				{
++					Node: types3_1.Node{
++						Path:      "/rootdir",
++						Overwrite: util.BoolP(true),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					DirectoryEmbedded1: types3_1.DirectoryEmbedded1{
++						Mode: util.IntP(420),
++					},
++				},
++			},
++			Links: []types3_1.Link{
++				{
++					Node: types3_1.Node{
++						Path:      "/rootlink",
++						Overwrite: util.BoolP(true),
++						User: types3_1.NodeUser{
++							ID: util.IntP(1000),
++						},
++						Group: types3_1.NodeGroup{
++							Name: util.StrP("groupname"),
++						},
++					},
++					LinkEmbedded1: types3_1.LinkEmbedded1{
++						Hard:   util.BoolP(false),
++						Target: "/foobar",
++					},
++				},
++			},
++		},
++	}
++)
++
++type input2_4 struct {
++	cfg   types2_4.Config
++	fsMap map[string]string
++}
++
++func TestCheck2_4WithGeneratedFSMap(t *testing.T) {
++	// in this config, Filesystem Name is not passed
++	// to verify the FS generation mechanism.
++	cfg := types2_4.Config{
++		Ignition: types2_4.Ignition{
++			Version: "2.4.0",
++		},
++		Storage: types2_4.Storage{
++			Filesystems: []types2_4.Filesystem{
++				{
++					Mount: &types2_4.Mount{
++						Device: "/dev/disk/by-partlabel/var",
++						Format: "xfs",
++						Create: &types2_4.Create{
++							Force: true,
++						},
++					},
++				},
++			},
++		},
++	}
++	fsMap := make(map[string]string)
++
++	if err := v24tov31.Check2_4(cfg, fsMap); err != nil {
++		t.Errorf("error should be nil got: %v", err)
++	}
++
++	if len(fsMap) != 2 {
++		t.Errorf("fsMap should have 2 keys: 'root' and a generated one. Got: %d", len(fsMap))
++	}
++}
++
++func TestCheck2_4(t *testing.T) {
++	goodConfigs := []input2_4{
++		{
++			exhaustiveConfig2_4,
++			exhaustiveMap,
++		},
++	}
++	badConfigs := []input2_4{
++		{}, // empty config has no version, fails validation
++		{
++			// use `mount.create` with `mount.create.force` set to false.
++			badDeprecatedConfig2_4,
++			exhaustiveMap,
++		},
++	}
++	for i, e := range goodConfigs {
++		if err := v24tov31.Check2_4(e.cfg, e.fsMap); err != nil {
++			t.Errorf("Good config test %d: got %v, expected nil", i, err)
++		}
++	}
++	for i, e := range badConfigs {
++		if err := v24tov31.Check2_4(e.cfg, e.fsMap); err == nil {
++			t.Errorf("Bad config test %d: got ok, expected: %v", i, err)
++		}
++	}
++}
++
++func TestTranslate2_4to3_1(t *testing.T) {
++	res, err := v24tov31.Translate(exhaustiveConfig2_4, exhaustiveMap)
++	if err != nil {
++		t.Fatalf("Failed translation: %v", err)
++	}
++	assert.Equal(t, nonexhaustiveConfig3_1, res)
++}
++
++func TestTranslateDeprecated2_4to3_1(t *testing.T) {
++	res, err := v24tov31.Translate(deprecatedConfig2_4, exhaustiveMap)
++	if err != nil {
++		t.Fatalf("Failed translation: %v", err)
++	}
++	assert.Equal(t, config3_1WithNoFSOptions, res)
++}
++
++func TestTranslateWrongDeprecated2_4to3_1(t *testing.T) {
++	res, err := v24tov31.Translate(wrongDeprecatedConfig2_4, exhaustiveMap)
++	if err != nil {
++		t.Fatalf("Failed translation: %v", err)
++	}
++	assert.Equal(t, config3_1WithNoFSOptionsAndNoLabel, res)
++}
++
++func TestRemoveDuplicateFilesUnitsUsers2_4(t *testing.T) {
++	mode := 420
++	testDataOld := "data:,old"
++	testDataNew := "data:,new"
++	testIgn2Config := types2_4.Config{}
++
++	// file test, add a duplicate file and see if the newest one is preserved
++	fileOld := types2_4.File{
++		Node: types2_4.Node{
++			Filesystem: "root", Path: "/etc/testfileconfig",
++		},
++		FileEmbedded1: types2_4.FileEmbedded1{
++			Contents: types2_4.FileContents{
++				Source: testDataOld,
++			},
++			Mode: &mode,
++		},
++	}
++	testIgn2Config.Storage.Files = append(testIgn2Config.Storage.Files, fileOld)
++
++	fileNew := types2_4.File{
++		Node: types2_4.Node{
++			Filesystem: "root", Path: "/etc/testfileconfig",
++		},
++		FileEmbedded1: types2_4.FileEmbedded1{
++			Contents: types2_4.FileContents{
++				Source: testDataNew,
++			},
++			Mode: &mode,
++		},
++	}
++	testIgn2Config.Storage.Files = append(testIgn2Config.Storage.Files, fileNew)
++
++	// unit test, add three units and three dropins with the same name as follows:
++	// unitOne:
++	//    contents: old
++	//    dropin:
++	//        name: one
++	//        contents: old
++	// unitTwo:
++	//    dropin:
++	//        name: one
++	//        contents: new
++	// unitThree:
++	//    contents: new
++	//    dropin:
++	//        name: two
++	//        contents: new
++	// Which should result in:
++	// unitFinal:
++	//    contents: new
++	//    dropin:
++	//      - name: one
++	//        contents: new
++	//      - name: two
++	//        contents: new
++	//
++	unitName := "testUnit"
++	dropinNameOne := "one"
++	dropinNameTwo := "two"
++	dropinOne := types2_4.SystemdDropin{
++		Contents: testDataOld,
++		Name:     dropinNameOne,
++	}
++	dropinTwo := types2_4.SystemdDropin{
++		Contents: testDataNew,
++		Name:     dropinNameOne,
++	}
++	dropinThree := types2_4.SystemdDropin{
++		Contents: testDataNew,
++		Name:     dropinNameTwo,
++	}
++
++	unitOne := types2_4.Unit{
++		Contents: testDataOld,
++		Name:     unitName,
++	}
++	unitOne.Dropins = append(unitOne.Dropins, dropinOne)
++	testIgn2Config.Systemd.Units = append(testIgn2Config.Systemd.Units, unitOne)
++
++	unitTwo := types2_4.Unit{
++		Name: unitName,
++	}
++	unitTwo.Dropins = append(unitTwo.Dropins, dropinTwo)
++	testIgn2Config.Systemd.Units = append(testIgn2Config.Systemd.Units, unitTwo)
++
++	unitThree := types2_4.Unit{
++		Contents: testDataNew,
++		Name:     unitName,
++	}
++	unitThree.Dropins = append(unitThree.Dropins, dropinThree)
++	testIgn2Config.Systemd.Units = append(testIgn2Config.Systemd.Units, unitThree)
++
++	// user test, add a duplicate user and see if it is deduplicated but ssh keys from both are preserved
++	userName := "testUser"
++	userOne := types2_4.PasswdUser{
++		Name: userName,
++		SSHAuthorizedKeys: []types2_4.SSHAuthorizedKey{
++			"one",
++			"two",
++		},
++	}
++	userTwo := types2_4.PasswdUser{
++		Name: userName,
++		SSHAuthorizedKeys: []types2_4.SSHAuthorizedKey{
++			"three",
++		},
++	}
++	userThree := types2_4.PasswdUser{
++		Name: "userThree",
++		SSHAuthorizedKeys: []types2_4.SSHAuthorizedKey{
++			"four",
++		},
++	}
++	testIgn2Config.Passwd.Users = append(testIgn2Config.Passwd.Users, userOne, userTwo, userThree)
++
++	convertedIgn2Config, err := v24tov31.RemoveDuplicateFilesUnitsUsers(testIgn2Config)
++	assert.NoError(t, err)
++
++	expectedIgn2Config := types2_4.Config{}
++	expectedIgn2Config.Storage.Files = append(expectedIgn2Config.Storage.Files, fileNew)
++	unitExpected := types2_4.Unit{
++		Contents: testDataNew,
++		Name:     unitName,
++	}
++	unitExpected.Dropins = append(unitExpected.Dropins, dropinThree)
++	unitExpected.Dropins = append(unitExpected.Dropins, dropinTwo)
++	expectedIgn2Config.Systemd.Units = append(expectedIgn2Config.Systemd.Units, unitExpected)
++	expectedMergedUser := types2_4.PasswdUser{
++		Name: userName,
++		SSHAuthorizedKeys: []types2_4.SSHAuthorizedKey{
++			"three",
++			"one",
++			"two",
++		},
++	}
++	expectedIgn2Config.Passwd.Users = append(expectedIgn2Config.Passwd.Users, userThree, expectedMergedUser)
++	assert.Equal(t, expectedIgn2Config, convertedIgn2Config)
++}
++
++func TestDuplicateUnits(t *testing.T) {
++	tests := []struct {
++		ign2 types2_4.Config
++		ign3 types3_1.Config
++		err  error
++	}{
++		{
++			ign2: types2_4.Config{
++				Ignition: types2_4.Ignition{
++					Version:  "2.4.0",
++					Config:   types2_4.IgnitionConfig{},
++					Timeouts: types2_4.Timeouts{},
++					Security: types2_4.Security{},
++					Proxy:    types2_4.Proxy{},
++				},
++				Systemd: types2_4.Systemd{
++					Units: []types2_4.Unit{
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++							Dropins: []types2_4.SystemdDropin{
++								{
++									Name:     "10-flatcar.conf",
++									Contents: "[Service]\nExecStart=",
++								},
++							},
++						},
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++							Dropins: []types2_4.SystemdDropin{
++								{
++									Name:     "20-flatcar.conf",
++									Contents: "[Service]\nExecStart=",
++								},
++							},
++						},
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++						},
++					},
++				},
++			},
++			ign3: types3_1.Config{
++				Ignition: types3_1.Ignition{
++					Version:  "3.1.0",
++					Config:   types3_1.IgnitionConfig{},
++					Timeouts: types3_1.Timeouts{},
++					Security: types3_1.Security{},
++					Proxy:    types3_1.Proxy{},
++				},
++				Systemd: types3_1.Systemd{
++					Units: []types3_1.Unit{
++						{
++							Name:    "kubeadm.service",
++							Enabled: util.BoolP(true),
++							Dropins: []types3_1.Dropin{
++								{
++									Name:     "10-flatcar.conf",
++									Contents: util.StrP("[Service]\nExecStart="),
++								},
++								{
++									Name:     "20-flatcar.conf",
++									Contents: util.StrP("[Service]\nExecStart="),
++								},
++							},
++						},
++					},
++				},
++			},
++			err: nil,
++		},
++		{
++			ign2: types2_4.Config{
++				Ignition: types2_4.Ignition{
++					Version:  "2.4.0",
++					Config:   types2_4.IgnitionConfig{},
++					Timeouts: types2_4.Timeouts{},
++					Security: types2_4.Security{},
++					Proxy:    types2_4.Proxy{},
++				},
++				Systemd: types2_4.Systemd{
++					Units: []types2_4.Unit{
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++							Dropins: []types2_4.SystemdDropin{
++								{
++									Name:     "10-flatcar.conf",
++									Contents: "[Service]\nExecStart=",
++								},
++							},
++						},
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++							Dropins: []types2_4.SystemdDropin{
++								{
++									Name:     "20-flatcar.conf",
++									Contents: "[Service]\nExecStart=",
++								},
++							},
++						},
++					},
++				},
++			},
++			ign3: types3_1.Config{
++				Ignition: types3_1.Ignition{
++					Version:  "3.1.0",
++					Config:   types3_1.IgnitionConfig{},
++					Timeouts: types3_1.Timeouts{},
++					Security: types3_1.Security{},
++					Proxy:    types3_1.Proxy{},
++				},
++				Systemd: types3_1.Systemd{
++					Units: []types3_1.Unit{
++						{
++							Name:    "kubeadm.service",
++							Enabled: util.BoolP(true),
++							Dropins: []types3_1.Dropin{
++								{
++									Name:     "10-flatcar.conf",
++									Contents: util.StrP("[Service]\nExecStart="),
++								},
++								{
++									Name:     "20-flatcar.conf",
++									Contents: util.StrP("[Service]\nExecStart="),
++								},
++							},
++						},
++					},
++				},
++			},
++			err: nil,
++		},
++		{
++			ign2: types2_4.Config{
++				Ignition: types2_4.Ignition{
++					Version:  "2.4.0",
++					Config:   types2_4.IgnitionConfig{},
++					Timeouts: types2_4.Timeouts{},
++					Security: types2_4.Security{},
++					Proxy:    types2_4.Proxy{},
++				},
++				Systemd: types2_4.Systemd{
++					Units: []types2_4.Unit{
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++						},
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++							Dropins: []types2_4.SystemdDropin{
++								{
++									Name:     "10-flatcar.conf",
++									Contents: "[Service]\nExecStart=",
++								},
++								{
++									Name:     "20-flatcar.conf",
++									Contents: "[Service]\nExecStart=",
++								},
++							},
++						},
++					},
++				},
++			},
++			ign3: types3_1.Config{
++				Ignition: types3_1.Ignition{
++					Version:  "3.1.0",
++					Config:   types3_1.IgnitionConfig{},
++					Timeouts: types3_1.Timeouts{},
++					Security: types3_1.Security{},
++					Proxy:    types3_1.Proxy{},
++				},
++				Systemd: types3_1.Systemd{
++					Units: []types3_1.Unit{
++						{
++							Name:    "kubeadm.service",
++							Enabled: util.BoolP(true),
++							Dropins: []types3_1.Dropin{
++								{
++									Name:     "10-flatcar.conf",
++									Contents: util.StrP("[Service]\nExecStart="),
++								},
++								{
++									Name:     "20-flatcar.conf",
++									Contents: util.StrP("[Service]\nExecStart="),
++								},
++							},
++						},
++					},
++				},
++			},
++			err: nil,
++		},
++		{
++			ign2: types2_4.Config{
++				Ignition: types2_4.Ignition{
++					Version:  "2.4.0",
++					Config:   types2_4.IgnitionConfig{},
++					Timeouts: types2_4.Timeouts{},
++					Security: types2_4.Security{},
++					Proxy:    types2_4.Proxy{},
++				},
++				Systemd: types2_4.Systemd{
++					Units: []types2_4.Unit{
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++						},
++						{
++							Name:   "kubeadm.service",
++							Enable: true,
++						},
++					},
++				},
++			},
++			ign3: types3_1.Config{
++				Ignition: types3_1.Ignition{
++					Version:  "3.1.0",
++					Config:   types3_1.IgnitionConfig{},
++					Timeouts: types3_1.Timeouts{},
++					Security: types3_1.Security{},
++					Proxy:    types3_1.Proxy{},
++				},
++				Systemd: types3_1.Systemd{
++					Units: []types3_1.Unit{
++						{
++							Name:    "kubeadm.service",
++							Enabled: util.BoolP(true),
++						},
++					},
++				},
++			},
++			err: nil,
++		},
++	}
++	for _, test := range tests {
++		res, err := v24tov31.Translate(test.ign2, nil)
++
++		assert.Equal(t, test.err, err)
++		assert.Equal(t, test.ign3, res)
++	}
++}
++
++func TestOEMPartition(t *testing.T) {
++	tests := []struct {
++		ign      types2_4.Config
++		fsFormat string
++	}{
++		{
++			ign: types2_4.Config{
++				Ignition: types2_4.Ignition{
++					Version:  "2.4.0",
++					Config:   types2_4.IgnitionConfig{},
++					Timeouts: types2_4.Timeouts{},
++					Security: types2_4.Security{},
++					Proxy:    types2_4.Proxy{},
++				},
++				Storage: types2_4.Storage{
++					Filesystems: []types2_4.Filesystem{
++						{
++							Name: "OEM",
++							Mount: &types2_4.Mount{
++								Device: "/dev/disk/by-label/OEM",
++								Format: "ext4",
++							},
++						},
++					},
++				},
++			},
++			fsFormat: "btrfs",
++		},
++		{
++			ign: types2_4.Config{
++				Ignition: types2_4.Ignition{
++					Version:  "2.4.0",
++					Config:   types2_4.IgnitionConfig{},
++					Timeouts: types2_4.Timeouts{},
++					Security: types2_4.Security{},
++					Proxy:    types2_4.Proxy{},
++				},
++				Storage: types2_4.Storage{
++					Filesystems: []types2_4.Filesystem{
++						{
++							Name: "oem",
++							Mount: &types2_4.Mount{
++								Device: "/dev/disk/by-label/OEM",
++								Format: "ext4",
++							},
++						},
++					},
++				},
++			},
++			fsFormat: "btrfs",
++		},
++		{
++			ign: types2_4.Config{
++				Ignition: types2_4.Ignition{
++					Version:  "2.4.0",
++					Config:   types2_4.IgnitionConfig{},
++					Timeouts: types2_4.Timeouts{},
++					Security: types2_4.Security{},
++					Proxy:    types2_4.Proxy{},
++				},
++				Storage: types2_4.Storage{
++					Filesystems: []types2_4.Filesystem{
++						{
++							Name: "OEM",
++							Mount: &types2_4.Mount{
++								Device:         "/dev/disk/by-label/OEM",
++								Format:         "ext4",
++								WipeFilesystem: true,
++							},
++						},
++					},
++				},
++			},
++			fsFormat: "ext4",
++		},
++		{
++			ign: types2_4.Config{
++				Ignition: types2_4.Ignition{
++					Version:  "2.4.0",
++					Config:   types2_4.IgnitionConfig{},
++					Timeouts: types2_4.Timeouts{},
++					Security: types2_4.Security{},
++					Proxy:    types2_4.Proxy{},
++				},
++				Storage: types2_4.Storage{
++					Filesystems: []types2_4.Filesystem{
++						{
++							Name: "oem",
++							Mount: &types2_4.Mount{
++								Device:         "/dev/disk/by-label/OEM",
++								Format:         "ext4",
++								WipeFilesystem: true,
++							},
++						},
++					},
++				},
++			},
++			fsFormat: "ext4",
++		},
++	}
++
++	for _, test := range tests {
++		res, err := v24tov31.Translate(test.ign, nil)
++
++		assert.Nil(t, err)
++		assert.Equal(t, test.fsFormat, *res.Storage.Filesystems[0].Format)
++	}
++}
+--- ignition-2.18.0.orig/config/v3_0/config.go
++++ ignition-2.18.0/config/v3_0/config.go
+@@ -15,11 +15,11 @@
+ package v3_0
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/merge"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_0/types"
+-	"github.com/coreos/ignition/v2/config/validate"
++	"github.com/flatcar/ignition/v2/config/merge"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_0/types"
++	"github.com/flatcar/ignition/v2/config/validate"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/config_test.go
++++ ignition-2.18.0/config/v3_0/config_test.go
+@@ -17,8 +17,8 @@ package v3_0
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_0/types"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_0/types"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_0/types/config.go
++++ ignition-2.18.0/config/v3_0/types/config.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/path"
+--- ignition-2.18.0.orig/config/v3_0/types/config_test.go
++++ ignition-2.18.0/config/v3_0/types/config_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/disk.go
++++ ignition-2.18.0/config/v3_0/types/disk.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/file.go
++++ ignition-2.18.0/config/v3_0/types/file.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/file_test.go
++++ ignition-2.18.0/config/v3_0/types/file_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFileValidateOverwrite(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_0/types/filesystem.go
++++ ignition-2.18.0/config/v3_0/types/filesystem.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/filesystem_test.go
++++ ignition-2.18.0/config/v3_0/types/filesystem_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFilesystemValidateFormat(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_0/types/ignition.go
++++ ignition-2.18.0/config/v3_0/types/ignition.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"github.com/coreos/go-semver/semver"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/mode.go
++++ ignition-2.18.0/config/v3_0/types/mode.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func validateMode(m *int) error {
+--- ignition-2.18.0.orig/config/v3_0/types/mode_test.go
++++ ignition-2.18.0/config/v3_0/types/mode_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_0/types/node.go
++++ ignition-2.18.0/config/v3_0/types/node.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/node_test.go
++++ ignition-2.18.0/config/v3_0/types/node_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/partition.go
++++ ignition-2.18.0/config/v3_0/types/partition.go
+@@ -19,8 +19,8 @@ import (
+ 	"regexp"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/partition_test.go
++++ ignition-2.18.0/config/v3_0/types/partition_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestValidateLabel(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_0/types/path.go
++++ ignition-2.18.0/config/v3_0/types/path.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validatePath(p string) error {
+--- ignition-2.18.0.orig/config/v3_0/types/path_test.go
++++ ignition-2.18.0/config/v3_0/types/path_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func TestPathValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_0/types/raid.go
++++ ignition-2.18.0/config/v3_0/types/raid.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/raid_test.go
++++ ignition-2.18.0/config/v3_0/types/raid_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/storage.go
++++ ignition-2.18.0/config/v3_0/types/storage.go
+@@ -18,8 +18,8 @@ import (
+ 	"path"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/storage_test.go
++++ ignition-2.18.0/config/v3_0/types/storage_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/systemd.go
++++ ignition-2.18.0/config/v3_0/types/systemd.go
+@@ -17,9 +17,9 @@ package types
+ import (
+ 	"regexp"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/systemd_test.go
++++ ignition-2.18.0/config/v3_0/types/systemd_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/stretchr/testify/assert"
+--- ignition-2.18.0.orig/config/v3_0/types/unit.go
++++ ignition-2.18.0/config/v3_0/types/unit.go
+@@ -17,10 +17,10 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/shared/validations"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/shared/validations"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	cpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/unit_test.go
++++ ignition-2.18.0/config/v3_0/types/unit_test.go
+@@ -19,8 +19,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/url.go
++++ ignition-2.18.0/config/v3_0/types/url.go
+@@ -19,8 +19,8 @@ import (
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validateURL(s string) error {
+@@ -30,7 +30,7 @@ func validateURL(s string) error {
+ 	}
+ 
+ 	switch u.Scheme {
+-	case "http", "https", "tftp":
++	case "http", "https", "tftp", "oem":
+ 		return nil
+ 	case "s3":
+ 		if v, ok := u.Query()["versionId"]; ok {
+--- ignition-2.18.0.orig/config/v3_0/types/url_test.go
++++ ignition-2.18.0/config/v3_0/types/url_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestURLValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_0/types/verification.go
++++ ignition-2.18.0/config/v3_0/types/verification.go
+@@ -19,7 +19,7 @@ import (
+ 	"encoding/hex"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_0/types/verification_test.go
++++ ignition-2.18.0/config/v3_0/types/verification_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/config.go
++++ ignition-2.18.0/config/v3_1/config.go
+@@ -15,13 +15,13 @@
+ package v3_1
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/merge"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
+-	prev "github.com/coreos/ignition/v2/config/v3_0"
+-	"github.com/coreos/ignition/v2/config/v3_1/translate"
+-	"github.com/coreos/ignition/v2/config/v3_1/types"
+-	"github.com/coreos/ignition/v2/config/validate"
++	"github.com/flatcar/ignition/v2/config/merge"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
++	prev "github.com/flatcar/ignition/v2/config/v3_0"
++	"github.com/flatcar/ignition/v2/config/v3_1/translate"
++	"github.com/flatcar/ignition/v2/config/v3_1/types"
++	"github.com/flatcar/ignition/v2/config/validate"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/config_test.go
++++ ignition-2.18.0/config/v3_1/config_test.go
+@@ -17,8 +17,8 @@ package v3_1
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_1/types"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_1/types"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_1/translate/translate.go
++++ ignition-2.18.0/config/v3_1/translate/translate.go
+@@ -15,10 +15,10 @@
+ package translate
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/translate"
+-	"github.com/coreos/ignition/v2/config/util"
+-	old_types "github.com/coreos/ignition/v2/config/v3_0/types"
+-	"github.com/coreos/ignition/v2/config/v3_1/types"
++	"github.com/flatcar/ignition/v2/config/translate"
++	"github.com/flatcar/ignition/v2/config/util"
++	old_types "github.com/flatcar/ignition/v2/config/v3_0/types"
++	"github.com/flatcar/ignition/v2/config/v3_1/types"
+ )
+ 
+ func translateFilesystem(old old_types.Filesystem) (ret types.Filesystem) {
+--- ignition-2.18.0.orig/config/v3_1/translate/translate_test.go
++++ ignition-2.18.0/config/v3_1/translate/translate_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	old "github.com/coreos/ignition/v2/config/v3_0/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	old "github.com/flatcar/ignition/v2/config/v3_0/types"
+ )
+ 
+ // Check that we have valid translators for the complete config struct
+--- ignition-2.18.0.orig/config/v3_1/types/config.go
++++ ignition-2.18.0/config/v3_1/types/config.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/path"
+--- ignition-2.18.0.orig/config/v3_1/types/config_test.go
++++ ignition-2.18.0/config/v3_1/types/config_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/disk.go
++++ ignition-2.18.0/config/v3_1/types/disk.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/file.go
++++ ignition-2.18.0/config/v3_1/types/file.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/file_test.go
++++ ignition-2.18.0/config/v3_1/types/file_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFileValidateOverwrite(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_1/types/filesystem.go
++++ ignition-2.18.0/config/v3_1/types/filesystem.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/filesystem_test.go
++++ ignition-2.18.0/config/v3_1/types/filesystem_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFilesystemValidateFormat(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_1/types/headers.go
++++ ignition-2.18.0/config/v3_1/types/headers.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/http"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/config/v3_1/types/headers_test.go
++++ ignition-2.18.0/config/v3_1/types/headers_test.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func toPointer(val string) *string {
+--- ignition-2.18.0.orig/config/v3_1/types/ignition.go
++++ ignition-2.18.0/config/v3_1/types/ignition.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"github.com/coreos/go-semver/semver"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/mode.go
++++ ignition-2.18.0/config/v3_1/types/mode.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func validateMode(m *int) error {
+--- ignition-2.18.0.orig/config/v3_1/types/mode_test.go
++++ ignition-2.18.0/config/v3_1/types/mode_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_1/types/node.go
++++ ignition-2.18.0/config/v3_1/types/node.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/node_test.go
++++ ignition-2.18.0/config/v3_1/types/node_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/partition.go
++++ ignition-2.18.0/config/v3_1/types/partition.go
+@@ -19,8 +19,8 @@ import (
+ 	"regexp"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/partition_test.go
++++ ignition-2.18.0/config/v3_1/types/partition_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestValidateLabel(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_1/types/path.go
++++ ignition-2.18.0/config/v3_1/types/path.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validatePath(p string) error {
+--- ignition-2.18.0.orig/config/v3_1/types/path_test.go
++++ ignition-2.18.0/config/v3_1/types/path_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func TestPathValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_1/types/proxy.go
++++ ignition-2.18.0/config/v3_1/types/proxy.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/proxy_test.go
++++ ignition-2.18.0/config/v3_1/types/proxy_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/raid.go
++++ ignition-2.18.0/config/v3_1/types/raid.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/raid_test.go
++++ ignition-2.18.0/config/v3_1/types/raid_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/resource.go
++++ ignition-2.18.0/config/v3_1/types/resource.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/storage.go
++++ ignition-2.18.0/config/v3_1/types/storage.go
+@@ -18,8 +18,8 @@ import (
+ 	"path"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/storage_test.go
++++ ignition-2.18.0/config/v3_1/types/storage_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/systemd.go
++++ ignition-2.18.0/config/v3_1/types/systemd.go
+@@ -17,9 +17,9 @@ package types
+ import (
+ 	"regexp"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/systemd_test.go
++++ ignition-2.18.0/config/v3_1/types/systemd_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/stretchr/testify/assert"
+--- ignition-2.18.0.orig/config/v3_1/types/unit.go
++++ ignition-2.18.0/config/v3_1/types/unit.go
+@@ -17,10 +17,10 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/shared/validations"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/shared/validations"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	cpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/unit_test.go
++++ ignition-2.18.0/config/v3_1/types/unit_test.go
+@@ -19,8 +19,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/url.go
++++ ignition-2.18.0/config/v3_1/types/url.go
+@@ -19,8 +19,8 @@ import (
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validateURL(s string) error {
+@@ -30,7 +30,7 @@ func validateURL(s string) error {
+ 	}
+ 
+ 	switch u.Scheme {
+-	case "http", "https", "tftp":
++	case "http", "https", "tftp", "oem":
+ 		return nil
+ 	case "s3":
+ 		if v, ok := u.Query()["versionId"]; ok {
+--- ignition-2.18.0.orig/config/v3_1/types/url_test.go
++++ ignition-2.18.0/config/v3_1/types/url_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestURLValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_1/types/verification.go
++++ ignition-2.18.0/config/v3_1/types/verification.go
+@@ -19,7 +19,7 @@ import (
+ 	"encoding/hex"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_1/types/verification_test.go
++++ ignition-2.18.0/config/v3_1/types/verification_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/config.go
++++ ignition-2.18.0/config/v3_2/config.go
+@@ -15,13 +15,13 @@
+ package v3_2
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/merge"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
+-	prev "github.com/coreos/ignition/v2/config/v3_1"
+-	"github.com/coreos/ignition/v2/config/v3_2/translate"
+-	"github.com/coreos/ignition/v2/config/v3_2/types"
+-	"github.com/coreos/ignition/v2/config/validate"
++	"github.com/flatcar/ignition/v2/config/merge"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
++	prev "github.com/flatcar/ignition/v2/config/v3_1"
++	"github.com/flatcar/ignition/v2/config/v3_2/translate"
++	"github.com/flatcar/ignition/v2/config/v3_2/types"
++	"github.com/flatcar/ignition/v2/config/validate"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/config_test.go
++++ ignition-2.18.0/config/v3_2/config_test.go
+@@ -17,8 +17,8 @@ package v3_2
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_2/types"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_2/types"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_2/translate/translate.go
++++ ignition-2.18.0/config/v3_2/translate/translate.go
+@@ -15,9 +15,9 @@
+ package translate
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/translate"
+-	old_types "github.com/coreos/ignition/v2/config/v3_1/types"
+-	"github.com/coreos/ignition/v2/config/v3_2/types"
++	"github.com/flatcar/ignition/v2/config/translate"
++	old_types "github.com/flatcar/ignition/v2/config/v3_1/types"
++	"github.com/flatcar/ignition/v2/config/v3_2/types"
+ )
+ 
+ func translateIgnition(old old_types.Ignition) (ret types.Ignition) {
+--- ignition-2.18.0.orig/config/v3_2/translate/translate_test.go
++++ ignition-2.18.0/config/v3_2/translate/translate_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	old "github.com/coreos/ignition/v2/config/v3_1/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	old "github.com/flatcar/ignition/v2/config/v3_1/types"
+ )
+ 
+ // Check that we have valid translators for the complete config struct
+--- ignition-2.18.0.orig/config/v3_2/types/config.go
++++ ignition-2.18.0/config/v3_2/types/config.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/path"
+--- ignition-2.18.0.orig/config/v3_2/types/config_test.go
++++ ignition-2.18.0/config/v3_2/types/config_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/custom.go
++++ ignition-2.18.0/config/v3_2/types/custom.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/disk.go
++++ ignition-2.18.0/config/v3_2/types/disk.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/file.go
++++ ignition-2.18.0/config/v3_2/types/file.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/file_test.go
++++ ignition-2.18.0/config/v3_2/types/file_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFileValidateOverwrite(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_2/types/filesystem.go
++++ ignition-2.18.0/config/v3_2/types/filesystem.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/filesystem_test.go
++++ ignition-2.18.0/config/v3_2/types/filesystem_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFilesystemValidateFormat(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_2/types/headers.go
++++ ignition-2.18.0/config/v3_2/types/headers.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/http"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/config/v3_2/types/headers_test.go
++++ ignition-2.18.0/config/v3_2/types/headers_test.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func toPointer(val string) *string {
+--- ignition-2.18.0.orig/config/v3_2/types/ignition.go
++++ ignition-2.18.0/config/v3_2/types/ignition.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"github.com/coreos/go-semver/semver"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/luks.go
++++ ignition-2.18.0/config/v3_2/types/luks.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/mode.go
++++ ignition-2.18.0/config/v3_2/types/mode.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func validateMode(m *int) error {
+--- ignition-2.18.0.orig/config/v3_2/types/mode_test.go
++++ ignition-2.18.0/config/v3_2/types/mode_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_2/types/node.go
++++ ignition-2.18.0/config/v3_2/types/node.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/node_test.go
++++ ignition-2.18.0/config/v3_2/types/node_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/partition.go
++++ ignition-2.18.0/config/v3_2/types/partition.go
+@@ -19,8 +19,8 @@ import (
+ 	"regexp"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/partition_test.go
++++ ignition-2.18.0/config/v3_2/types/partition_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestValidateLabel(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_2/types/path.go
++++ ignition-2.18.0/config/v3_2/types/path.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validatePath(p string) error {
+--- ignition-2.18.0.orig/config/v3_2/types/path_test.go
++++ ignition-2.18.0/config/v3_2/types/path_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func TestPathValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_2/types/proxy.go
++++ ignition-2.18.0/config/v3_2/types/proxy.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/proxy_test.go
++++ ignition-2.18.0/config/v3_2/types/proxy_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/raid.go
++++ ignition-2.18.0/config/v3_2/types/raid.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/raid_test.go
++++ ignition-2.18.0/config/v3_2/types/raid_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/resource.go
++++ ignition-2.18.0/config/v3_2/types/resource.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/storage.go
++++ ignition-2.18.0/config/v3_2/types/storage.go
+@@ -18,8 +18,8 @@ import (
+ 	"path"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/storage_test.go
++++ ignition-2.18.0/config/v3_2/types/storage_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/systemd.go
++++ ignition-2.18.0/config/v3_2/types/systemd.go
+@@ -17,9 +17,9 @@ package types
+ import (
+ 	"regexp"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/systemd_test.go
++++ ignition-2.18.0/config/v3_2/types/systemd_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/stretchr/testify/assert"
+--- ignition-2.18.0.orig/config/v3_2/types/tang.go
++++ ignition-2.18.0/config/v3_2/types/tang.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/unit.go
++++ ignition-2.18.0/config/v3_2/types/unit.go
+@@ -17,10 +17,10 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/shared/validations"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/shared/validations"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	cpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/unit_test.go
++++ ignition-2.18.0/config/v3_2/types/unit_test.go
+@@ -19,8 +19,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/url.go
++++ ignition-2.18.0/config/v3_2/types/url.go
+@@ -19,8 +19,8 @@ import (
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validateURL(s string) error {
+@@ -30,7 +30,7 @@ func validateURL(s string) error {
+ 	}
+ 
+ 	switch u.Scheme {
+-	case "http", "https", "tftp", "gs":
++	case "http", "https", "tftp", "gs", "oem":
+ 		return nil
+ 	case "s3":
+ 		if v, ok := u.Query()["versionId"]; ok {
+--- ignition-2.18.0.orig/config/v3_2/types/url_test.go
++++ ignition-2.18.0/config/v3_2/types/url_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestURLValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_2/types/verification.go
++++ ignition-2.18.0/config/v3_2/types/verification.go
+@@ -19,7 +19,7 @@ import (
+ 	"encoding/hex"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_2/types/verification_test.go
++++ ignition-2.18.0/config/v3_2/types/verification_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/config.go
++++ ignition-2.18.0/config/v3_3/config.go
+@@ -15,13 +15,13 @@
+ package v3_3
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/merge"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
+-	prev "github.com/coreos/ignition/v2/config/v3_2"
+-	"github.com/coreos/ignition/v2/config/v3_3/translate"
+-	"github.com/coreos/ignition/v2/config/v3_3/types"
+-	"github.com/coreos/ignition/v2/config/validate"
++	"github.com/flatcar/ignition/v2/config/merge"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
++	prev "github.com/flatcar/ignition/v2/config/v3_2"
++	"github.com/flatcar/ignition/v2/config/v3_3/translate"
++	"github.com/flatcar/ignition/v2/config/v3_3/types"
++	"github.com/flatcar/ignition/v2/config/validate"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/config_test.go
++++ ignition-2.18.0/config/v3_3/config_test.go
+@@ -17,8 +17,8 @@ package v3_3
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_3/types"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_3/types"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_3/translate/translate.go
++++ ignition-2.18.0/config/v3_3/translate/translate.go
+@@ -15,10 +15,10 @@
+ package translate
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/translate"
+-	"github.com/coreos/ignition/v2/config/util"
+-	old_types "github.com/coreos/ignition/v2/config/v3_2/types"
+-	"github.com/coreos/ignition/v2/config/v3_3/types"
++	"github.com/flatcar/ignition/v2/config/translate"
++	"github.com/flatcar/ignition/v2/config/util"
++	old_types "github.com/flatcar/ignition/v2/config/v3_2/types"
++	"github.com/flatcar/ignition/v2/config/v3_3/types"
+ )
+ 
+ func translateIgnition(old old_types.Ignition) (ret types.Ignition) {
+--- ignition-2.18.0.orig/config/v3_3/translate/translate_test.go
++++ ignition-2.18.0/config/v3_3/translate/translate_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	old "github.com/coreos/ignition/v2/config/v3_2/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	old "github.com/flatcar/ignition/v2/config/v3_2/types"
+ )
+ 
+ // Check that we have valid translators for the complete config struct
+--- ignition-2.18.0.orig/config/v3_3/types/clevis.go
++++ ignition-2.18.0/config/v3_3/types/clevis.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/clevis_test.go
++++ ignition-2.18.0/config/v3_3/types/clevis_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/config.go
++++ ignition-2.18.0/config/v3_3/types/config.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/path"
+--- ignition-2.18.0.orig/config/v3_3/types/config_test.go
++++ ignition-2.18.0/config/v3_3/types/config_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/disk.go
++++ ignition-2.18.0/config/v3_3/types/disk.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/file.go
++++ ignition-2.18.0/config/v3_3/types/file.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/file_test.go
++++ ignition-2.18.0/config/v3_3/types/file_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFileValidateOverwrite(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_3/types/filesystem.go
++++ ignition-2.18.0/config/v3_3/types/filesystem.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/filesystem_test.go
++++ ignition-2.18.0/config/v3_3/types/filesystem_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFilesystemValidateFormat(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_3/types/headers.go
++++ ignition-2.18.0/config/v3_3/types/headers.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/http"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/config/v3_3/types/headers_test.go
++++ ignition-2.18.0/config/v3_3/types/headers_test.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func toPointer(val string) *string {
+--- ignition-2.18.0.orig/config/v3_3/types/ignition.go
++++ ignition-2.18.0/config/v3_3/types/ignition.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"github.com/coreos/go-semver/semver"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/kargs_test.go
++++ ignition-2.18.0/config/v3_3/types/kargs_test.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/validate"
++	"github.com/flatcar/ignition/v2/config/validate"
+ )
+ 
+ func TestKernelArgumentsValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_3/types/luks.go
++++ ignition-2.18.0/config/v3_3/types/luks.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/mode.go
++++ ignition-2.18.0/config/v3_3/types/mode.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func validateMode(m *int) error {
+--- ignition-2.18.0.orig/config/v3_3/types/mode_test.go
++++ ignition-2.18.0/config/v3_3/types/mode_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_3/types/node.go
++++ ignition-2.18.0/config/v3_3/types/node.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/node_test.go
++++ ignition-2.18.0/config/v3_3/types/node_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/partition.go
++++ ignition-2.18.0/config/v3_3/types/partition.go
+@@ -19,8 +19,8 @@ import (
+ 	"regexp"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/partition_test.go
++++ ignition-2.18.0/config/v3_3/types/partition_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestValidateLabel(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_3/types/path.go
++++ ignition-2.18.0/config/v3_3/types/path.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validatePath(p string) error {
+--- ignition-2.18.0.orig/config/v3_3/types/path_test.go
++++ ignition-2.18.0/config/v3_3/types/path_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func TestPathValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_3/types/proxy.go
++++ ignition-2.18.0/config/v3_3/types/proxy.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/proxy_test.go
++++ ignition-2.18.0/config/v3_3/types/proxy_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/raid.go
++++ ignition-2.18.0/config/v3_3/types/raid.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/raid_test.go
++++ ignition-2.18.0/config/v3_3/types/raid_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/resource.go
++++ ignition-2.18.0/config/v3_3/types/resource.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/storage.go
++++ ignition-2.18.0/config/v3_3/types/storage.go
+@@ -18,8 +18,8 @@ import (
+ 	"path"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/storage_test.go
++++ ignition-2.18.0/config/v3_3/types/storage_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/systemd.go
++++ ignition-2.18.0/config/v3_3/types/systemd.go
+@@ -17,9 +17,9 @@ package types
+ import (
+ 	"regexp"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/systemd_test.go
++++ ignition-2.18.0/config/v3_3/types/systemd_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/stretchr/testify/assert"
+--- ignition-2.18.0.orig/config/v3_3/types/tang.go
++++ ignition-2.18.0/config/v3_3/types/tang.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/unit.go
++++ ignition-2.18.0/config/v3_3/types/unit.go
+@@ -17,10 +17,10 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/shared/validations"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/shared/validations"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	cpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/unit_test.go
++++ ignition-2.18.0/config/v3_3/types/unit_test.go
+@@ -19,8 +19,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/url.go
++++ ignition-2.18.0/config/v3_3/types/url.go
+@@ -19,8 +19,8 @@ import (
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validateURL(s string) error {
+@@ -30,7 +30,7 @@ func validateURL(s string) error {
+ 	}
+ 
+ 	switch u.Scheme {
+-	case "http", "https", "tftp", "gs":
++	case "http", "https", "tftp", "gs", "oem":
+ 		return nil
+ 	case "s3":
+ 		if v, ok := u.Query()["versionId"]; ok {
+--- ignition-2.18.0.orig/config/v3_3/types/url_test.go
++++ ignition-2.18.0/config/v3_3/types/url_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestURLValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_3/types/verification.go
++++ ignition-2.18.0/config/v3_3/types/verification.go
+@@ -19,7 +19,7 @@ import (
+ 	"encoding/hex"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_3/types/verification_test.go
++++ ignition-2.18.0/config/v3_3/types/verification_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/config.go
++++ ignition-2.18.0/config/v3_4/config.go
+@@ -15,13 +15,13 @@
+ package v3_4
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/merge"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
+-	prev "github.com/coreos/ignition/v2/config/v3_3"
+-	"github.com/coreos/ignition/v2/config/v3_4/translate"
+-	"github.com/coreos/ignition/v2/config/v3_4/types"
+-	"github.com/coreos/ignition/v2/config/validate"
++	"github.com/flatcar/ignition/v2/config/merge"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
++	prev "github.com/flatcar/ignition/v2/config/v3_3"
++	"github.com/flatcar/ignition/v2/config/v3_4/translate"
++	"github.com/flatcar/ignition/v2/config/v3_4/types"
++	"github.com/flatcar/ignition/v2/config/validate"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/config_test.go
++++ ignition-2.18.0/config/v3_4/config_test.go
+@@ -17,8 +17,8 @@ package v3_4
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_4/types"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_4/types"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+--- ignition-2.18.0.orig/config/v3_4/translate/translate.go
++++ ignition-2.18.0/config/v3_4/translate/translate.go
+@@ -15,10 +15,10 @@
+ package translate
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/translate"
+-	"github.com/coreos/ignition/v2/config/util"
+-	old_types "github.com/coreos/ignition/v2/config/v3_3/types"
+-	"github.com/coreos/ignition/v2/config/v3_4/types"
++	"github.com/flatcar/ignition/v2/config/translate"
++	"github.com/flatcar/ignition/v2/config/util"
++	old_types "github.com/flatcar/ignition/v2/config/v3_3/types"
++	"github.com/flatcar/ignition/v2/config/v3_4/types"
+ )
+ 
+ func translateIgnition(old old_types.Ignition) (ret types.Ignition) {
+--- ignition-2.18.0.orig/config/v3_4/translate/translate_test.go
++++ ignition-2.18.0/config/v3_4/translate/translate_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	old "github.com/coreos/ignition/v2/config/v3_3/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	old "github.com/flatcar/ignition/v2/config/v3_3/types"
+ )
+ 
+ // Check that we have valid translators for the complete config struct
+--- ignition-2.18.0.orig/config/v3_4/types/clevis.go
++++ ignition-2.18.0/config/v3_4/types/clevis.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/clevis_test.go
++++ ignition-2.18.0/config/v3_4/types/clevis_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/config.go
++++ ignition-2.18.0/config/v3_4/types/config.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/path"
+--- ignition-2.18.0.orig/config/v3_4/types/config_test.go
++++ ignition-2.18.0/config/v3_4/types/config_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/disk.go
++++ ignition-2.18.0/config/v3_4/types/disk.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/file.go
++++ ignition-2.18.0/config/v3_4/types/file.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/file_test.go
++++ ignition-2.18.0/config/v3_4/types/file_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFileValidateOverwrite(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_4/types/filesystem.go
++++ ignition-2.18.0/config/v3_4/types/filesystem.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/filesystem_test.go
++++ ignition-2.18.0/config/v3_4/types/filesystem_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFilesystemValidateFormat(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_4/types/headers.go
++++ ignition-2.18.0/config/v3_4/types/headers.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/http"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/config/v3_4/types/headers_test.go
++++ ignition-2.18.0/config/v3_4/types/headers_test.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func toPointer(val string) *string {
+--- ignition-2.18.0.orig/config/v3_4/types/ignition.go
++++ ignition-2.18.0/config/v3_4/types/ignition.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"github.com/coreos/go-semver/semver"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/kargs_test.go
++++ ignition-2.18.0/config/v3_4/types/kargs_test.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/validate"
++	"github.com/flatcar/ignition/v2/config/validate"
+ )
+ 
+ func TestKernelArgumentsValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_4/types/luks.go
++++ ignition-2.18.0/config/v3_4/types/luks.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/mode.go
++++ ignition-2.18.0/config/v3_4/types/mode.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func validateMode(m *int) error {
+--- ignition-2.18.0.orig/config/v3_4/types/mode_test.go
++++ ignition-2.18.0/config/v3_4/types/mode_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestModeValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_4/types/node.go
++++ ignition-2.18.0/config/v3_4/types/node.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/node_test.go
++++ ignition-2.18.0/config/v3_4/types/node_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/partition.go
++++ ignition-2.18.0/config/v3_4/types/partition.go
+@@ -19,8 +19,8 @@ import (
+ 	"regexp"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/partition_test.go
++++ ignition-2.18.0/config/v3_4/types/partition_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestValidateLabel(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_4/types/path.go
++++ ignition-2.18.0/config/v3_4/types/path.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validatePath(p string) error {
+--- ignition-2.18.0.orig/config/v3_4/types/path_test.go
++++ ignition-2.18.0/config/v3_4/types/path_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func TestPathValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_4/types/proxy.go
++++ ignition-2.18.0/config/v3_4/types/proxy.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/proxy_test.go
++++ ignition-2.18.0/config/v3_4/types/proxy_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/raid.go
++++ ignition-2.18.0/config/v3_4/types/raid.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/raid_test.go
++++ ignition-2.18.0/config/v3_4/types/raid_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/resource.go
++++ ignition-2.18.0/config/v3_4/types/resource.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/storage.go
++++ ignition-2.18.0/config/v3_4/types/storage.go
+@@ -18,8 +18,8 @@ import (
+ 	"path"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/storage_test.go
++++ ignition-2.18.0/config/v3_4/types/storage_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/systemd.go
++++ ignition-2.18.0/config/v3_4/types/systemd.go
+@@ -17,9 +17,9 @@ package types
+ import (
+ 	"regexp"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/systemd_test.go
++++ ignition-2.18.0/config/v3_4/types/systemd_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/stretchr/testify/assert"
+--- ignition-2.18.0.orig/config/v3_4/types/tang.go
++++ ignition-2.18.0/config/v3_4/types/tang.go
+@@ -18,8 +18,8 @@ import (
+ 	"encoding/json"
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/tang_test.go
++++ ignition-2.18.0/config/v3_4/types/tang_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/config/v3_4/types/unit.go
++++ ignition-2.18.0/config/v3_4/types/unit.go
+@@ -17,10 +17,10 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/shared/validations"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/shared/validations"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	cpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/unit_test.go
++++ ignition-2.18.0/config/v3_4/types/unit_test.go
+@@ -19,8 +19,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/url.go
++++ ignition-2.18.0/config/v3_4/types/url.go
+@@ -21,8 +21,8 @@ import (
+ 	"github.com/aws/aws-sdk-go/aws/arn"
+ 	"github.com/vincent-petithory/dataurl"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validateURL(s string) error {
+@@ -32,7 +32,7 @@ func validateURL(s string) error {
+ 	}
+ 
+ 	switch u.Scheme {
+-	case "http", "https", "tftp", "gs":
++	case "http", "https", "tftp", "gs", "oem":
+ 		return nil
+ 	case "s3":
+ 		if v, ok := u.Query()["versionId"]; ok {
+--- ignition-2.18.0.orig/config/v3_4/types/url_test.go
++++ ignition-2.18.0/config/v3_4/types/url_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestURLValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_4/types/verification.go
++++ ignition-2.18.0/config/v3_4/types/verification.go
+@@ -19,7 +19,7 @@ import (
+ 	"encoding/hex"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_4/types/verification_test.go
++++ ignition-2.18.0/config/v3_4/types/verification_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/config.go
++++ ignition-2.18.0/config/v3_5_experimental/config.go
+@@ -15,13 +15,18 @@
+ package v3_5_experimental
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/merge"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
+-	prev "github.com/coreos/ignition/v2/config/v3_4"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/translate"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/config/validate"
++	"encoding/json"
++	"fmt"
++
++	"github.com/flatcar/ignition/config/v2_4"
++	"github.com/flatcar/ignition/v2/config/merge"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v24tov31"
++	prev "github.com/flatcar/ignition/v2/config/v3_4"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/translate"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/validate"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/report"
+@@ -67,6 +72,38 @@ func ParseCompatibleVersion(raw []byte)
+ 		return types.Config{}, rpt, err
+ 	}
+ 
++	// if the version is 2.x or 1.x, we
++	// convert it to 3.1
++	if version.Major != 3 {
++		// Parse should fallback on every 2.x supported version
++		cfg, _, err := v2_4.Parse(raw)
++		if err != nil || rpt.IsFatal() {
++			return types.Config{}, report.Report{}, fmt.Errorf("unable to parse 2.x ignition: %w", err)
++		}
++
++		/*
++			map[string]string{} is required by the ign-converter
++			Ignition Spec 3 will mount filesystems at the mountpoint specified by path when running.
++			Filesystems no longer have the name field and files, links, and directories no longer specify the filesystem by name.
++			This means to translate filesystems (with the exception of root),
++			you must also provide a mapping of filesystem name to absolute path, e.g.
++			```
++			map[string]string{"var": "/var"}
++			```
++		*/
++		newCfg, err := v24tov31.Translate(cfg, map[string]string{})
++		if err != nil {
++			return types.Config{}, report.Report{}, fmt.Errorf("unable to translate 2.x ignition to 3.1: %w", err)
++
++		}
++
++		// update raw in place to continue with the 3.x logic
++		raw, err = json.Marshal(newCfg)
++		if err != nil {
++			return types.Config{}, report.Report{}, fmt.Errorf("unable to render JSON: %w", err)
++		}
++	}
++
+ 	if version == types.MaxVersion {
+ 		return Parse(raw)
+ 	}
+--- ignition-2.18.0.orig/config/v3_5_experimental/config_test.go
++++ ignition-2.18.0/config/v3_5_experimental/config_test.go
+@@ -17,8 +17,8 @@ package v3_5_experimental
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ 	"github.com/stretchr/testify/assert"
+ )
+ 
+@@ -158,6 +158,26 @@ func TestParse(t *testing.T) {
+ 		out out
+ 	}{
+ 		{
++			in:  in{config: []byte(`{"ignition": {"version": "2.0.0"}}`)},
++			out: out{config: types.Config{Ignition: types.Ignition{Version: types.MaxVersion.String()}}},
++		},
++		{
++			in:  in{config: []byte(`{"ignition": {"version": "2.1.0"}}`)},
++			out: out{config: types.Config{Ignition: types.Ignition{Version: types.MaxVersion.String()}}},
++		},
++		{
++			in:  in{config: []byte(`{"ignition": {"version": "2.2.0"}}`)},
++			out: out{config: types.Config{Ignition: types.Ignition{Version: types.MaxVersion.String()}}},
++		},
++		{
++			in:  in{config: []byte(`{"ignition": {"version": "2.3.0"}}`)},
++			out: out{config: types.Config{Ignition: types.Ignition{Version: types.MaxVersion.String()}}},
++		},
++		{
++			in:  in{config: []byte(`{"ignition": {"version": "2.4.0"}}`)},
++			out: out{config: types.Config{Ignition: types.Ignition{Version: types.MaxVersion.String()}}},
++		},
++		{
+ 			in:  in{config: []byte(`{"ignition": {"version": "3.0.0"}}`)},
+ 			out: out{config: types.Config{Ignition: types.Ignition{Version: types.MaxVersion.String()}}},
+ 		},
+--- ignition-2.18.0.orig/config/v3_5_experimental/translate/translate.go
++++ ignition-2.18.0/config/v3_5_experimental/translate/translate.go
+@@ -15,9 +15,9 @@
+ package translate
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/translate"
+-	old_types "github.com/coreos/ignition/v2/config/v3_4/types"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/translate"
++	old_types "github.com/flatcar/ignition/v2/config/v3_4/types"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ func translateIgnition(old old_types.Ignition) (ret types.Ignition) {
+--- ignition-2.18.0.orig/config/v3_5_experimental/translate/translate_test.go
++++ ignition-2.18.0/config/v3_5_experimental/translate/translate_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	old "github.com/coreos/ignition/v2/config/v3_4/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	old "github.com/flatcar/ignition/v2/config/v3_4/types"
+ )
+ 
+ // Check that we have valid translators for the complete config struct
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/clevis.go
++++ ignition-2.18.0/config/v3_5_experimental/types/clevis.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/clevis_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/clevis_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/config.go
++++ ignition-2.18.0/config/v3_5_experimental/types/config.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 	"github.com/coreos/vcontext/path"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/config_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/config_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/disk.go
++++ ignition-2.18.0/config/v3_5_experimental/types/disk.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/file.go
++++ ignition-2.18.0/config/v3_5_experimental/types/file.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/file_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/file_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFileValidateOverwrite(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/filesystem.go
++++ ignition-2.18.0/config/v3_5_experimental/types/filesystem.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/filesystem_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/filesystem_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestFilesystemValidateFormat(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/headers.go
++++ ignition-2.18.0/config/v3_5_experimental/types/headers.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/http"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/headers_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/headers_test.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func toPointer(val string) *string {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/ignition.go
++++ ignition-2.18.0/config/v3_5_experimental/types/ignition.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"github.com/coreos/go-semver/semver"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/kargs_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/kargs_test.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/validate"
++	"github.com/flatcar/ignition/v2/config/validate"
+ )
+ 
+ func TestKernelArgumentsValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/luks.go
++++ ignition-2.18.0/config/v3_5_experimental/types/luks.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/mode.go
++++ ignition-2.18.0/config/v3_5_experimental/types/mode.go
+@@ -15,7 +15,7 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func validateMode(m *int) error {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/mode_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/mode_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestModeValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/node.go
++++ ignition-2.18.0/config/v3_5_experimental/types/node.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/node_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/node_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/partition.go
++++ ignition-2.18.0/config/v3_5_experimental/types/partition.go
+@@ -19,8 +19,8 @@ import (
+ 	"regexp"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/partition_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/partition_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestValidateLabel(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/path.go
++++ ignition-2.18.0/config/v3_5_experimental/types/path.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validatePath(p string) error {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/path_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/path_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ )
+ 
+ func TestPathValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/proxy.go
++++ ignition-2.18.0/config/v3_5_experimental/types/proxy.go
+@@ -17,7 +17,7 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/proxy_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/proxy_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/raid.go
++++ ignition-2.18.0/config/v3_5_experimental/types/raid.go
+@@ -15,8 +15,8 @@
+ package types
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/raid_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/raid_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/resource.go
++++ ignition-2.18.0/config/v3_5_experimental/types/resource.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/storage.go
++++ ignition-2.18.0/config/v3_5_experimental/types/storage.go
+@@ -18,8 +18,8 @@ import (
+ 	"path"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/storage_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/storage_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/systemd.go
++++ ignition-2.18.0/config/v3_5_experimental/types/systemd.go
+@@ -17,9 +17,9 @@ package types
+ import (
+ 	"regexp"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	vpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/systemd_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/systemd_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/stretchr/testify/assert"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/tang.go
++++ ignition-2.18.0/config/v3_5_experimental/types/tang.go
+@@ -18,8 +18,8 @@ import (
+ 	"encoding/json"
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/tang_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/tang_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/unit.go
++++ ignition-2.18.0/config/v3_5_experimental/types/unit.go
+@@ -17,10 +17,10 @@ package types
+ import (
+ 	"path"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/shared/parse"
+-	"github.com/coreos/ignition/v2/config/shared/validations"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/parse"
++	"github.com/flatcar/ignition/v2/config/shared/validations"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	cpath "github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/unit_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/unit_test.go
+@@ -19,8 +19,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/url.go
++++ ignition-2.18.0/config/v3_5_experimental/types/url.go
+@@ -21,8 +21,8 @@ import (
+ 	"github.com/aws/aws-sdk-go/aws/arn"
+ 	"github.com/vincent-petithory/dataurl"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func validateURL(s string) error {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/url_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/url_test.go
+@@ -17,8 +17,8 @@ package types
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ func TestURLValidate(t *testing.T) {
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/verification.go
++++ ignition-2.18.0/config/v3_5_experimental/types/verification.go
+@@ -19,7 +19,7 @@ import (
+ 	"encoding/hex"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/v3_5_experimental/types/verification_test.go
++++ ignition-2.18.0/config/v3_5_experimental/types/verification_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/config/validate/validate.go
++++ ignition-2.18.0/config/validate/validate.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"reflect"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/util"
+ 
+ 	"github.com/coreos/vcontext/json"
+ 	"github.com/coreos/vcontext/path"
+--- ignition-2.18.0.orig/config/validate/validate_test.go
++++ ignition-2.18.0/config/validate/validate_test.go
+@@ -20,7 +20,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	ignerrors "github.com/coreos/ignition/v2/config/shared/errors"
++	ignerrors "github.com/flatcar/ignition/v2/config/shared/errors"
+ 
+ 	"github.com/coreos/vcontext/path"
+ 	"github.com/coreos/vcontext/report"
+--- ignition-2.18.0.orig/docs/_config.yml
++++ ignition-2.18.0/docs/_config.yml
+@@ -23,7 +23,7 @@ color_scheme: coreos
+ # Aux links for the upper right navigation
+ aux_links:
+   "Ignition on GitHub":
+-    - "https://github.com/coreos/ignition"
++    - "https://github.com/flatcar/ignition"
+ 
+ footer_content: "Copyright &copy; <a href=\"https://www.redhat.com\">Red Hat, Inc.</a> and <a href=\"https://github.com/coreos\">others</a>."
+ 
+@@ -34,7 +34,7 @@ last_edit_time_format: "%b %e %Y at %I:%
+ # Footer "Edit this page on GitHub" link text
+ gh_edit_link: true
+ gh_edit_link_text: "Edit this page on GitHub"
+-gh_edit_repository: "https://github.com/coreos/ignition"
++gh_edit_repository: "https://github.com/flatcar/ignition"
+ gh_edit_branch: "main"
+ gh_edit_source: docs
+ gh_edit_view_mode: "tree"
+--- ignition-2.18.0.orig/docs/development.md
++++ ignition-2.18.0/docs/development.md
+@@ -24,7 +24,7 @@ See also the [Ignition rationale](ration
+ 
+ ### Code structure
+ 
+-The [frontend](https://github.com/coreos/ignition/tree/main/config) handles config parsing and validation which need not run on the target system.  The [backend](https://github.com/coreos/ignition/tree/main/internal) performs the configuration of the target system.  The frontend is a stable library API that is used by other programs, so existing frontend API cannot be changed without bumping the Ignition major version.
++The [frontend](https://github.com/flatcar/ignition/tree/main/config) handles config parsing and validation which need not run on the target system.  The [backend](https://github.com/coreos/ignition/tree/main/internal) performs the configuration of the target system.  The frontend is a stable library API that is used by other programs, so existing frontend API cannot be changed without bumping the Ignition major version.
+ 
+ ### Adding functionality
+ 
+@@ -36,7 +36,7 @@ New functionality added to a config spec
+ 
+ When reprovisioning an existing node, the config may want to reuse existing disks and filesystems without reformatting them.  Config directives should support detecting and reusing an existing object (RAID volume, filesystem, etc.) if its properties match those specified in the config.
+ 
+-Ignition specs should not include distro-specific functionality such as package management.  Features may require support from the distro (for example, setting kernel arguments), but such features should be broadly applicable.  Distro-specific options such as support for SELinux, or paths to external binaries, can be configured at build time in the [`distro`](https://github.com/coreos/ignition/blob/main/internal/distro/distro.go) package.  Distro-specific glue (e.g. support for reformatting the root filesystem) should be implemented outside the Ignition codebase, in Dracut modules that run between Ignition stages (see below).
++Ignition specs should not include distro-specific functionality such as package management.  Features may require support from the distro (for example, setting kernel arguments), but such features should be broadly applicable.  Distro-specific options such as support for SELinux, or paths to external binaries, can be configured at build time in the [`distro`](https://github.com/flatcar/ignition/blob/main/internal/distro/distro.go) package.  Distro-specific glue (e.g. support for reformatting the root filesystem) should be implemented outside the Ignition codebase, in Dracut modules that run between Ignition stages (see below).
+ 
+ Ideally, functionality should not be added to an experimental spec in the same Ignition release that the spec is stabilized.  Doing so prevents users from trying out the functionality before we commit to maintaining it.
+ 
+@@ -178,15 +178,15 @@ To add a blackbox test create a function
+ 
+ The test should be added to the init function inside of the test file. If the test module is being created then an `init` function should be created which registers the tests and the package must be imported inside of `tests/registry/registry.go` to allow for discovery.
+ 
+-UUIDs may be required in the following fields of a `Test` object: `In`, `Out`, and `Config`. Replace all GUIDs with GUID varaibles which take on the format `$uuid<num>` (e.g. $uuid123). Where `<num>` must be a positive integer. GUID variables with identical `<num>` fields will be replaced with identical GUIDs. For example, look at [tests/positive/partitions/zeros.go](https://github.com/coreos/ignition/blob/main/tests/positive/partitions/zeros.go).
++UUIDs may be required in the following fields of a `Test` object: `In`, `Out`, and `Config`. Replace all GUIDs with GUID varaibles which take on the format `$uuid<num>` (e.g. $uuid123). Where `<num>` must be a positive integer. GUID variables with identical `<num>` fields will be replaced with identical GUIDs. For example, look at [tests/positive/partitions/zeros.go](https://github.com/flatcar/ignition/blob/main/tests/positive/partitions/zeros.go).
+ 
+ ## Releasing Ignition
+ 
+-Create a new [release checklist](https://github.com/coreos/ignition/issues/new?labels=kind/release&template=release-checklist.md) and follow the steps there.
++Create a new [release checklist](https://github.com/flatcar/ignition/issues/new?labels=kind/release&template=release-checklist.md) and follow the steps there.
+ 
+ ## The build process
+ 
+-Note that the `build` script included in this repository is a convenience script only and not used for the actual release binaries. Those are built using an `ignition.spec` maintained in [Fedora rpms/ignition](https://src.fedoraproject.org/rpms/ignition). (The `ignition-validate` [container](https://quay.io/repository/coreos/ignition-validate) is built by the `build_for_container` script, which is not further described here.)
++Note that the `build` script included in this repository is a convenience script only and not used for the actual release binaries. Those are built using an `ignition.spec` maintained in [Fedora rpms/ignition](https://src.fedoraproject.org/rpms/ignition). (The `ignition-validate` [container](https://quay.io/repository/flatcar/ignition-validate) is built by the `build_for_container` script, which is not further described here.)
+ This build process uses the [go-rpm-macros](https://pagure.io/go-rpm-macros) to set up the Go build environment and is subject to the [Golang Packaging Guidelines](https://docs.fedoraproject.org/en-US/packaging-guidelines/Golang/).
+ 
+ Consult the [Package Maintenance Guide](https://docs.fedoraproject.org/en-US/package-maintainers/Package_Maintenance_Guide/) and the [Pull Requests Guide](https://docs.fedoraproject.org/en-US/ci/pull-requests/) if you want to contribute to the build process.
+@@ -195,4 +195,4 @@ In case you have trouble with the aforem
+ 
+ ## Marking an experimental spec as stable
+ 
+-Create a new [stabilization checklist](https://github.com/coreos/ignition/issues/new?template=stabilize-checklist.md) and follow the steps there.
++Create a new [stabilization checklist](https://github.com/flatcar/ignition/issues/new?template=stabilize-checklist.md) and follow the steps there.
+--- ignition-2.18.0.orig/docs/distributor-notes.md
++++ ignition-2.18.0/docs/distributor-notes.md
+@@ -14,8 +14,8 @@ The distribution specific integration is
+ 
+ ## Kernel Arguments
+ 
+-When Ignition is updating kernel arguments it will call out to a binary (defined in `internal/distro/distro.go` and overridable at build-time via overriding the `github.com/coreos/ignition/v2/internal/distro.kargsCmd` build flag). Ignition expects that the binary accepts `--should-exist` & `--should-not-exist` parameters. Should exist operations should append the argument if missing and should not exist should NOT fail if the argument is not present. The binary should also reboot the system if necessary.
++When Ignition is updating kernel arguments it will call out to a binary (defined in `internal/distro/distro.go` and overridable at build-time via overriding the `github.com/flatcar/ignition/v2/internal/distro.kargsCmd` build flag). Ignition expects that the binary accepts `--should-exist` & `--should-not-exist` parameters. Should exist operations should append the argument if missing and should not exist should NOT fail if the argument is not present. The binary should also reboot the system if necessary.
+ 
+-As an example of the binary implementation look at [`examples/ignition-kargs-helper`](https://github.com/coreos/ignition/blob/main/examples/ignition-kargs-helper).
++As an example of the binary implementation look at [`examples/ignition-kargs-helper`](https://github.com/flatcar/ignition/blob/main/examples/ignition-kargs-helper).
+ 
+-If your implementation of Ignition doesn't intend to ship kargs functionality the [`ignition-kargs.service` unit](https://github.com/coreos/ignition/blob/main/dracut/30ignition/ignition-kargs.service) should be disabled.
++If your implementation of Ignition doesn't intend to ship kargs functionality the [`ignition-kargs.service` unit](https://github.com/flatcar/ignition/blob/main/dracut/30ignition/ignition-kargs.service) should be disabled.
+--- ignition-2.18.0.orig/docs/getting-started.md
++++ ignition-2.18.0/docs/getting-started.md
+@@ -24,12 +24,12 @@ The Linux distro may provide a base conf
+ 
+ ## Config Validation
+ 
+-To validate a config for Ignition there are binaries for a cli tool called `ignition-validate` available [on the releases page][releases]. There is also an ignition-validate container: `quay.io/coreos/ignition-validate`.
++To validate a config for Ignition there are binaries for a cli tool called `ignition-validate` available [on the releases page][releases]. There is also an ignition-validate container: `quay.io/flatcar/ignition-validate`.
+ 
+ Example:
+ ```
+ # This example uses podman, but docker can be used too
+-podman run --pull=always --rm -i quay.io/coreos/ignition-validate:release - < myconfig.ign
++podman run --pull=always --rm -i quay.io/flatcar/ignition-validate:release - < myconfig.ign
+ ```
+ 
+ ## Troubleshooting
+@@ -68,7 +68,7 @@ Ignition is not typically run more than
+ [firstboot]: rationale.md#ignition-runs-only-on-the-first-boot
+ [mime]: http://www.iana.org/assignments/media-types/application/vnd.coreos.ignition+json
+ [operator-notes]: operator-notes.md
+-[releases]: https://github.com/coreos/ignition/releases
++[releases]: https://github.com/flatcar/ignition/releases
+ [platforms]: supported-platforms.md
+ [preset]: https://www.freedesktop.org/software/systemd/man/systemd.preset.html
+ [troubleshooting]: #troubleshooting
+--- ignition-2.18.0.orig/docs/index.md
++++ ignition-2.18.0/docs/index.md
+@@ -14,13 +14,13 @@ Odds are good that you don't want to inv
+ 
+ - Mailing list: [coreos@lists.fedoraproject.org](https://lists.fedoraproject.org/archives/list/coreos@lists.fedoraproject.org/)
+ - IRC: #[fedora-coreos](ircs://irc.libera.chat:6697/#fedora-coreos) on Libera.Chat
+-- Reporting bugs: [issues](https://github.com/coreos/ignition/issues/new/choose)
++- Reporting bugs: [issues](https://github.com/flatcar/ignition/issues/new/choose)
+ 
+ ## Contributing
+ 
+ See [CONTRIBUTING][contributing] for details on submitting patches and the contribution workflow.
+ 
+-To help triage or fix bugs, see the current [Ignition issues](https://github.com/coreos/ignition/issues/).
++To help triage or fix bugs, see the current [Ignition issues](https://github.com/flatcar/ignition/issues/).
+ 
+ [getting started]: getting-started.md
+-[contributing]: https://github.com/coreos/ignition/blob/main/CONTRIBUTING.md
++[contributing]: https://github.com/flatcar/ignition/blob/main/CONTRIBUTING.md
+--- ignition-2.18.0.orig/docs/migrating-configs.md
++++ ignition-2.18.0/docs/migrating-configs.md
+@@ -584,7 +584,7 @@ The networkd section has been removed. U
+ 
+ ## From 2.x.0 to 2.3.0
+ 
+-Refer to [this doc in the `spec2x`](https://github.com/coreos/ignition/tree/spec2x/doc/migrating-configs.md) branch of this repository. That doc also describes specification version 2.4.0, a parallel development which shares some enhancements with spec 3.1.0.
++Refer to [this doc in the `spec2x`](https://github.com/flatcar/ignition/tree/spec2x/doc/migrating-configs.md) branch of this repository. That doc also describes specification version 2.4.0, a parallel development which shares some enhancements with spec 3.1.0.
+ 
+ [networkd-docs]: https://www.freedesktop.org/software/systemd/man/systemd-networkd.html#
+ [operator-notes]: operator-notes.md
+--- ignition-2.18.0.orig/docs/specs.md
++++ ignition-2.18.0/docs/specs.md
+@@ -37,7 +37,7 @@ Ignition:
+ ## Legacy spec 2.x configuration specifications
+ 
+ Documentation for the spec 1 and 2.x configuration specifications is available
+-in the legacy [`spec2x` branch](https://github.com/coreos/ignition/tree/spec2x/doc)
++in the legacy [`spec2x` branch](https://github.com/flatcar/ignition/tree/spec2x/doc)
+ of Ignition. Those specification versions are used by older versions of RHEL
+ CoreOS and Flatcar Container Linux. This branch is no longer maintained.
+ 
+--- ignition-2.18.0.orig/docs/supported-platforms.md
++++ ignition-2.18.0/docs/supported-platforms.md
+@@ -11,8 +11,10 @@ Ignition is currently only supported for
+ * [Amazon Web Services] (`aws`) - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
+ * [Microsoft Azure] (`azure`)- Ignition will read its configuration from the custom data provided to the instance. Cloud SSH keys are handled separately.
+ * [Microsoft Azure Stack] (`azurestack`) - Ignition will read its configuration from the custom data provided to the instance. Cloud SSH keys are handled separately.
++* Bare Metal - Use the `ignition.config.url` kernel parameter to provide a URL to the configuration. The URL can use the `http://`, `https://`, `tftp://`, `s3://`, or `gs://` schemes to specify a remote config or the `oem://` scheme to specify a local config, rooted in `/usr/share/oem`.
+ * [Brightbox] (`brightbox`) - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
+ * [CloudStack] (`cloudstack`) - Ignition will read its configuration from the instance userdata via either metadata service or config drive. Cloud SSH keys are handled separately.
++* `cloudsigma` - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
+ * [DigitalOcean] (`digitalocean`) - Ignition will read its configuration from the droplet userdata. Cloud SSH keys and network configuration are handled separately.
+ * [Exoscale] (`exoscale`) - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
+ * [Google Cloud] (`gcp`) - Ignition will read its configuration from the instance metadata entry named "user-data". Cloud SSH keys are handled separately.
+@@ -26,6 +28,9 @@ Ignition is currently only supported for
+ * [Equinix Metal] (`packet`) - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
+ * [IBM Power Systems Virtual Server] (`powervs`) - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
+ * [QEMU] (`qemu`) - Ignition will read its configuration from the 'opt/com.coreos/config' key on the QEMU Firmware Configuration Device (available in QEMU 2.4.0 and higher).
++* `rackspace` - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
++* `rackspace-onmetal` - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
++* `vagrant` - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
+ * [Scaleway] (`scaleway`) - Ignition will read its configuration from the instance userdata. Cloud SSH keys are handled separately.
+ * [VirtualBox] (`virtualbox`) - Use the VirtualBox guest property `/Ignition/Config` to provide the config to the virtual machine.
+ * [VMware] (`vmware`) - Use the VMware Guestinfo variables `ignition.config.data` and `ignition.config.data.encoding` to provide the config and its encoding to the virtual machine. Valid encodings are "", "base64", and "gzip+base64". Guestinfo variables can be provided directly or via an OVF environment, with priority given to variables specified directly.
+--- ignition-2.18.0.orig/dracut/30ignition/ignition-complete.target
++++ ignition-2.18.0/dracut/30ignition/ignition-complete.target
+@@ -5,7 +5,7 @@
+ # initrd.
+ [Unit]
+ Description=Ignition Complete
+-Documentation=https://github.com/coreos/ignition
++Documentation=https://github.com/flatcar/ignition
+ ConditionPathExists=/etc/initrd-release
+ Before=initrd.target
+ 
+--- ignition-2.18.0.orig/dracut/30ignition/ignition-diskful-subsequent.target
++++ ignition-2.18.0/dracut/30ignition/ignition-diskful-subsequent.target
+@@ -3,7 +3,7 @@
+ # boot disk and *aren't* doing the first boot.
+ [Unit]
+ Description=Ignition Subsequent Boot Disk Setup
+-Documentation=https://github.com/coreos/ignition
++Documentation=https://github.com/flatcar/ignition
+ ConditionPathExists=/etc/initrd-release
+ Before=ignition-subsequent.target
+ 
+--- ignition-2.18.0.orig/dracut/30ignition/ignition-diskful.target
++++ ignition-2.18.0/dracut/30ignition/ignition-diskful.target
+@@ -3,7 +3,7 @@
+ # Like ignition-complete.target, it only runs on first boot.
+ [Unit]
+ Description=Ignition Boot Disk Setup
+-Documentation=https://github.com/coreos/ignition
++Documentation=https://github.com/flatcar/ignition
+ ConditionPathExists=/etc/initrd-release
+ Before=ignition-complete.target
+ 
+--- ignition-2.18.0.orig/dracut/30ignition/ignition-subsequent.target
++++ ignition-2.18.0/dracut/30ignition/ignition-subsequent.target
+@@ -3,7 +3,7 @@
+ # different order on the Ignition boot versus "subsequent" boots.
+ [Unit]
+ Description=Subsequent (Not Ignition) boot complete
+-Documentation=https://github.com/coreos/ignition
++Documentation=https://github.com/flatcar/ignition
+ ConditionPathExists=/etc/initrd-release
+ Before=initrd.target
+ 
+--- ignition-2.18.0.orig/dracut/30ignition/module-setup.sh
++++ ignition-2.18.0/dracut/30ignition/module-setup.sh
+@@ -40,6 +40,7 @@ install() {
+         mkfs.xfs \
+         mkswap \
+         sgdisk \
++        partprobe \
+         useradd \
+         userdel \
+         usermod \
+@@ -59,7 +60,7 @@ install() {
+         tpm2_createpolicy
+ 
+     # Required by s390x's z/VM installation.
+-    # Supporting https://github.com/coreos/ignition/pull/865
++    # Supporting https://github.com/flatcar/ignition/pull/865
+     inst_multiple -o chccwdev vmur
+ 
+     # Required on system using SELinux
+--- ignition-2.18.0.orig/go.mod
++++ ignition-2.18.0/go.mod
+@@ -1,4 +1,4 @@
+-module github.com/coreos/ignition/v2
++module github.com/flatcar/ignition/v2
+ 
+ go 1.20
+ 
+@@ -11,10 +11,12 @@ require (
+ 	github.com/coreos/go-semver v0.3.1
+ 	github.com/coreos/go-systemd/v22 v22.5.0
+ 	github.com/coreos/vcontext v0.0.0-20230201181013-d72178a18687
++	github.com/flatcar/ignition v0.36.2
+ 	github.com/google/renameio/v2 v2.0.0
+ 	github.com/google/uuid v1.6.0
+ 	github.com/mdlayher/vsock v1.2.1
+ 	github.com/mitchellh/copystructure v1.2.0
++	github.com/opencontainers/selinux v1.11.0
+ 	github.com/pin/tftp v2.1.0+incompatible
+ 	github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace
+ 	github.com/stretchr/testify v1.8.4
+@@ -31,7 +33,9 @@ require (
+ 	cloud.google.com/go v0.112.0 // indirect
+ 	cloud.google.com/go/compute v1.23.4 // indirect
+ 	cloud.google.com/go/iam v1.1.6 // indirect
++	github.com/ajeddeloh/go-json v0.0.0-20160803184958-73d058cf8437 // indirect
+ 	github.com/coreos/go-json v0.0.0-20230131223807-18775e0fb4fb // indirect
++	github.com/coreos/go-systemd v0.0.0-20181031085051-9002847aa142 // indirect
+ 	github.com/davecgh/go-spew v1.1.1 // indirect
+ 	github.com/felixge/httpsnoop v1.0.4 // indirect
+ 	github.com/go-logr/logr v1.4.1 // indirect
+@@ -52,6 +56,7 @@ require (
+ 	go.opentelemetry.io/otel v1.23.0 // indirect
+ 	go.opentelemetry.io/otel/metric v1.23.0 // indirect
+ 	go.opentelemetry.io/otel/trace v1.23.0 // indirect
++	go4.org v0.0.0-20160314031811-03efcb870d84 // indirect
+ 	golang.org/x/crypto v0.19.0 // indirect
+ 	golang.org/x/sync v0.6.0 // indirect
+ 	golang.org/x/text v0.14.0 // indirect
+--- ignition-2.18.0.orig/go.sum
++++ ignition-2.18.0/go.sum
+@@ -10,6 +10,9 @@ cloud.google.com/go/iam v1.1.6/go.mod h1
+ cloud.google.com/go/storage v1.38.0 h1:Az68ZRGlnNTpIBbLjSMIV2BDcwwXYlRlQzis0llkpJg=
+ cloud.google.com/go/storage v1.38.0/go.mod h1:tlUADB0mAb9BgYls9lq+8MGkfzOXuLrnHXlpHmvFJoY=
+ github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=
++github.com/ajeddeloh/go-json v0.0.0-20160803184958-73d058cf8437 h1:gZCtZ+Hh/e3CGEX8q/yAcp8wWu5ZS6NMk6VGzpQhI3s=
++github.com/ajeddeloh/go-json v0.0.0-20160803184958-73d058cf8437/go.mod h1:otnto4/Icqn88WCcM4bhIJNSgsh9VLBuspyyCfvof9c=
++github.com/aws/aws-sdk-go v1.8.39/go.mod h1:ZRmQr0FajVIyZ4ZzBYKG5P3ZqPz9IHG41ZoMu1ADI3k=
+ github.com/aws/aws-sdk-go v1.50.25 h1:vhiHtLYybv1Nhx3Kv18BBC6L0aPJHaG9aeEsr92W99c=
+ github.com/aws/aws-sdk-go v1.50.25/go.mod h1:LF8svs817+Nz+DmiMQKTO3ubZ/6IaTpq3TjupRn3Eqk=
+ github.com/beevik/etree v1.3.0 h1:hQTc+pylzIKDb23yYprodCWWTt+ojFfUZyzU09a/hmU=
+@@ -22,8 +25,11 @@ github.com/containers/libhvee v0.6.0 h1:
+ github.com/containers/libhvee v0.6.0/go.mod h1:f/q1wCdQqOLiK3IZqqBfOD7exMZYBU5pDYsrMa/pSFg=
+ github.com/coreos/go-json v0.0.0-20230131223807-18775e0fb4fb h1:rmqyI19j3Z/74bIRhuC59RB442rXUazKNueVpfJPxg4=
+ github.com/coreos/go-json v0.0.0-20230131223807-18775e0fb4fb/go.mod h1:rcFZM3uxVvdyNmsAV2jopgPD1cs5SPWJWU5dOz2LUnw=
++github.com/coreos/go-semver v0.1.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=
+ github.com/coreos/go-semver v0.3.1 h1:yi21YpKnrx1gt5R+la8n5WgS0kCrsPp33dmEyHReZr4=
+ github.com/coreos/go-semver v0.3.1/go.mod h1:irMmmIw/7yzSRPWryHsK7EYSg09caPQL03VsM8rvUec=
++github.com/coreos/go-systemd v0.0.0-20181031085051-9002847aa142 h1:3jFq2xL4ZajGK4aZY8jz+DAF0FHjI51BXjjSwCzS1Dk=
++github.com/coreos/go-systemd v0.0.0-20181031085051-9002847aa142/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=
+ github.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=
+ github.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=
+ github.com/coreos/vcontext v0.0.0-20230201181013-d72178a18687 h1:uSmlDgJGbUB0bwQBcZomBTottKwEDF5fF8UjSwKSzWM=
+@@ -38,11 +44,15 @@ github.com/envoyproxy/protoc-gen-validat
+ github.com/envoyproxy/protoc-gen-validate v1.0.2 h1:QkIBuU5k+x7/QXPvPPnWXWlCdaBFApVqftFV6k087DA=
+ github.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=
+ github.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=
++github.com/flatcar/ignition v0.36.2 h1:xGHgScUe0P4Fkprjqv7L2CE58emiQgP833OCCn9z2v4=
++github.com/flatcar/ignition v0.36.2/go.mod h1:uk1tpzLFRXus4RrvzgMI+IqmmB8a/RGFSBlI+tMTbbA=
++github.com/go-ini/ini v1.25.4/go.mod h1:ByCAeIL28uOIIG0E3PJtZPDL8WnHpFKFOtgjp+3Ies8=
+ github.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=
+ github.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=
+ github.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=
+ github.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=
+ github.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=
++github.com/godbus/dbus v0.0.0-20181025153459-66d97aec3384/go.mod h1:/YcGZj5zSblfDWMMoOzV4fas9FZnQYTkDnsGvmh2Grw=
+ github.com/godbus/dbus/v5 v5.0.4 h1:9349emZab16e7zQvpmsbtjc18ykshndd8y2PG3sgJbA=
+ github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=
+ github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
+@@ -83,10 +93,13 @@ github.com/googleapis/enterprise-certifi
+ github.com/googleapis/enterprise-certificate-proxy v0.3.2/go.mod h1:VLSiSSBs/ksPL8kq3OBOQ6WRI2QnaFynd1DCjZ62+V0=
+ github.com/googleapis/gax-go/v2 v2.12.1 h1:9F8GV9r9ztXyAi00gsMQHNoF51xPZm8uj1dpYt2ZETM=
+ github.com/googleapis/gax-go/v2 v2.12.1/go.mod h1:61M8vcyyXR2kqKFxKrfA22jaA8JGF7Dc8App1U3H6jc=
++github.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=
++github.com/jmespath/go-jmespath v0.0.0-20160202185014-0b12d6b521d8/go.mod h1:Nht3zPeWKUH0NzdCt2Blrr5ys8VGpn0CEB0cQHVjt7k=
+ github.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=
+ github.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=
+ github.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=
+ github.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=
++github.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=
+ github.com/mdlayher/socket v0.4.1 h1:eM9y2/jlbs1M615oshPQOHZzj6R6wMT7bX5NPiQvn2U=
+ github.com/mdlayher/socket v0.4.1/go.mod h1:cAqeGjoufqdxWkD7DkpyS+wcefOtmu5OQ8KuoJGIReA=
+ github.com/mdlayher/vsock v1.2.1 h1:pC1mTJTvjo1r9n9fbm7S1j04rCgCzhCOS5DY0zqHlnQ=
+@@ -95,16 +108,24 @@ github.com/mitchellh/copystructure v1.2.
+ github.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=
+ github.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=
+ github.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=
++github.com/opencontainers/selinux v1.11.0 h1:+5Zbo97w3Lbmb3PeqQtpmTkMwsW5nRI3YaLpt7tQ7oU=
++github.com/opencontainers/selinux v1.11.0/go.mod h1:E5dMC3VPuVvVHDYmi78qvhJp8+M586T4DlDRYpFkyec=
++github.com/pborman/uuid v0.0.0-20170612153648-e790cca94e6c/go.mod h1:VyrYX9gd7irzKovcSS6BIIEwPRkP2Wm2m9ufcdFSJ34=
+ github.com/pin/tftp v2.1.0+incompatible h1:Yng4J7jv6lOc6IF4XoB5mnd3P7ZrF60XQq+my3FAMus=
+ github.com/pin/tftp v2.1.0+incompatible/go.mod h1:xVpZOMCXTy+A5QMjEVN0Glwa1sUvaJhFXbr/aAxuxGY=
+ github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
+ github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+ github.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=
++github.com/sigma/bdoor v0.0.0-20160202064022-babf2a4017b0/go.mod h1:WBu7REWbxC/s/J06jsk//d+9DOz9BbsmcIrimuGRFbs=
++github.com/sigma/vmw-guestinfo v0.0.0-20160204083807-95dd4126d6e8/go.mod h1:JrRFFC0veyh0cibh0DAhriSY7/gV3kDdNaVUOmfx01U=
++github.com/smartystreets/assertions v1.2.0/go.mod h1:tcbTF8ujkAEcZ8TElKY+i30BzYlVhC/LOxJk7iOWnoo=
++github.com/smartystreets/goconvey v1.7.2/go.mod h1:Vw0tHAZW6lzCRk3xgdin6fKYcG+G3Pg9vgXWeJpQFMM=
+ github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace h1:9PNP1jnUjRhfmGMlkXHjYPishpcw4jpSt/V/xYY3FMA=
+ github.com/spf13/pflag v1.0.6-0.20210604193023-d5e0c0615ace/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=
+ github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+ github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
+ github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
++github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+ github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+ github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
+ github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
+@@ -112,8 +133,10 @@ github.com/stretchr/testify v1.8.4 h1:Cc
+ github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
+ github.com/vincent-petithory/dataurl v1.0.0 h1:cXw+kPto8NLuJtlMsI152irrVw9fRDX8AbShPRpg2CI=
+ github.com/vincent-petithory/dataurl v1.0.0/go.mod h1:FHafX5vmDzyP+1CQATJn7WFKc9CvnvxyvZy6I1MrG/U=
++github.com/vmware/vmw-guestinfo v0.0.0-20170707015358-25eff159a728/go.mod h1:x9oS4Wk2s2u4tS29nEaDLdzvuHdB19CvSGJjPgkZJNk=
+ github.com/vmware/vmw-guestinfo v0.0.0-20220317130741-510905f0efa3 h1:v6jG/tdl4O07LNVp74Nt7/OyL+1JsIW1M2f/nSvQheY=
+ github.com/vmware/vmw-guestinfo v0.0.0-20220317130741-510905f0efa3/go.mod h1:CSBTxrhePCm0cmXNKDGeu+6bOQzpaEklfCqEpn89JWk=
++github.com/vmware/vmw-ovflib v0.0.0-20170608004843-1f217b9dc714/go.mod h1:jiPk45kn7klhByRvUq5i2vo1RtHKBHj+iWGFpxbXuuI=
+ github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
+ go.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=
+ go.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=
+@@ -128,6 +151,8 @@ go.opentelemetry.io/otel/metric v1.23.0/
+ go.opentelemetry.io/otel/sdk v1.21.0 h1:FTt8qirL1EysG6sTQRZ5TokkU8d0ugCj8htOgThZXQ8=
+ go.opentelemetry.io/otel/trace v1.23.0 h1:37Ik5Ib7xfYVb4V1UtnT97T1jI+AoIYkJyPkuL4iJgI=
+ go.opentelemetry.io/otel/trace v1.23.0/go.mod h1:GSGTbIClEsuZrGIzoEHqsVfxgn5UkggkflQwDScNUsk=
++go4.org v0.0.0-20160314031811-03efcb870d84 h1:WZkGC1qzoax/QSt84wmvIxk+ZOmGIChsTzdrv9t4nvk=
++go4.org v0.0.0-20160314031811-03efcb870d84/go.mod h1:MkTOUMDaeVYJUOUsaDXIhWPZYa1yOyC1qaOBpL57BhE=
+ golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
+ golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
+ golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
+@@ -142,6 +167,7 @@ golang.org/x/net v0.0.0-20180724234803-3
+ golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+ golang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+ golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
++golang.org/x/net v0.0.0-20190320064053-1272bf9dcd53/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+ golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
+ golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
+ golang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=
+@@ -182,6 +208,7 @@ golang.org/x/tools v0.0.0-20180917221912
+ golang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+ golang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=
+ golang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
++golang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=
+ golang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=
+ golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
+ golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
+@@ -225,8 +252,9 @@ google.golang.org/protobuf v1.32.0 h1:pP
+ google.golang.org/protobuf v1.32.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=
+ gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=
+ gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+-gopkg.in/yaml.v2 v2.2.8 h1:obN1ZagJSUGI0Ek/LBmuj4SNLPfIny3KsKFopxRdj10=
+ gopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
++gopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=
++gopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=
+ gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+ gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
+ gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+--- ignition-2.18.0.orig/internal/apply/apply.go
++++ ignition-2.18.0/internal/apply/apply.go
+@@ -20,21 +20,21 @@ import (
+ 	"os"
+ 	"path/filepath"
+ 
+-	"github.com/coreos/ignition/v2/internal/exec"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/disks"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/fetch"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/fetch_offline"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/files"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/kargs"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/mount"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/umount"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
+-	"github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/internal/exec"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/disks"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/fetch"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/fetch_offline"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/files"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/kargs"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/mount"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/umount"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/internal/util"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ type Flags struct {
+--- ignition-2.18.0.orig/internal/distro/distro.go
++++ ignition-2.18.0/internal/distro/distro.go
+@@ -16,20 +16,28 @@ package distro
+ 
+ import (
+ 	"fmt"
++	"github.com/opencontainers/selinux/go-selinux"
+ 	"os"
+ )
+ 
+ // Distro-specific settings that can be overridden at link time with e.g.
+-// -X github.com/coreos/ignition/v2/internal/distro.mdadmCmd=/opt/bin/mdadm
++// -X github.com/flatcar/ignition/v2/internal/distro.mdadmCmd=/opt/bin/mdadm
+ var (
+ 	// Device node directories and paths
+-	diskByLabelDir = "/dev/disk/by-label"
++	diskByLabelDir    = "/dev/disk/by-label"
++	diskByPartUUIDDir = "/dev/disk/by-partuuid"
++	oemDevicePath     = "/dev/disk/by-label/OEM"
+ 
+ 	// initrd file paths
+ 	kernelCmdlinePath = "/proc/cmdline"
+ 	bootIDPath        = "/proc/sys/kernel/random/boot_id"
+ 	// initramfs directory containing distro-provided base config
+ 	systemConfigDir = "/usr/lib/ignition"
++	// initramfs directory to check before retrieving file from
++	// OEM partition; note that OEM partition is mounted on /oem
++	// on the host, but initrds still use /usr/share/oem for
++	// backwards compatilibity
++	oemLookasideDir = "/usr/share/oem"
+ 
+ 	// Helper programs
+ 	groupaddCmd  = "groupadd"
+@@ -37,6 +45,7 @@ var (
+ 	mdadmCmd     = "mdadm"
+ 	mountCmd     = "mount"
+ 	sgdiskCmd    = "sgdisk"
++	partprobeCmd = "partprobe"
+ 	modprobeCmd  = "modprobe"
+ 	udevadmCmd   = "udevadm"
+ 	usermodCmd   = "usermod"
+@@ -66,7 +75,7 @@ var (
+ 	kargsCmd = "ignition-kargs-helper"
+ 
+ 	// Flags
+-	selinuxRelabel  = "true"
++	selinuxEnabled  *bool
+ 	blackboxTesting = "false"
+ 	// writeAuthorizedKeysFragment indicates whether to write SSH keys
+ 	// specified in the Ignition config as a fragment to
+@@ -79,17 +88,21 @@ var (
+ 	resultFilePath          = "/etc/.ignition-result.json"
+ )
+ 
+-func DiskByLabelDir() string { return diskByLabelDir }
++func DiskByLabelDir() string    { return diskByLabelDir }
++func DiskByPartUUIDDir() string { return diskByPartUUIDDir }
++func OEMDevicePath() string     { return fromEnv("OEM_DEVICE", oemDevicePath) }
+ 
+ func KernelCmdlinePath() string { return kernelCmdlinePath }
+ func BootIDPath() string        { return bootIDPath }
+ func SystemConfigDir() string   { return fromEnv("SYSTEM_CONFIG_DIR", systemConfigDir) }
++func OEMLookasideDir() string   { return fromEnv("OEM_LOOKASIDE_DIR", oemLookasideDir) }
+ 
+ func GroupaddCmd() string  { return groupaddCmd }
+ func GroupdelCmd() string  { return groupdelCmd }
+ func MdadmCmd() string     { return mdadmCmd }
+ func MountCmd() string     { return mountCmd }
+ func SgdiskCmd() string    { return sgdiskCmd }
++func PartprobeCmd() string { return partprobeCmd }
+ func ModprobeCmd() string  { return modprobeCmd }
+ func UdevadmCmd() string   { return udevadmCmd }
+ func UsermodCmd() string   { return usermodCmd }
+@@ -117,7 +130,7 @@ func KargsCmd() string { return kargsCmd
+ func LuksRealRootKeyFilePath() string { return luksRealRootKeyFilePath }
+ func ResultFilePath() string          { return resultFilePath }
+ 
+-func SelinuxRelabel() bool  { return bakedStringToBool(selinuxRelabel) && !BlackboxTesting() }
++func SelinuxRelabel() bool  { return selinuxRelabelNeed() && !BlackboxTesting() }
+ func BlackboxTesting() bool { return bakedStringToBool(blackboxTesting) }
+ func WriteAuthorizedKeysFragment() bool {
+ 	return bakedStringToBool(fromEnv("WRITE_AUTHORIZED_KEYS_FRAGMENT", writeAuthorizedKeysFragment))
+@@ -142,3 +155,11 @@ func bakedStringToBool(s string) bool {
+ 		panic(fmt.Sprintf("value '%s' cannot be interpreted as a boolean", s))
+ 	}
+ }
++
++func selinuxRelabelNeed() bool {
++	if selinuxEnabled == nil {
++		selinuxEnabled = new(bool)
++		*selinuxEnabled = selinux.GetEnabled()
++	}
++	return *selinuxEnabled
++}
+--- ignition-2.18.0.orig/internal/doc/main.go
++++ ignition-2.18.0/internal/doc/main.go
+@@ -25,13 +25,13 @@ import (
+ 
+ 	"github.com/coreos/go-semver/semver"
+ 
+-	"github.com/coreos/ignition/v2/config/doc"
+-	v30 "github.com/coreos/ignition/v2/config/v3_0/types"
+-	v31 "github.com/coreos/ignition/v2/config/v3_1/types"
+-	v32 "github.com/coreos/ignition/v2/config/v3_2/types"
+-	v33 "github.com/coreos/ignition/v2/config/v3_3/types"
+-	v34 "github.com/coreos/ignition/v2/config/v3_4/types"
+-	v35 "github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/doc"
++	v30 "github.com/flatcar/ignition/v2/config/v3_0/types"
++	v31 "github.com/flatcar/ignition/v2/config/v3_1/types"
++	v32 "github.com/flatcar/ignition/v2/config/v3_2/types"
++	v33 "github.com/flatcar/ignition/v2/config/v3_3/types"
++	v34 "github.com/flatcar/ignition/v2/config/v3_4/types"
++	v35 "github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ var (
+--- ignition-2.18.0.orig/internal/exec/config_fetcher.go
++++ ignition-2.18.0/internal/exec/config_fetcher.go
+@@ -20,15 +20,15 @@ import (
+ 	"net/http"
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
+-	"github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/config"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/internal/util"
+ 
+-	latest "github.com/coreos/ignition/v2/config/v3_5_experimental"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	latest "github.com/flatcar/ignition/v2/config/v3_5_experimental"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ type ConfigFetcher struct {
+--- ignition-2.18.0.orig/internal/exec/engine.go
++++ ignition-2.18.0/internal/exec/engine.go
+@@ -23,17 +23,17 @@ import (
+ 	"time"
+ 
+ 	"github.com/coreos/go-systemd/v22/journal"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	latest "github.com/coreos/ignition/v2/config/v3_5_experimental"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	executil "github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/cmdline"
+-	"github.com/coreos/ignition/v2/internal/providers/system"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	latest "github.com/flatcar/ignition/v2/config/v3_5_experimental"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	executil "github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/cmdline"
++	"github.com/flatcar/ignition/v2/internal/providers/system"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ 
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/coreos/vcontext/validate"
+--- ignition-2.18.0.orig/internal/exec/stages/disks/disks.go
++++ ignition-2.18.0/internal/exec/stages/disks/disks.go
+@@ -25,14 +25,14 @@ import (
+ 	"os/exec"
+ 	"path/filepath"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
+-	"github.com/coreos/ignition/v2/internal/systemd"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/internal/systemd"
+ )
+ 
+ const (
+--- ignition-2.18.0.orig/internal/exec/stages/disks/filesystems.go
++++ ignition-2.18.0/internal/exec/stages/disks/filesystems.go
+@@ -25,10 +25,10 @@ import (
+ 	"runtime"
+ 	"strings"
+ 
+-	cutil "github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
++	cutil "github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
+ )
+ 
+ var (
+@@ -126,7 +126,7 @@ func (s stage) createFilesystem(fs types
+ 		}
+ 		// If the filesystem isn't forcefully being created, then we need
+ 		// to check if it is of the correct type or that no filesystem exists.
+-		if info.Type == fileSystemFormat &&
++		if (info.Type == fileSystemFormat || info.Label == "OEM") &&
+ 			(fs.Label == nil || info.Label == *fs.Label) &&
+ 			(fs.UUID == nil || canonicalizeFilesystemUUID(info.Type, info.UUID) == canonicalizeFilesystemUUID(fileSystemFormat, *fs.UUID)) {
+ 			s.Logger.Info("filesystem at %q is already correctly formatted. Skipping mkfs...", fs.Device)
+--- ignition-2.18.0.orig/internal/exec/stages/disks/luks.go
++++ ignition-2.18.0/internal/exec/stages/disks/luks.go
+@@ -26,12 +26,12 @@ import (
+ 	"path"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	execUtil "github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	execUtil "github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ )
+--- ignition-2.18.0.orig/internal/exec/stages/disks/partitions.go
++++ ignition-2.18.0/internal/exec/stages/disks/partitions.go
+@@ -26,10 +26,10 @@ import (
+ 	"strconv"
+ 	"strings"
+ 
+-	cutil "github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/sgdisk"
++	cutil "github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/sgdisk"
+ )
+ 
+ var (
+--- ignition-2.18.0.orig/internal/exec/stages/disks/raid.go
++++ ignition-2.18.0/internal/exec/stages/disks/raid.go
+@@ -24,9 +24,9 @@ import (
+ 	"os/exec"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
+ )
+ 
+ func (s stage) createRaids(config types.Config) error {
+--- ignition-2.18.0.orig/internal/exec/stages/fetch/fetch.go
++++ ignition-2.18.0/internal/exec/stages/fetch/fetch.go
+@@ -19,12 +19,12 @@
+ package fetch
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ )
+ 
+ const (
+--- ignition-2.18.0.orig/internal/exec/stages/fetch_offline/fetch-offline.go
++++ ignition-2.18.0/internal/exec/stages/fetch_offline/fetch-offline.go
+@@ -22,14 +22,14 @@ import (
+ 	"net/url"
+ 	"reflect"
+ 
+-	cfgutil "github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	executil "github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
+-	"github.com/coreos/ignition/v2/internal/util"
++	cfgutil "github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	executil "github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/internal/util"
+ )
+ 
+ const (
+--- ignition-2.18.0.orig/internal/exec/stages/fetch_offline/fetch_offline_test.go
++++ ignition-2.18.0/internal/exec/stages/fetch_offline/fetch_offline_test.go
+@@ -17,8 +17,8 @@ package fetch_offline
+ import (
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ 
+ 	"github.com/stretchr/testify/assert"
+ )
+--- ignition-2.18.0.orig/internal/exec/stages/files/files.go
++++ ignition-2.18.0/internal/exec/stages/files/files.go
+@@ -20,13 +20,13 @@ import (
+ 	"os"
+ 	"path/filepath"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ )
+ 
+ const (
+--- ignition-2.18.0.orig/internal/exec/stages/files/files_test.go
++++ ignition-2.18.0/internal/exec/stages/files/files_test.go
+@@ -19,8 +19,8 @@ import (
+ 	"sort"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
+ )
+ 
+ func TestEntrySort(t *testing.T) {
+--- ignition-2.18.0.orig/internal/exec/stages/files/filesystemEntries.go
++++ ignition-2.18.0/internal/exec/stages/files/filesystemEntries.go
+@@ -24,11 +24,11 @@ import (
+ 	"strings"
+ 	"time"
+ 
+-	cutil "github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
++	cutil "github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ )
+@@ -459,7 +459,7 @@ func (s stage) getOrderedCreationList(co
+ 
+ 	// Append all the hard links to the list after sorting. This allows
+ 	// Ignition to create hard links to files that are deeper than the hard
+-	// link. For reference: https://github.com/coreos/ignition/issues/800
++	// link. For reference: https://github.com/flatcar/ignition/issues/800
+ 	entries = append(entries, hardlinks...)
+ 
+ 	return entries, nil
+--- ignition-2.18.0.orig/internal/exec/stages/files/passwd.go
++++ ignition-2.18.0/internal/exec/stages/files/passwd.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"path/filepath"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ func (s *stage) expandGlobList(globs ...string) ([]string, error) {
+--- ignition-2.18.0.orig/internal/exec/stages/files/units.go
++++ ignition-2.18.0/internal/exec/stages/files/units.go
+@@ -21,11 +21,11 @@ import (
+ 	"sort"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	cutil "github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/systemd"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	cutil "github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/systemd"
+ )
+ 
+ // Preset holds the information about
+@@ -45,7 +45,7 @@ func (s *stage) warnOnOldSystemdVersion(
+ 		return err
+ 	}
+ 	if systemdVersion < 240 {
+-		s.Logger.Warning("The version of systemd (%q) is less than 240. Enabling/disabling instantiated units may not work. See https://github.com/coreos/ignition/issues/586 for more information.", systemdVersion)
++		s.Logger.Warning("The version of systemd (%q) is less than 240. Enabling/disabling instantiated units may not work. See https://github.com/flatcar/ignition/issues/586 for more information.", systemdVersion)
+ 	}
+ 	return nil
+ }
+--- ignition-2.18.0.orig/internal/exec/stages/files/units_test.go
++++ ignition-2.18.0/internal/exec/stages/files/units_test.go
+@@ -18,8 +18,8 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ func TestParseInstanceUnit(t *testing.T) {
+--- ignition-2.18.0.orig/internal/exec/stages/kargs/kargs.go
++++ ignition-2.18.0/internal/exec/stages/kargs/kargs.go
+@@ -19,13 +19,13 @@ import (
+ 	"fmt"
+ 	"os/exec"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ )
+ 
+ const (
+--- ignition-2.18.0.orig/internal/exec/stages/mount/mount.go
++++ ignition-2.18.0/internal/exec/stages/mount/mount.go
+@@ -27,14 +27,14 @@ import (
+ 	"sort"
+ 	"strings"
+ 
+-	cutil "github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	cutil "github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ )
+ 
+ const (
+@@ -118,6 +118,11 @@ func (s stage) mountFs(fs types.Filesyst
+ 	// mount paths shouldn't include symlinks or other non-directories so we can use filepath.Join()
+ 	// instead of s.JoinPath(). Check that the resulting path is composed of only directories.
+ 	relpath := *fs.Path
++	// /usr/share/oem is now a symlink to /oem, so make sure we
++	// rather actually try to mount /oem
++	if relpath == "/usr/share/oem" && fs.Device == "/dev/disk/by-label/OEM" {
++		relpath = "/oem"
++	}
+ 	path := filepath.Join(s.DestDir, relpath)
+ 	if err := checkForNonDirectories(path); err != nil {
+ 		return err
+--- ignition-2.18.0.orig/internal/exec/stages/stages.go
++++ ignition-2.18.0/internal/exec/stages/stages.go
+@@ -15,11 +15,11 @@
+ package stages
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/registry"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/registry"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ )
+ 
+ // Stage is responsible for actually executing a stage of the configuration.
+--- ignition-2.18.0.orig/internal/exec/stages/umount/umount.go
++++ ignition-2.18.0/internal/exec/stages/umount/umount.go
+@@ -22,13 +22,13 @@ import (
+ 	"errors"
+ 	"sort"
+ 
+-	cutil "github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	cutil "github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ 
+ 	"golang.org/x/sys/unix"
+ )
+--- ignition-2.18.0.orig/internal/exec/util/blkid.go
++++ ignition-2.18.0/internal/exec/util/blkid.go
+@@ -33,7 +33,7 @@ import (
+ 	"strings"
+ 	"unsafe"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/util"
+ )
+ 
+ const (
+--- ignition-2.18.0.orig/internal/exec/util/file.go
++++ ignition-2.18.0/internal/exec/util/file.go
+@@ -26,11 +26,11 @@ import (
+ 	"strconv"
+ 	"syscall"
+ 
+-	cutil "github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/util"
++	cutil "github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/util"
+ 
+ 	"golang.org/x/sys/unix"
+ )
+--- ignition-2.18.0.orig/internal/exec/util/passwd.go
++++ ignition-2.18.0/internal/exec/util/passwd.go
+@@ -24,10 +24,10 @@ import (
+ 	"strings"
+ 
+ 	"github.com/coreos/go-systemd/v22/journal"
+-	"github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/as_user"
+-	"github.com/coreos/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/as_user"
++	"github.com/flatcar/ignition/v2/internal/distro"
+ 	"golang.org/x/sys/unix"
+ )
+ 
+--- ignition-2.18.0.orig/internal/exec/util/selinux.go
++++ ignition-2.18.0/internal/exec/util/selinux.go
+@@ -21,7 +21,7 @@ import (
+ 	"os/exec"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/distro"
+ )
+ 
+ const (
+--- ignition-2.18.0.orig/internal/exec/util/unit.go
++++ ignition-2.18.0/internal/exec/util/unit.go
+@@ -22,8 +22,8 @@ import (
+ 	"path/filepath"
+ 	"syscall"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ )
+--- ignition-2.18.0.orig/internal/exec/util/user_group_lookup_test.go
++++ ignition-2.18.0/internal/exec/util/user_group_lookup_test.go
+@@ -20,7 +20,7 @@ import (
+ 	"path/filepath"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/log"
+ )
+ 
+ // tempBase() slaps together a minimal /etc/{passwd,group} for the lookup test.
+--- ignition-2.18.0.orig/internal/exec/util/util.go
++++ ignition-2.18.0/internal/exec/util/util.go
+@@ -18,9 +18,9 @@ import (
+ 	"os"
+ 	"path/filepath"
+ 
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ )
+ 
+ // Util encapsulates logging and destdir indirection for the util methods.
+--- ignition-2.18.0.orig/internal/main.go
++++ ignition-2.18.0/internal/main.go
+@@ -22,15 +22,15 @@ import (
+ 	"path/filepath"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config"
+-	"github.com/coreos/ignition/v2/internal/apply"
+-	"github.com/coreos/ignition/v2/internal/exec"
+-	"github.com/coreos/ignition/v2/internal/exec/stages"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	_ "github.com/coreos/ignition/v2/internal/register"
+-	"github.com/coreos/ignition/v2/internal/state"
+-	"github.com/coreos/ignition/v2/internal/version"
++	"github.com/flatcar/ignition/v2/config"
++	"github.com/flatcar/ignition/v2/internal/apply"
++	"github.com/flatcar/ignition/v2/internal/exec"
++	"github.com/flatcar/ignition/v2/internal/exec/stages"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	_ "github.com/flatcar/ignition/v2/internal/register"
++	"github.com/flatcar/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/internal/version"
+ 	"github.com/spf13/pflag"
+ )
+ 
+--- ignition-2.18.0.orig/internal/platform/platform.go
++++ ignition-2.18.0/internal/platform/platform.go
+@@ -18,11 +18,11 @@ import (
+ 	"errors"
+ 	"fmt"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/registry"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	"github.com/coreos/ignition/v2/internal/state"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/registry"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/internal/state"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/aliyun/aliyun.go
++++ ignition-2.18.0/internal/providers/aliyun/aliyun.go
+@@ -20,10 +20,10 @@ package aliyun
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/applehv/applehv.go
++++ ignition-2.18.0/internal/providers/applehv/applehv.go
+@@ -22,11 +22,11 @@ import (
+ 	"net/http"
+ 	"os/exec"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/mdlayher/vsock"
+ )
+--- ignition-2.18.0.orig/internal/providers/aws/aws.go
++++ ignition-2.18.0/internal/providers/aws/aws.go
+@@ -22,11 +22,11 @@ import (
+ 	"net/http"
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/aws/aws-sdk-go/aws"
+ 	"github.com/aws/aws-sdk-go/aws/credentials/ec2rolecreds"
+@@ -98,7 +98,7 @@ func doInit(f *resource.Fetcher) error {
+ 	// every stage) but that would risk premature timeouts if the
+ 	// network takes a while to come up.
+ 	//
+-	// https://github.com/coreos/ignition/issues/1158
++	// https://github.com/flatcar/ignition/issues/1158
+ 	//
+ 	// TODO: investigate alternative solutions (adding a Retryer to the
+ 	// aws.Config, fetching the region from an HTTP URL, handle the
+--- ignition-2.18.0.orig/internal/providers/azure/azure.go
++++ ignition-2.18.0/internal/providers/azure/azure.go
+@@ -25,13 +25,13 @@ import (
+ 	"path/filepath"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	execUtil "github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	execUtil "github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ 	"golang.org/x/sys/unix"
+@@ -115,7 +115,7 @@ func fetchFromIMDS(f *resource.Fetcher)
+ 	// Azure IMDS expects some codes <500 to still be retried...
+ 	// Here, we match the cloud-init set.
+ 	// https://github.com/canonical/cloud-init/commit/c1a2047cf291
+-	// https://github.com/coreos/ignition/issues/1806
++	// https://github.com/flatcar/ignition/issues/1806
+ 	retryCodes := []int{
+ 		404, // not found
+ 		410, // gone
+--- ignition-2.18.0.orig/internal/providers/azurestack/azurestack.go
++++ ignition-2.18.0/internal/providers/azurestack/azurestack.go
+@@ -18,10 +18,10 @@
+ package azurestack
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/azure"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/azure"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 	"github.com/coreos/vcontext/report"
+ )
+ 
+--- ignition-2.18.0.orig/internal/providers/cloudstack/cloudstack.go
++++ ignition-2.18.0/internal/providers/cloudstack/cloudstack.go
+@@ -30,13 +30,13 @@ import (
+ 	"strings"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	ut "github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	ut "github.com/flatcar/ignition/v2/internal/util"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+@@ -56,7 +56,7 @@ func init() {
+ func fetchConfig(f *resource.Fetcher) (types.Config, report.Report, error) {
+ 	// The fetch-offline approach doesn't work well here because of the "split
+ 	// personality" of this provider. See:
+-	// https://github.com/coreos/ignition/issues/1081
++	// https://github.com/flatcar/ignition/issues/1081
+ 	if f.Offline {
+ 		return types.Config{}, report.Report{}, resource.ErrNeedNet
+ 	}
+--- ignition-2.18.0.orig/internal/providers/cmdline/cmdline.go
++++ ignition-2.18.0/internal/providers/cmdline/cmdline.go
+@@ -22,18 +22,20 @@ import (
+ 	"os"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+ 
+ const (
+-	cmdlineUrlFlag = "ignition.config.url"
++	cmdlineUrlFlagLegacyCoreOS = "coreos.config.url"
++	cmdlineUrlFlagLegacy       = "flatcar.config.url"
++	cmdlineUrlFlag             = "ignition.config.url"
+ )
+ 
+ var (
+@@ -91,7 +93,7 @@ func parseCmdline(cmdline []byte) (url s
+ 		parts := strings.SplitN(strings.TrimSpace(arg), "=", 2)
+ 		key := parts[0]
+ 
+-		if key != cmdlineUrlFlag {
++		if !(key == cmdlineUrlFlagLegacy || key == cmdlineUrlFlagLegacyCoreOS || key == cmdlineUrlFlag) {
+ 			continue
+ 		}
+ 
+--- ignition-2.18.0.orig/internal/providers/digitalocean/digitalocean.go
++++ ignition-2.18.0/internal/providers/digitalocean/digitalocean.go
+@@ -20,10 +20,10 @@ package digitalocean
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/exoscale/exoscale.go
++++ ignition-2.18.0/internal/providers/exoscale/exoscale.go
+@@ -20,10 +20,10 @@ package exoscale
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/file/file.go
++++ ignition-2.18.0/internal/providers/file/file.go
+@@ -17,10 +17,10 @@ package file
+ import (
+ 	"os"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/gcp/gcp.go
++++ ignition-2.18.0/internal/providers/gcp/gcp.go
+@@ -21,10 +21,10 @@ import (
+ 	"net/http"
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/hetzner/hetzner.go
++++ ignition-2.18.0/internal/providers/hetzner/hetzner.go
+@@ -20,10 +20,10 @@ package hetzner
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/hyperv/kvp.go
++++ ignition-2.18.0/internal/providers/hyperv/kvp.go
+@@ -20,12 +20,12 @@ import (
+ 	"path/filepath"
+ 
+ 	"github.com/containers/libhvee/pkg/kvp"
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 	"github.com/coreos/vcontext/report"
+ )
+ 
+--- ignition-2.18.0.orig/internal/providers/ibmcloud/ibmcloud.go
++++ ignition-2.18.0/internal/providers/ibmcloud/ibmcloud.go
+@@ -27,13 +27,13 @@ import (
+ 	"path/filepath"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	ut "github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	ut "github.com/flatcar/ignition/v2/internal/util"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/kubevirt/kubevirt.go
++++ ignition-2.18.0/internal/providers/kubevirt/kubevirt.go
+@@ -25,13 +25,13 @@ import (
+ 	"path/filepath"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	ut "github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	ut "github.com/flatcar/ignition/v2/internal/util"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/metal/metal.go
++++ ignition-2.18.0/internal/providers/metal/metal.go
+@@ -17,19 +17,35 @@
+ package metal
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+ 
+ func init() {
+ 	platform.Register(platform.Provider{
++		Name:  "cloudsigma",
++		Fetch: fetchConfig,
++	})
++	platform.Register(platform.Provider{
+ 		Name:  "metal",
+ 		Fetch: fetchConfig,
+ 	})
++	platform.Register(platform.Provider{
++		Name:  "rackspace",
++		Fetch: fetchConfig,
++	})
++	platform.Register(platform.Provider{
++		Name:  "rackspace-onmetal",
++		Fetch: fetchConfig,
++	})
++	platform.Register(platform.Provider{
++		Name:  "vagrant",
++		Fetch: fetchConfig,
++	})
+ }
+ 
+ func fetchConfig(f *resource.Fetcher) (types.Config, report.Report, error) {
+--- ignition-2.18.0.orig/internal/providers/nutanix/nutanix.go
++++ ignition-2.18.0/internal/providers/nutanix/nutanix.go
+@@ -25,13 +25,13 @@ import (
+ 	"path/filepath"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	ut "github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	ut "github.com/flatcar/ignition/v2/internal/util"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/openstack/openstack.go
++++ ignition-2.18.0/internal/providers/openstack/openstack.go
+@@ -28,13 +28,13 @@ import (
+ 	"path/filepath"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	ut "github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	ut "github.com/flatcar/ignition/v2/internal/util"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+@@ -66,7 +66,7 @@ func init() {
+ func fetchConfig(f *resource.Fetcher) (types.Config, report.Report, error) {
+ 	// The fetch-offline approach doesn't work well here because of the "split
+ 	// personality" of this provider. See:
+-	// https://github.com/coreos/ignition/issues/1081
++	// https://github.com/flatcar/ignition/issues/1081
+ 	if f.Offline {
+ 		return types.Config{}, report.Report{}, resource.ErrNeedNet
+ 	}
+--- ignition-2.18.0.orig/internal/providers/packet/packet.go
++++ ignition-2.18.0/internal/providers/packet/packet.go
+@@ -25,10 +25,10 @@ import (
+ 	"net/url"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/powervs/powervs.go
++++ ignition-2.18.0/internal/providers/powervs/powervs.go
+@@ -24,13 +24,13 @@ import (
+ 	"path/filepath"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
+-	ut "github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
++	ut "github.com/flatcar/ignition/v2/internal/util"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/qemu/qemu_blockdev.go
++++ ignition-2.18.0/internal/providers/qemu/qemu_blockdev.go
+@@ -27,12 +27,12 @@ import (
+ 	"os/exec"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/qemu/qemu_fwcfg.go
++++ ignition-2.18.0/internal/providers/qemu/qemu_fwcfg.go
+@@ -29,18 +29,21 @@ import (
+ 	"strings"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	iErrors "github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+ 
+-const (
+-	firmwareConfigPath     = "/sys/firmware/qemu_fw_cfg/by_name/opt/com.coreos/config/raw"
+-	firmwareConfigSizePath = "/sys/firmware/qemu_fw_cfg/by_name/opt/com.coreos/config/size"
++var (
++	firmwareConfigPaths = map[string]string{
++		"/sys/firmware/qemu_fw_cfg/by_name/opt/org.flatcar-linux/config/raw": "/sys/firmware/qemu_fw_cfg/by_name/opt/org.flatcar-linux/config/size",
++		"/sys/firmware/qemu_fw_cfg/by_name/opt/com.coreos/config/raw":        "/sys/firmware/qemu_fw_cfg/by_name/opt/com.coreos/config/size",
++	}
+ )
+ 
+ func init() {
+@@ -57,63 +60,68 @@ func fetchConfig(f *resource.Fetcher) (t
+ 		return types.Config{}, report.Report{}, err
+ 	}
+ 
+-	// get size of firmware blob, if it exists
+-	sizeBytes, err := os.ReadFile(firmwareConfigSizePath)
+-	if os.IsNotExist(err) {
+-		f.Logger.Info("QEMU firmware config was not found. Ignoring...")
+-		return util.ParseConfig(f.Logger, []byte{})
+-	} else if err != nil {
+-		f.Logger.Err("couldn't read QEMU firmware config size: %v", err)
+-		return types.Config{}, report.Report{}, err
+-	}
+-	size, err := strconv.Atoi(strings.TrimSpace(string(sizeBytes)))
+-	if err != nil {
+-		f.Logger.Err("couldn't parse QEMU firmware config size: %v", err)
+-		return types.Config{}, report.Report{}, err
+-	}
++	for cfg, size := range firmwareConfigPaths {
++		// get size of firmware blob, if it exists
++		sizeBytes, err := os.ReadFile(size)
++		if os.IsNotExist(err) {
++			f.Logger.Info("QEMU firmware config was not found. Ignoring...")
++			continue
++		} else if err != nil {
++			f.Logger.Err("couldn't read QEMU firmware config size: %v", err)
++			return types.Config{}, report.Report{}, err
++		}
++		size, err := strconv.Atoi(strings.TrimSpace(string(sizeBytes)))
++		if err != nil {
++			f.Logger.Err("couldn't parse QEMU firmware config size: %v", err)
++			return types.Config{}, report.Report{}, err
++		}
+ 
+-	// Read firmware blob.  We need to make as few, large read() calls as
+-	// possible, since the qemu_fw_cfg kernel module takes O(offset)
+-	// time for each read syscall.  os.ReadFile() would eventually
+-	// converge on the correct read size (one page) but we can do
+-	// better, and without reallocating.
+-	// Leave an extra guard byte to check for EOF
+-	data := make([]byte, 0, size+1)
+-	fh, err := os.Open(firmwareConfigPath)
+-	if err != nil {
+-		f.Logger.Err("couldn't open QEMU firmware config: %v", err)
+-		return types.Config{}, report.Report{}, err
+-	}
+-	defer fh.Close()
+-	lastReport := time.Now()
+-	reporting := false
+-	for len(data) < size {
+-		// if size is correct, we will never call this at an offset
+-		// where it would return io.EOF
+-		n, err := fh.Read(data[len(data):cap(data)])
++		// Read firmware blob.  We need to make as few, large read() calls as
++		// possible, since the qemu_fw_cfg kernel module takes O(offset)
++		// time for each read syscall.  os.ReadFile() would eventually
++		// converge on the correct read size (one page) but we can do
++		// better, and without reallocating.
++		// Leave an extra guard byte to check for EOF
++		data := make([]byte, 0, size+1)
++		fh, err := os.Open(cfg)
+ 		if err != nil {
+-			f.Logger.Err("couldn't read QEMU firmware config: %v", err)
++			f.Logger.Err("couldn't open QEMU firmware config: %v", err)
+ 			return types.Config{}, report.Report{}, err
+ 		}
+-		data = data[:len(data)+n]
+-		if !reporting && time.Since(lastReport).Seconds() >= 10 {
+-			f.Logger.Warning("Reading QEMU fw_cfg takes quadratic time. Consider moving large files or config fragments to a remote URL.")
+-			reporting = true
++		defer fh.Close()
++		lastReport := time.Now()
++		reporting := false
++		for len(data) < size {
++			// if size is correct, we will never call this at an offset
++			// where it would return io.EOF
++			n, err := fh.Read(data[len(data):cap(data)])
++			if err != nil {
++				f.Logger.Err("couldn't read QEMU firmware config: %v", err)
++				return types.Config{}, report.Report{}, err
++			}
++			data = data[:len(data)+n]
++			if !reporting && time.Since(lastReport).Seconds() >= 10 {
++				f.Logger.Warning("Reading QEMU fw_cfg takes quadratic time. Consider moving large files or config fragments to a remote URL.")
++				reporting = true
++			}
++			if reporting && (time.Since(lastReport).Seconds() >= 5 || len(data) >= size) {
++				f.Logger.Info("Reading config from QEMU fw_cfg: %d/%d KB", len(data)/1024, size/1024)
++				lastReport = time.Now()
++			}
+ 		}
+-		if reporting && (time.Since(lastReport).Seconds() >= 5 || len(data) >= size) {
+-			f.Logger.Info("Reading config from QEMU fw_cfg: %d/%d KB", len(data)/1024, size/1024)
+-			lastReport = time.Now()
++		if len(data) > size {
++			// overflowed into guard byte
++			f.Logger.Err("missing EOF reading QEMU firmware config")
++			return types.Config{}, report.Report{}, errors.New("missing EOF")
+ 		}
++		// If size is not at a page boundary, we know we're at EOF because
++		// the guard byte was not filled.  If size is at a page boundary,
++		// trust that firmwareConfigSizePath was telling the truth to avoid
++		// incurring an extra read call to check for EOF.  We're at the end
++		// of the file so the extra read would be maximally expensive.
++		return util.ParseConfig(f.Logger, data)
++
+ 	}
+-	if len(data) > size {
+-		// overflowed into guard byte
+-		f.Logger.Err("missing EOF reading QEMU firmware config")
+-		return types.Config{}, report.Report{}, errors.New("missing EOF")
+-	}
+-	// If size is not at a page boundary, we know we're at EOF because
+-	// the guard byte was not filled.  If size is at a page boundary,
+-	// trust that firmwareConfigSizePath was telling the truth to avoid
+-	// incurring an extra read call to check for EOF.  We're at the end
+-	// of the file so the extra read would be maximally expensive.
+-	return util.ParseConfig(f.Logger, data)
++	return types.Config{}, report.Report{}, iErrors.ErrEmpty
++
+ }
+--- ignition-2.18.0.orig/internal/providers/scaleway/scaleway.go
++++ ignition-2.18.0/internal/providers/scaleway/scaleway.go
+@@ -22,10 +22,10 @@ import (
+ 	"math/rand"
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/system/system.go
++++ ignition-2.18.0/internal/providers/system/system.go
+@@ -18,13 +18,13 @@ import (
+ 	"os"
+ 	"path/filepath"
+ 
+-	latest "github.com/coreos/ignition/v2/config/v3_5_experimental"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	latest "github.com/flatcar/ignition/v2/config/v3_5_experimental"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/util/config.go
++++ ignition-2.18.0/internal/providers/util/config.go
+@@ -18,9 +18,9 @@ import (
+ 	"crypto/sha512"
+ 	"encoding/hex"
+ 
+-	"github.com/coreos/ignition/v2/config"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/config"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/log"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/util/file.go
++++ ignition-2.18.0/internal/providers/util/file.go
+@@ -15,8 +15,8 @@
+ package util
+ 
+ import (
+-	"github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ )
+--- ignition-2.18.0.orig/internal/providers/virtualbox/virtualbox.go
++++ ignition-2.18.0/internal/providers/virtualbox/virtualbox.go
+@@ -31,11 +31,11 @@ import (
+ 	"fmt"
+ 	"unsafe"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/vmware/vmware_amd64.go
++++ ignition-2.18.0/internal/providers/vmware/vmware_amd64.go
+@@ -19,11 +19,12 @@ package vmware
+ 
+ import (
+ 	"fmt"
++	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ 	"github.com/vmware/vmw-guestinfo/rpcvmx"
+@@ -58,26 +59,83 @@ func fetchConfig(f *resource.Fetcher) (t
+ 		return types.Config{}, report.Report{}, platform.ErrNoProvider
+ 	}
+ 
+-	config, err := fetchRawConfig(f)
++	config, err := fetchDataConfig(f)
++	if err == nil && len(config) == 0 {
++		config, err = fetchUrlConfig(f)
++	}
+ 	if err != nil {
+ 		return types.Config{}, report.Report{}, err
+ 	}
+ 
+-	decodedData, err := decodeConfig(config)
++	f.Logger.Debug("config successfully fetched")
++	return util.ParseConfig(f.Logger, config)
++}
++
++func fetchDataConfig(f *resource.Fetcher) ([]byte, error) {
++	var data string
++	var encoding string
++	var err error
++
++	data, err = getVariable(f, "ignition.config.data")
++	if err == nil && data != "" {
++		encoding, _ = getVariable(f, "ignition.config.data.encoding")
++	} else {
++		data, _ = getVariable(f, "coreos.config.data")
++		if err == nil && data != "" {
++			encoding, _ = getVariable(f, "coreos.config.data.encoding")
++		}
++	}
++	// Do not check against err from "encoding" because leaving it empty is ok
++	if data == "" {
++		f.Logger.Debug("failed to fetch config")
++		return []byte{}, nil
++	}
++
++	decodedData, err := decodeConfig(config{
++		data:     data,
++		encoding: encoding,
++	})
+ 	if err != nil {
+ 		f.Logger.Debug("failed to decode config: %v", err)
+-		return types.Config{}, report.Report{}, err
++		return nil, err
+ 	}
+ 
+-	f.Logger.Debug("config successfully fetched")
+-	return util.ParseConfig(f.Logger, decodedData)
++	return decodedData, nil
++}
++
++func fetchUrlConfig(f *resource.Fetcher) ([]byte, error) {
++	rawUrl, err := getVariable(f, "ignition.config.url")
++	if err != nil || rawUrl == "" {
++		rawUrl, err = getVariable(f, "coreos.config.url")
++	}
++	if err != nil || rawUrl == "" {
++		f.Logger.Info("no config URL provided")
++		return []byte{}, nil
++	}
++
++	f.Logger.Debug("found url: %q", rawUrl)
++
++	url, err := url.Parse(rawUrl)
++	if err != nil {
++		f.Logger.Err("failed to parse url: %v", err)
++		return nil, err
++	}
++	if url == nil {
++		return []byte{}, nil
++	}
++
++	data, err := f.FetchToBuffer(*url, resource.FetchOptions{})
++	if err != nil {
++		return nil, err
++	}
++
++	return data, nil
+ }
+ 
+-func fetchRawConfig(f *resource.Fetcher) (config, error) {
++func getVariable(f *resource.Fetcher, key string) (string, error) {
+ 	info := rpcvmx.NewConfig()
+ 
+ 	var ovfData string
+-	var ovfEncoding string
+ 
+ 	ovfEnv, err := info.String(GUESTINFO_OVF, "")
+ 	if err != nil {
+@@ -87,28 +145,19 @@ func fetchRawConfig(f *resource.Fetcher)
+ 		env, err := ReadOvfEnvironment([]byte(ovfEnv))
+ 		if err != nil {
+ 			f.Logger.Warning("failed to parse OVF environment: %v. Continuing...", err)
++		} else {
++			ovfData = env.Properties["guestinfo."+key]
+ 		}
+-
+-		ovfData = env.Properties[OVF_USERDATA]
+-		ovfEncoding = env.Properties[OVF_USERDATA_ENCODING]
+-	}
+-
+-	data, err := info.String(GUESTINFO_USERDATA, ovfData)
+-	if err != nil {
+-		f.Logger.Debug("failed to fetch config: %v", err)
+-		return config{}, err
+ 	}
+ 
+-	encoding, err := info.String(GUESTINFO_USERDATA_ENCODING, ovfEncoding)
++	// The guest variables get preference over the ovfenv variables which are given here as fallback
++	data, err := info.String(key, ovfData)
+ 	if err != nil {
+ 		f.Logger.Debug("failed to fetch config encoding: %v", err)
+-		return config{}, err
++		return ovfData, err
+ 	}
+ 
+-	return config{
+-		data:     data,
+-		encoding: encoding,
+-	}, nil
++	return data, nil
+ }
+ 
+ func delConfig(f *resource.Fetcher) error {
+--- ignition-2.18.0.orig/internal/providers/vmware/vmware_unsupported.go
++++ ignition-2.18.0/internal/providers/vmware/vmware_unsupported.go
+@@ -23,9 +23,9 @@ package vmware
+ import (
+ 	"errors"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/vultr/vultr.go
++++ ignition-2.18.0/internal/providers/vultr/vultr.go
+@@ -21,10 +21,10 @@ package vultr
+ import (
+ 	"net/url"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 
+ 	"github.com/coreos/vcontext/report"
+ )
+--- ignition-2.18.0.orig/internal/providers/zvm/zvm.go
++++ ignition-2.18.0/internal/providers/zvm/zvm.go
+@@ -24,13 +24,13 @@ import (
+ 	"os/exec"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/platform"
+-	"github.com/coreos/ignition/v2/internal/providers/util"
+-	"github.com/coreos/ignition/v2/internal/resource"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/platform"
++	"github.com/flatcar/ignition/v2/internal/providers/util"
++	"github.com/flatcar/ignition/v2/internal/resource"
+ 	"github.com/coreos/vcontext/report"
+ )
+ 
+--- ignition-2.18.0.orig/internal/register/providers.go
++++ ignition-2.18.0/internal/register/providers.go
+@@ -15,29 +15,29 @@
+ package register
+ 
+ import (
+-	_ "github.com/coreos/ignition/v2/internal/providers/aliyun"
+-	_ "github.com/coreos/ignition/v2/internal/providers/applehv"
+-	_ "github.com/coreos/ignition/v2/internal/providers/aws"
+-	_ "github.com/coreos/ignition/v2/internal/providers/azure"
+-	_ "github.com/coreos/ignition/v2/internal/providers/azurestack"
+-	_ "github.com/coreos/ignition/v2/internal/providers/cloudstack"
+-	_ "github.com/coreos/ignition/v2/internal/providers/digitalocean"
+-	_ "github.com/coreos/ignition/v2/internal/providers/exoscale"
+-	_ "github.com/coreos/ignition/v2/internal/providers/file"
+-	_ "github.com/coreos/ignition/v2/internal/providers/gcp"
+-	_ "github.com/coreos/ignition/v2/internal/providers/hetzner"
+-	_ "github.com/coreos/ignition/v2/internal/providers/hyperv"
+-	_ "github.com/coreos/ignition/v2/internal/providers/ibmcloud"
+-	_ "github.com/coreos/ignition/v2/internal/providers/kubevirt"
+-	_ "github.com/coreos/ignition/v2/internal/providers/metal"
+-	_ "github.com/coreos/ignition/v2/internal/providers/nutanix"
+-	_ "github.com/coreos/ignition/v2/internal/providers/openstack"
+-	_ "github.com/coreos/ignition/v2/internal/providers/packet"
+-	_ "github.com/coreos/ignition/v2/internal/providers/powervs"
+-	_ "github.com/coreos/ignition/v2/internal/providers/qemu"
+-	_ "github.com/coreos/ignition/v2/internal/providers/scaleway"
+-	_ "github.com/coreos/ignition/v2/internal/providers/virtualbox"
+-	_ "github.com/coreos/ignition/v2/internal/providers/vmware"
+-	_ "github.com/coreos/ignition/v2/internal/providers/vultr"
+-	_ "github.com/coreos/ignition/v2/internal/providers/zvm"
++	_ "github.com/flatcar/ignition/v2/internal/providers/aliyun"
++	_ "github.com/flatcar/ignition/v2/internal/providers/applehv"
++	_ "github.com/flatcar/ignition/v2/internal/providers/aws"
++	_ "github.com/flatcar/ignition/v2/internal/providers/azure"
++	_ "github.com/flatcar/ignition/v2/internal/providers/azurestack"
++	_ "github.com/flatcar/ignition/v2/internal/providers/cloudstack"
++	_ "github.com/flatcar/ignition/v2/internal/providers/digitalocean"
++	_ "github.com/flatcar/ignition/v2/internal/providers/exoscale"
++	_ "github.com/flatcar/ignition/v2/internal/providers/file"
++	_ "github.com/flatcar/ignition/v2/internal/providers/gcp"
++	_ "github.com/flatcar/ignition/v2/internal/providers/hetzner"
++	_ "github.com/flatcar/ignition/v2/internal/providers/hyperv"
++	_ "github.com/flatcar/ignition/v2/internal/providers/ibmcloud"
++	_ "github.com/flatcar/ignition/v2/internal/providers/kubevirt"
++	_ "github.com/flatcar/ignition/v2/internal/providers/metal"
++	_ "github.com/flatcar/ignition/v2/internal/providers/nutanix"
++	_ "github.com/flatcar/ignition/v2/internal/providers/openstack"
++	_ "github.com/flatcar/ignition/v2/internal/providers/packet"
++	_ "github.com/flatcar/ignition/v2/internal/providers/powervs"
++	_ "github.com/flatcar/ignition/v2/internal/providers/qemu"
++	_ "github.com/flatcar/ignition/v2/internal/providers/scaleway"
++	_ "github.com/flatcar/ignition/v2/internal/providers/virtualbox"
++	_ "github.com/flatcar/ignition/v2/internal/providers/vmware"
++	_ "github.com/flatcar/ignition/v2/internal/providers/vultr"
++	_ "github.com/flatcar/ignition/v2/internal/providers/zvm"
+ )
+--- ignition-2.18.0.orig/internal/register/stages.go
++++ ignition-2.18.0/internal/register/stages.go
+@@ -15,11 +15,11 @@
+ package register
+ 
+ import (
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/disks"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/fetch"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/fetch_offline"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/files"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/kargs"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/mount"
+-	_ "github.com/coreos/ignition/v2/internal/exec/stages/umount"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/disks"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/fetch"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/fetch_offline"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/files"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/kargs"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/mount"
++	_ "github.com/flatcar/ignition/v2/internal/exec/stages/umount"
+ )
+--- ignition-2.18.0.orig/internal/resource/http.go
++++ ignition-2.18.0/internal/resource/http.go
+@@ -28,12 +28,12 @@ import (
+ 	"strings"
+ 	"time"
+ 
+-	ignerrors "github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/earlyrand"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/util"
+-	"github.com/coreos/ignition/v2/internal/version"
++	ignerrors "github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/earlyrand"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/internal/version"
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ 
+--- ignition-2.18.0.orig/internal/resource/url.go
++++ ignition-2.18.0/internal/resource/url.go
+@@ -23,19 +23,23 @@ import (
+ 	"fmt"
+ 	"hash"
+ 	"io"
++	"io/ioutil"
+ 	"net"
+ 	"net/http"
+ 	"net/url"
+ 	"os"
++	"path/filepath"
+ 	"strings"
+ 	"syscall"
+ 	"time"
+ 
+ 	"cloud.google.com/go/compute/metadata"
+ 	"cloud.google.com/go/storage"
+-	configErrors "github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/util"
++	configErrors "github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/systemd"
++	"github.com/flatcar/ignition/v2/internal/util"
+ 	"golang.org/x/oauth2/google"
+ 	"google.golang.org/api/option"
+ 
+@@ -154,6 +158,8 @@ func (f *Fetcher) FetchToBuffer(u url.UR
+ 		err = f.fetchFromTFTP(u, dest, opts)
+ 	case "data":
+ 		err = f.fetchFromDataURL(u, dest, opts)
++	case "oem":
++		err = f.fetchFromOEM(u, dest, opts)
+ 	case "s3", "arn":
+ 		buf := &s3buf{
+ 			WriteAtBuffer: aws.NewWriteAtBuffer([]byte{}),
+@@ -215,6 +221,8 @@ func (f *Fetcher) Fetch(u url.URL, dest
+ 		return f.fetchFromTFTP(u, dest, opts)
+ 	case "data":
+ 		return f.fetchFromDataURL(u, dest, opts)
++	case "oem":
++		return f.fetchFromOEM(u, dest, opts)
+ 	case "s3", "arn":
+ 		return f.fetchFromS3(u, dest, opts)
+ 	case "gs":
+@@ -423,6 +431,53 @@ type s3target interface {
+ 	io.ReadSeeker
+ }
+ 
++// FetchFromOEM gets data off the oem partition as described by u and writes it
++// into dest, returning an error if one is encountered.
++func (f *Fetcher) fetchFromOEM(u url.URL, dest io.Writer, opts FetchOptions) error {
++	path := filepath.Clean(u.Path)
++	if !filepath.IsAbs(path) {
++		f.Logger.Err("oem path is not absolute: %q", u.Path)
++		return ErrPathNotAbsolute
++	}
++
++	// check if present in OEM lookaside dir, if so use it.
++	absPath := filepath.Join(distro.OEMLookasideDir(), path)
++
++	if fi, err := os.Open(absPath); err == nil {
++		defer fi.Close()
++		return f.decompressCopyHashAndVerify(dest, fi, opts)
++	} else if !os.IsNotExist(err) {
++		f.Logger.Err("failed to read oem config: %v", err)
++		return ErrFailed
++	}
++
++	f.Logger.Info("oem config not found in %q, looking on oem partition",
++		distro.OEMLookasideDir())
++
++	oemMountPath, err := ioutil.TempDir("/mnt", "oem")
++	if err != nil {
++		f.Logger.Err("failed to create mount path for oem partition: %v", err)
++		return ErrFailed
++	}
++	// try oemMountPath, requires mounting it.
++	if err := f.mountOEM(oemMountPath); err != nil {
++		f.Logger.Err("failed to mount oem partition: %v", err)
++		return ErrFailed
++	}
++	defer os.Remove(oemMountPath)
++	defer f.umountOEM(oemMountPath)
++
++	absPath = filepath.Join(oemMountPath, path)
++	fi, err := os.Open(absPath)
++	if err != nil {
++		f.Logger.Err("failed to read oem config: %v", err)
++		return ErrFailed
++	}
++	defer fi.Close()
++
++	return f.decompressCopyHashAndVerify(dest, fi, opts)
++}
++
+ // FetchFromS3 gets data from an S3 bucket as described by u and writes it into
+ // dest, returning an error if one is encountered. It will attempt to acquire
+ // IAM credentials from the EC2 metadata service, and if this fails will attempt
+@@ -650,3 +705,48 @@ func (f *Fetcher) parseARN(arnURL string
+ 	key := strings.Join(urlSplit[1:], "/")
+ 	return bucket, key, "", regionHint, nil
+ }
++
++// mountOEM waits for the presence of and mounts the oem partition at
++// oemMountPath. oemMountPath will be created if it does not exist.
++func (f *Fetcher) mountOEM(oemMountPath string) error {
++	dev := []string{distro.OEMDevicePath()}
++	if err := systemd.WaitOnDevices(context.Background(), dev, "oem-cmdline"); err != nil {
++		f.Logger.Err("failed to wait for oem device: %v", err)
++		return err
++	}
++
++	if err := os.MkdirAll(oemMountPath, 0700); err != nil {
++		f.Logger.Err("failed to create oem mount point: %v", err)
++		return err
++	}
++
++	if err := f.Logger.LogOp(
++		func() error {
++			return syscall.Mount(dev[0], oemMountPath, "ext4", 0, "")
++		},
++		"mounting %q at %q", distro.OEMDevicePath(), oemMountPath,
++	); err != nil {
++		f.Logger.Err("failed to mount ext4 device %q at %q, trying btrfs: %v",
++			distro.OEMDevicePath(), oemMountPath, err)
++		if err := f.Logger.LogOp(
++			func() error {
++				return syscall.Mount(dev[0], oemMountPath, "btrfs", 0, "")
++			},
++			"mounting %q at %q", distro.OEMDevicePath(), oemMountPath,
++		); err != nil {
++			return fmt.Errorf("failed to mount btrfs device %q at %q: %v",
++				distro.OEMDevicePath(), oemMountPath, err)
++		}
++	}
++
++	return nil
++}
++
++// umountOEM unmounts the oem partition at oemMountPath.
++func (f *Fetcher) umountOEM(oemMountPath string) {
++	// ignore the error for the linter
++	_ = f.Logger.LogOp(
++		func() error { return syscall.Unmount(oemMountPath, 0) },
++		"unmounting %q", oemMountPath,
++	)
++}
+--- ignition-2.18.0.orig/internal/resource/url_test.go
++++ ignition-2.18.0/internal/resource/url_test.go
+@@ -23,9 +23,9 @@ import (
+ 
+ 	"github.com/stretchr/testify/assert"
+ 
+-	"github.com/coreos/ignition/v2/config/shared/errors"
+-	"github.com/coreos/ignition/v2/internal/log"
+-	"github.com/coreos/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/config/shared/errors"
++	"github.com/flatcar/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/internal/util"
+ )
+ 
+ func TestDataUrl(t *testing.T) {
+--- ignition-2.18.0.orig/internal/sgdisk/sgdisk.go
++++ ignition-2.18.0/internal/sgdisk/sgdisk.go
+@@ -19,10 +19,10 @@ import (
+ 	"io"
+ 	"os/exec"
+ 
+-	"github.com/coreos/ignition/v2/config/util"
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/internal/distro"
+-	"github.com/coreos/ignition/v2/internal/log"
++	"github.com/flatcar/ignition/v2/config/util"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/internal/distro"
++	"github.com/flatcar/ignition/v2/internal/log"
+ )
+ 
+ type Operation struct {
+@@ -121,6 +121,11 @@ func (op *Operation) Commit() error {
+ 	if _, err := op.logger.LogCmd(cmd, "deleting %d partitions and creating %d partitions on %q", len(op.deletions), len(op.parts), op.dev); err != nil {
+ 		return fmt.Errorf("create partitions failed: %v", err)
+ 	}
++	// In contrast to similar tools, sgdisk does not trigger the update of the kernel partition table
++	cmd = exec.Command(distro.PartprobeCmd(), op.dev)
++	if _, err := op.logger.LogCmd(cmd, "re-reading of %d deleted partitions and %d created partitions on %q", len(op.deletions), len(op.parts), op.dev); err != nil {
++		return fmt.Errorf("re-reading partitions failed: %v", err)
++	}
+ 
+ 	return nil
+ }
+--- ignition-2.18.0.orig/internal/state/state.go
++++ ignition-2.18.0/internal/state/state.go
+@@ -20,7 +20,7 @@ import (
+ 	"os"
+ 	"path/filepath"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ type State struct {
+--- ignition-2.18.0.orig/internal/util/tools/docs/docs.go
++++ ignition-2.18.0/internal/util/tools/docs/docs.go
+@@ -24,7 +24,7 @@ import (
+ 	"path/filepath"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config"
++	"github.com/flatcar/ignition/v2/config"
+ )
+ 
+ // Specific section marker used in the docs to indicate that the Markdown code
+--- ignition-2.18.0.orig/internal/util/verification.go
++++ ignition-2.18.0/internal/util/verification.go
+@@ -23,7 +23,7 @@ import (
+ 	"hash"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ var (
+--- ignition-2.18.0.orig/internal/util/verification_test.go
++++ ignition-2.18.0/internal/util/verification_test.go
+@@ -18,7 +18,7 @@ import (
+ 	"reflect"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
+ )
+ 
+ func TestAssertValid(t *testing.T) {
+--- ignition-2.18.0.orig/tests/blackbox_test.go
++++ ignition-2.18.0/tests/blackbox_test.go
+@@ -25,13 +25,13 @@ import (
+ 	"testing"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/config"
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/servers"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/config"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/servers"
++	"github.com/flatcar/ignition/v2/tests/types"
+ 
+ 	// Register the tests
+-	_ "github.com/coreos/ignition/v2/tests/registry"
++	_ "github.com/flatcar/ignition/v2/tests/registry"
+ 
+ 	// UUID generation tool
+ 	"github.com/google/uuid"
+--- ignition-2.18.0.orig/tests/filesystem.go
++++ ignition-2.18.0/tests/filesystem.go
+@@ -30,8 +30,8 @@ import (
+ 	"strings"
+ 	"testing"
+ 
+-	ut "github.com/coreos/ignition/v2/internal/util"
+-	"github.com/coreos/ignition/v2/tests/types"
++	ut "github.com/flatcar/ignition/v2/internal/util"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func run(ctx context.Context, command string, args ...string) ([]byte, error) {
+--- ignition-2.18.0.orig/tests/negative/files/invalid_hash.go
++++ ignition-2.18.0/tests/negative/files/invalid_hash.go
+@@ -15,8 +15,8 @@
+ package files
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/files/link.go
++++ ignition-2.18.0/tests/negative/files/link.go
+@@ -15,8 +15,8 @@
+ package files
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/files/missing_file.go
++++ ignition-2.18.0/tests/negative/files/missing_file.go
+@@ -15,8 +15,8 @@
+ package files
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/files/preexisting_nodes.go
++++ ignition-2.18.0/tests/negative/files/preexisting_nodes.go
+@@ -15,8 +15,8 @@
+ package files
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/filesystems/creation.go
++++ ignition-2.18.0/tests/negative/filesystems/creation.go
+@@ -15,8 +15,8 @@
+ package filesystems
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/filesystems/mount_filesystem.go
++++ ignition-2.18.0/tests/negative/filesystems/mount_filesystem.go
+@@ -15,8 +15,8 @@
+ package filesystems
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/filesystems/no_device.go
++++ ignition-2.18.0/tests/negative/filesystems/no_device.go
+@@ -15,8 +15,8 @@
+ package filesystems
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/filesystems/symlinks.go
++++ ignition-2.18.0/tests/negative/filesystems/symlinks.go
+@@ -15,8 +15,8 @@
+ package filesystems
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/general/config.go
++++ ignition-2.18.0/tests/negative/general/config.go
+@@ -17,8 +17,8 @@ package general
+ import (
+ 	"fmt"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ )
+--- ignition-2.18.0.orig/tests/negative/partitions/simple.go
++++ ignition-2.18.0/tests/negative/partitions/simple.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/partitions/zeroes.go
++++ ignition-2.18.0/tests/negative/partitions/zeroes.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/proxy/http.go
++++ ignition-2.18.0/tests/negative/proxy/http.go
+@@ -19,8 +19,8 @@ import (
+ 	"net/http"
+ 	"net/http/httptest"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ var (
+--- ignition-2.18.0.orig/tests/negative/regression/filesystem.go
++++ ignition-2.18.0/tests/negative/regression/filesystem.go
+@@ -15,8 +15,8 @@
+ package regression
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/security/tls.go
++++ ignition-2.18.0/tests/negative/security/tls.go
+@@ -22,9 +22,9 @@ import (
+ 	"net/http"
+ 	"net/http/httptest"
+ 
+-	"github.com/coreos/ignition/v2/tests/fixtures"
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/fixtures"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/negative/timeouts/timeouts.go
++++ ignition-2.18.0/tests/negative/timeouts/timeouts.go
+@@ -20,8 +20,8 @@ import (
+ 	"net/http/httptest"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/files/directory.go
++++ ignition-2.18.0/tests/positive/files/directory.go
+@@ -15,8 +15,8 @@
+ package files
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/files/file.go
++++ ignition-2.18.0/tests/positive/files/file.go
+@@ -15,8 +15,8 @@
+ package files
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/files/hash.go
++++ ignition-2.18.0/tests/positive/files/hash.go
+@@ -17,9 +17,9 @@ package files
+ import (
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/servers"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/servers"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/files/link.go
++++ ignition-2.18.0/tests/positive/files/link.go
+@@ -15,8 +15,8 @@
+ package files
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+@@ -364,7 +364,7 @@ func ForceHardLinkCreation() types.Test
+ 
+ // CreateDeepHardLinkToFile checks if Ignition can create a hard
+ // link to a file that's deeper than the hard link. For more
+-// information: https://github.com/coreos/ignition/issues/800
++// information: https://github.com/flatcar/ignition/issues/800
+ func CreateDeepHardLinkToFile() types.Test {
+ 	name := "links.hard.deep.create.file"
+ 	in := types.GetBaseDisk()
+--- ignition-2.18.0.orig/tests/positive/files/remote.go
++++ ignition-2.18.0/tests/positive/files/remote.go
+@@ -17,9 +17,9 @@ package files
+ import (
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/servers"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/servers"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/files/units.go
++++ ignition-2.18.0/tests/positive/files/units.go
+@@ -15,8 +15,8 @@
+ package files
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/filesystems/creation.go
++++ ignition-2.18.0/tests/positive/filesystems/creation.go
+@@ -17,8 +17,8 @@ package filesystems
+ import (
+ 	"fmt"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/filesystems/mount_filesystem.go
++++ ignition-2.18.0/tests/positive/filesystems/mount_filesystem.go
+@@ -15,8 +15,8 @@
+ package filesystems
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/filesystems/reformat_filesystem.go
++++ ignition-2.18.0/tests/positive/filesystems/reformat_filesystem.go
+@@ -15,9 +15,9 @@
+ package filesystems
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/fixtures"
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/fixtures"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/filesystems/reuse_filesystem.go
++++ ignition-2.18.0/tests/positive/filesystems/reuse_filesystem.go
+@@ -15,9 +15,9 @@
+ package filesystems
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/fixtures"
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/fixtures"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/general/baseconfigsmerging.go
++++ ignition-2.18.0/tests/positive/general/baseconfigsmerging.go
+@@ -15,8 +15,8 @@
+ package general
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/general/general.go
++++ ignition-2.18.0/tests/positive/general/general.go
+@@ -17,9 +17,9 @@ package general
+ import (
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/servers"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/servers"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/general/preemption.go
++++ ignition-2.18.0/tests/positive/general/preemption.go
+@@ -18,8 +18,8 @@ import (
+ 	"fmt"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/partitions/complex-mb.go
++++ ignition-2.18.0/tests/positive/partitions/complex-mb.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/partitions/creation-mb.go
++++ ignition-2.18.0/tests/positive/partitions/creation-mb.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/partitions/deletion.go
++++ ignition-2.18.0/tests/positive/partitions/deletion.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/partitions/mixed.go
++++ ignition-2.18.0/tests/positive/partitions/mixed.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/partitions/no-op.go
++++ ignition-2.18.0/tests/positive/partitions/no-op.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/partitions/verification.go
++++ ignition-2.18.0/tests/positive/partitions/verification.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/partitions/wipe.go
++++ ignition-2.18.0/tests/positive/partitions/wipe.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/partitions/zeros.go
++++ ignition-2.18.0/tests/positive/partitions/zeros.go
+@@ -15,8 +15,8 @@
+ package partitions
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/passwd/users.go
++++ ignition-2.18.0/tests/positive/passwd/users.go
+@@ -15,8 +15,8 @@
+ package passwd
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/proxy/http.go
++++ ignition-2.18.0/tests/positive/proxy/http.go
+@@ -19,8 +19,8 @@ import (
+ 	"net/http"
+ 	"net/http/httptest"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ var (
+--- ignition-2.18.0.orig/tests/positive/regression/filesystem.go
++++ ignition-2.18.0/tests/positive/regression/filesystem.go
+@@ -15,8 +15,8 @@
+ package regression
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/security/tls.go
++++ ignition-2.18.0/tests/positive/security/tls.go
+@@ -20,10 +20,10 @@ import (
+ 	"net/http"
+ 	"net/http/httptest"
+ 
+-	"github.com/coreos/ignition/v2/tests/fixtures"
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/servers"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/fixtures"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/servers"
++	"github.com/flatcar/ignition/v2/tests/types"
+ 
+ 	"github.com/vincent-petithory/dataurl"
+ )
+--- ignition-2.18.0.orig/tests/positive/systemd/create_unit.go
++++ ignition-2.18.0/tests/positive/systemd/create_unit.go
+@@ -15,8 +15,8 @@
+ package systemd
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/systemd/modify_service.go
++++ ignition-2.18.0/tests/positive/systemd/modify_service.go
+@@ -15,8 +15,8 @@
+ package systemd
+ 
+ import (
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/positive/timeouts/timeouts.go
++++ ignition-2.18.0/tests/positive/timeouts/timeouts.go
+@@ -21,8 +21,8 @@ import (
+ 	"sync"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/tests/register"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/tests/register"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ func init() {
+--- ignition-2.18.0.orig/tests/register/register.go
++++ ignition-2.18.0/tests/register/register.go
+@@ -16,13 +16,13 @@ package register
+ 
+ import (
+ 	"github.com/coreos/go-semver/semver"
+-	types30 "github.com/coreos/ignition/v2/config/v3_0/types"
+-	types31 "github.com/coreos/ignition/v2/config/v3_1/types"
+-	types32 "github.com/coreos/ignition/v2/config/v3_2/types"
+-	types33 "github.com/coreos/ignition/v2/config/v3_3/types"
+-	types34 "github.com/coreos/ignition/v2/config/v3_4/types"
+-	types_exp "github.com/coreos/ignition/v2/config/v3_5_experimental/types"
+-	"github.com/coreos/ignition/v2/tests/types"
++	types30 "github.com/flatcar/ignition/v2/config/v3_0/types"
++	types31 "github.com/flatcar/ignition/v2/config/v3_1/types"
++	types32 "github.com/flatcar/ignition/v2/config/v3_2/types"
++	types33 "github.com/flatcar/ignition/v2/config/v3_3/types"
++	types34 "github.com/flatcar/ignition/v2/config/v3_4/types"
++	types_exp "github.com/flatcar/ignition/v2/config/v3_5_experimental/types"
++	"github.com/flatcar/ignition/v2/tests/types"
+ )
+ 
+ type TestType int
+--- ignition-2.18.0.orig/tests/registry/registry.go
++++ ignition-2.18.0/tests/registry/registry.go
+@@ -16,22 +16,22 @@ package registry
+ 
+ // Done to import the tests
+ import (
+-	_ "github.com/coreos/ignition/v2/tests/negative/files"
+-	_ "github.com/coreos/ignition/v2/tests/negative/filesystems"
+-	_ "github.com/coreos/ignition/v2/tests/negative/general"
+-	_ "github.com/coreos/ignition/v2/tests/negative/partitions"
+-	_ "github.com/coreos/ignition/v2/tests/negative/proxy"
+-	_ "github.com/coreos/ignition/v2/tests/negative/regression"
+-	_ "github.com/coreos/ignition/v2/tests/negative/security"
+-	_ "github.com/coreos/ignition/v2/tests/negative/timeouts"
+-	_ "github.com/coreos/ignition/v2/tests/positive/files"
+-	_ "github.com/coreos/ignition/v2/tests/positive/filesystems"
+-	_ "github.com/coreos/ignition/v2/tests/positive/general"
+-	_ "github.com/coreos/ignition/v2/tests/positive/partitions"
+-	_ "github.com/coreos/ignition/v2/tests/positive/passwd"
+-	_ "github.com/coreos/ignition/v2/tests/positive/proxy"
+-	_ "github.com/coreos/ignition/v2/tests/positive/regression"
+-	_ "github.com/coreos/ignition/v2/tests/positive/security"
+-	_ "github.com/coreos/ignition/v2/tests/positive/systemd"
+-	_ "github.com/coreos/ignition/v2/tests/positive/timeouts"
++	_ "github.com/flatcar/ignition/v2/tests/negative/files"
++	_ "github.com/flatcar/ignition/v2/tests/negative/filesystems"
++	_ "github.com/flatcar/ignition/v2/tests/negative/general"
++	_ "github.com/flatcar/ignition/v2/tests/negative/partitions"
++	_ "github.com/flatcar/ignition/v2/tests/negative/proxy"
++	_ "github.com/flatcar/ignition/v2/tests/negative/regression"
++	_ "github.com/flatcar/ignition/v2/tests/negative/security"
++	_ "github.com/flatcar/ignition/v2/tests/negative/timeouts"
++	_ "github.com/flatcar/ignition/v2/tests/positive/files"
++	_ "github.com/flatcar/ignition/v2/tests/positive/filesystems"
++	_ "github.com/flatcar/ignition/v2/tests/positive/general"
++	_ "github.com/flatcar/ignition/v2/tests/positive/partitions"
++	_ "github.com/flatcar/ignition/v2/tests/positive/passwd"
++	_ "github.com/flatcar/ignition/v2/tests/positive/proxy"
++	_ "github.com/flatcar/ignition/v2/tests/positive/regression"
++	_ "github.com/flatcar/ignition/v2/tests/positive/security"
++	_ "github.com/flatcar/ignition/v2/tests/positive/systemd"
++	_ "github.com/flatcar/ignition/v2/tests/positive/timeouts"
+ )
+--- ignition-2.18.0.orig/tests/servers/servers.go
++++ ignition-2.18.0/tests/servers/servers.go
+@@ -27,7 +27,7 @@ import (
+ 	"strings"
+ 	"time"
+ 
+-	"github.com/coreos/ignition/v2/tests/fixtures"
++	"github.com/flatcar/ignition/v2/tests/fixtures"
+ 	"github.com/pin/tftp"
+ )
+ 
+--- ignition-2.18.0.orig/tests/validator.go
++++ ignition-2.18.0/tests/validator.go
+@@ -25,8 +25,8 @@ import (
+ 	"strings"
+ 	"testing"
+ 
+-	"github.com/coreos/ignition/v2/internal/exec/util"
+-	"github.com/coreos/ignition/v2/tests/types"
++	"github.com/flatcar/ignition/v2/internal/exec/util"
++	"github.com/flatcar/ignition/v2/tests/types"
+ 
+ 	"golang.org/x/sys/unix"
+ )
+--- ignition-2.18.0.orig/validate/main.go
++++ ignition-2.18.0/validate/main.go
+@@ -21,8 +21,8 @@ import (
+ 	"os"
+ 	"strings"
+ 
+-	"github.com/coreos/ignition/v2/config"
+-	"github.com/coreos/ignition/v2/internal/version"
++	"github.com/flatcar/ignition/v2/config"
++	"github.com/flatcar/ignition/v2/internal/version"
+ )
+ 
+ var (
diff --color -Naur patches2/series patches/series
--- a/debian/patches/series	2024-05-22 16:10:27
+++ b/debian/patches/series	2024-05-22 16:07:06
@@ -1 +1,2 @@
 debian-changes
+flatcar-ignition-patches
